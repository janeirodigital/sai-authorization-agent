{
    "pipes": [],
    "interfaces": [
        {
            "name": "AccessNeed",
            "id": "interface-AccessNeed-5f7afbbcf00b0220f9a90713e150bbda5d6b1914d294306e5ed821b0b72c0e7e9c7e7de69a01e0e38e8bebc8abda956acab6d88d8d9280bb8dff1229d5961aa8",
            "file": "src/app/state/models/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from \"@janeirodigital/sai-api-messages\";\nimport {IRI} from \"@janeirodigital/sai-api-messages\";\n\nexport type ACL = 'http://www.w3.org/ns/auth/acl#Read'\n  | 'http://www.w3.org/ns/auth/acl#Write'\n  |'http://www.w3.org/ns/auth/acl#Control'\n  |'http://www.w3.org/ns/auth/acl#Append'\n  |'http://www.w3.org/ns/auth/acl#Update';\n\nexport interface AccessNeedGroup extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  needs: IRI[];\n}\n\nexport interface AccessNeed extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  access: string[];\n  shapeTree: IRI,\n  children: IRI[]\n  parent?: IRI\n}\n\nexport interface ShapeTree extends UniqueId {\n  label: string,\n}\n\nexport interface Instance extends UniqueId {\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "access",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "shapeTree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        },
        {
            "name": "AccessNeedGroup",
            "id": "interface-AccessNeedGroup-5f7afbbcf00b0220f9a90713e150bbda5d6b1914d294306e5ed821b0b72c0e7e9c7e7de69a01e0e38e8bebc8abda956acab6d88d8d9280bb8dff1229d5961aa8",
            "file": "src/app/state/models/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from \"@janeirodigital/sai-api-messages\";\nimport {IRI} from \"@janeirodigital/sai-api-messages\";\n\nexport type ACL = 'http://www.w3.org/ns/auth/acl#Read'\n  | 'http://www.w3.org/ns/auth/acl#Write'\n  |'http://www.w3.org/ns/auth/acl#Control'\n  |'http://www.w3.org/ns/auth/acl#Append'\n  |'http://www.w3.org/ns/auth/acl#Update';\n\nexport interface AccessNeedGroup extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  needs: IRI[];\n}\n\nexport interface AccessNeed extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  access: string[];\n  shapeTree: IRI,\n  children: IRI[]\n  parent?: IRI\n}\n\nexport interface ShapeTree extends UniqueId {\n  label: string,\n}\n\nexport interface Instance extends UniqueId {\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "needs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        },
        {
            "name": "ApplicationsState",
            "id": "interface-ApplicationsState-ff145f4e051c81a455e46fd11074d3caeddcc079233c7c812ee2f42aa2c4808f26a75c556784f4df82d53a9ba143cb60ade5ed8f32c1545c6934d27185960827",
            "file": "src/app/state/reducers/application.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on} from '@ngrx/store';\nimport {Application, IRI} from '@janeirodigital/sai-api-messages';\nimport * as Actions from \"../actions/application.actions\";\nimport {createEntityAdapter, EntityState} from \"@ngrx/entity\";\n\nexport const APPLICATION_PROFILE_STATE_KEY = 'applications';\nexport interface ApplicationsState extends EntityState<Application>{\n  selectedApplication: IRI | null;\n}\n\nconst adapter = createEntityAdapter<Application>();\n\nexport const initialState: ApplicationsState =  adapter.getInitialState({\n  selectedApplication: null,\n});\n\nexport const applicationProfileReducer = createReducer(\n  initialState,\n  on(Actions.applicationProfileReceived, (state, {profile}) => adapter.addOne(profile, state)),\n  on(Actions.applicationProfilesReceived, (state, {profiles}) => adapter.addMany(profiles, state)),\n  on(Actions.unregisteredApplicationProfileReceived, (state, {profile}) => adapter.addOne(profile as Application, state)),\n);\n\nexport const applicationAdapter = adapter;\n",
            "properties": [
                {
                    "name": "selectedApplication",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "CoreState",
            "id": "interface-CoreState-e2ff7af9f9320c2d7ac152311b5f8b9d227293de85cf6f68fbad12a40719235380eea60c1977aabe67e9163c69bfb1e4289fe2634f393293ad9e2fe5644c5f7c",
            "file": "src/app/state/reducers/core.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on} from \"@ngrx/store\";\nimport * as CoreActions from \"../actions/core.actions\";\n\nexport const CORE_STATE_KEY = 'core';\nexport const CORE_LANGUAGE_KEY = 'coreLanguage';\n\nexport const preferLanguage = JSON.parse(localStorage.getItem(CORE_LANGUAGE_KEY) || '{}');\n\nexport interface CoreState {\n  oidcIssuer: string;\n  webId: string;\n  loginKnown: boolean;\n  isLoggedIn: boolean;\n  isServerLoggedIn: boolean;\n  redirectUrl: string;\n  requestedPath: string;\n  language: string;\n}\n\nexport const initialState: CoreState = {\n  oidcIssuer: '',\n  webId: '',\n  loginKnown: false,\n  isLoggedIn: false,\n  isServerLoggedIn: false,\n  redirectUrl: '',\n  requestedPath: '/dashboard',\n  language: preferLanguage.language === '' || preferLanguage.language === undefined ? navigator.language.split('-')[0] : preferLanguage.language,\n}\n\nconst excludedPaths = ['/', '/start', '/redirect', '/login', '/connect']\n\nexport const coreReducer = createReducer(\n  initialState,\n  on(CoreActions.loginInitiated, (state, {oidcIssuer}): CoreState => ({...state, oidcIssuer})),\n  on(CoreActions.webIdReceived, (state, {webId}): CoreState => ({...state, webId})),\n  on(CoreActions.loginStatusChanged, (state, {loggedIn}): CoreState => ({...state, isLoggedIn: loggedIn, loginKnown: true})),\n  on(CoreActions.serverSessionReceived, (state, {isServerLoggedIn, redirectUrl}): CoreState => ({...state, isServerLoggedIn, redirectUrl: redirectUrl ? redirectUrl : ''})),\n  on(CoreActions.pathRequested, (state, {requestedPath}): CoreState => ({\n    ...state,\n    requestedPath: excludedPaths.includes(requestedPath) ? '/dashboard' : requestedPath\n  }))\n)\n",
            "properties": [
                {
                    "name": "isLoggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isServerLoggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loginKnown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "oidcIssuer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "redirectUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "requestedPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "webId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DescriptionsState",
            "id": "interface-DescriptionsState-35f91cdd5f659a6afa1d3abf1c61dab9189a8df7f6b1cef684cea3f4ac6a9a5f3ff0d55ef6189c5b3c556c1daf29700e13216242852aa63e28f7279afc4f91a9",
            "file": "src/app/state/reducers/descriptions.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {NormalizedState} from \"./index\";\nimport {createReducer, on} from \"@ngrx/store\";\nimport {AuthorizationData, IRI} from \"@janeirodigital/sai-api-messages\";\nimport * as DescActions from \"../actions/description.actions\";\nimport {insertEntity} from \"./utils\";\n\n/*\n * Descriptions is an omni-state of slices of smaller linked data, it contains data\n * pertaining to access needs groups, access needs and shapetrees. If this grows\n * too large it is recommended to split into their own files.\n */\n\nexport const DESCRIPTIONS_STATE_KEY = 'descriptions';\n\nexport interface DescriptionsState extends NormalizedState<AuthorizationData> {\n  selectedApplication: IRI | null\n}\n\nexport const initialState: DescriptionsState = {\n  byId: {},\n  allIds: [],\n  selectedApplication: null\n}\n\nexport const descriptionsReducer = createReducer(\n  initialState,\n  on(DescActions.descriptionsNeeded, (state, {applicationId}): DescriptionsState => ({...state, selectedApplication: applicationId })),\n  on(DescActions.descriptionsReceived, (state, {authorizationData}) => ({ selectedApplication: state.selectedApplication, ...insertEntity(state, authorizationData)})),\n)\n",
            "properties": [
                {
                    "name": "selectedApplication",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "NormalizedState"
        },
        {
            "name": "Instance",
            "id": "interface-Instance-5f7afbbcf00b0220f9a90713e150bbda5d6b1914d294306e5ed821b0b72c0e7e9c7e7de69a01e0e38e8bebc8abda956acab6d88d8d9280bb8dff1229d5961aa8",
            "file": "src/app/state/models/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from \"@janeirodigital/sai-api-messages\";\nimport {IRI} from \"@janeirodigital/sai-api-messages\";\n\nexport type ACL = 'http://www.w3.org/ns/auth/acl#Read'\n  | 'http://www.w3.org/ns/auth/acl#Write'\n  |'http://www.w3.org/ns/auth/acl#Control'\n  |'http://www.w3.org/ns/auth/acl#Append'\n  |'http://www.w3.org/ns/auth/acl#Update';\n\nexport interface AccessNeedGroup extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  needs: IRI[];\n}\n\nexport interface AccessNeed extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  access: string[];\n  shapeTree: IRI,\n  children: IRI[]\n  parent?: IRI\n}\n\nexport interface ShapeTree extends UniqueId {\n  label: string,\n}\n\nexport interface Instance extends UniqueId {\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        },
        {
            "name": "NormalizedState",
            "id": "interface-NormalizedState-106f510ef3af61b303734db47aa1bad75938c5a8458f07ea4fc1c2b0a0cb45a93999c0badee5a39f5914ca4a818e4108d5fc32ae052e023786d48b23f0f1f707",
            "file": "src/app/state/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer\n} from '@ngrx/store';\nimport { ENV } from '../../../environments/environment';\n\nimport {CoreState, coreReducer, CORE_STATE_KEY} from \"./core.reducer\";\nimport {\n  ApplicationsState,\n  applicationProfileReducer,\n  APPLICATION_PROFILE_STATE_KEY,\n} from './application.reducer';\nimport {\n  SocialAgentState,\n  socialAgentsReducer,\n  SOCIAL_AGENT_STATE_KEY,\n} from './social-agent.reducer';\n\nimport {\n  DataRegistryState,\n  dataRegistriesReducer,\n  DATA_REGISTRY_STATE_KEY,\n} from './data-registry.reducer';\n\nimport {\n  ShapetreesState,\n  shapetreeReducer,\n  SHAPE_TREE_STATE_KEY,\n} from \"./access-needs.reducer\";\n\nimport { UniqueId } from '@janeirodigital/sai-api-messages';\nimport {DESCRIPTIONS_STATE_KEY, descriptionsReducer, DescriptionsState} from \"./descriptions.reducer\";\nimport { localStorageSync } from 'ngrx-store-localstorage';\nimport {\n  ACCESS_NEEDS_GROUPS_STATE_KEY,\n  ACCESS_NEEDS_STATE_KEY, accessNeedsGroupReducer, AccessNeedGroupState,\n  accessNeedsReducer,\n  AccessNeedsState\n} from \"./access-needs.reducer\";\n\nexport interface NormalizedState<T extends UniqueId> {\n  byId: { [id: string]: T },\n  allIds: string[],\n}\n\n\nexport interface RootState {\n  [CORE_STATE_KEY]: CoreState,\n  [APPLICATION_PROFILE_STATE_KEY]: ApplicationsState,\n  [SOCIAL_AGENT_STATE_KEY]: SocialAgentState,\n  [DESCRIPTIONS_STATE_KEY]: DescriptionsState,\n  [DATA_REGISTRY_STATE_KEY]: DataRegistryState,\n  [ACCESS_NEEDS_STATE_KEY]: AccessNeedsState,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: AccessNeedGroupState,\n  [SHAPE_TREE_STATE_KEY]: ShapetreesState,\n}\n\nexport const reducers: ActionReducerMap<RootState> = {\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [SOCIAL_AGENT_STATE_KEY]: socialAgentsReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n  [DATA_REGISTRY_STATE_KEY]: dataRegistriesReducer,\n  [ACCESS_NEEDS_STATE_KEY]: accessNeedsReducer,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: accessNeedsGroupReducer,\n  [SHAPE_TREE_STATE_KEY]: shapetreeReducer,\n};\n\nexport function localStorageSyncReducer(reducer: ActionReducer<RootState>): ActionReducer<RootState> {\n  return localStorageSync({keys: [{ [CORE_STATE_KEY]: ['oidcIssuer', 'requestedPath']}], rehydrate: true})(reducer);\n}\n\nexport const metaReducers: MetaReducer<RootState>[] = !ENV.production ? [localStorageSyncReducer] : [localStorageSyncReducer];\n",
            "properties": [
                {
                    "name": "allIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "byId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RootState",
            "id": "interface-RootState-106f510ef3af61b303734db47aa1bad75938c5a8458f07ea4fc1c2b0a0cb45a93999c0badee5a39f5914ca4a818e4108d5fc32ae052e023786d48b23f0f1f707",
            "file": "src/app/state/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer\n} from '@ngrx/store';\nimport { ENV } from '../../../environments/environment';\n\nimport {CoreState, coreReducer, CORE_STATE_KEY} from \"./core.reducer\";\nimport {\n  ApplicationsState,\n  applicationProfileReducer,\n  APPLICATION_PROFILE_STATE_KEY,\n} from './application.reducer';\nimport {\n  SocialAgentState,\n  socialAgentsReducer,\n  SOCIAL_AGENT_STATE_KEY,\n} from './social-agent.reducer';\n\nimport {\n  DataRegistryState,\n  dataRegistriesReducer,\n  DATA_REGISTRY_STATE_KEY,\n} from './data-registry.reducer';\n\nimport {\n  ShapetreesState,\n  shapetreeReducer,\n  SHAPE_TREE_STATE_KEY,\n} from \"./access-needs.reducer\";\n\nimport { UniqueId } from '@janeirodigital/sai-api-messages';\nimport {DESCRIPTIONS_STATE_KEY, descriptionsReducer, DescriptionsState} from \"./descriptions.reducer\";\nimport { localStorageSync } from 'ngrx-store-localstorage';\nimport {\n  ACCESS_NEEDS_GROUPS_STATE_KEY,\n  ACCESS_NEEDS_STATE_KEY, accessNeedsGroupReducer, AccessNeedGroupState,\n  accessNeedsReducer,\n  AccessNeedsState\n} from \"./access-needs.reducer\";\n\nexport interface NormalizedState<T extends UniqueId> {\n  byId: { [id: string]: T },\n  allIds: string[],\n}\n\n\nexport interface RootState {\n  [CORE_STATE_KEY]: CoreState,\n  [APPLICATION_PROFILE_STATE_KEY]: ApplicationsState,\n  [SOCIAL_AGENT_STATE_KEY]: SocialAgentState,\n  [DESCRIPTIONS_STATE_KEY]: DescriptionsState,\n  [DATA_REGISTRY_STATE_KEY]: DataRegistryState,\n  [ACCESS_NEEDS_STATE_KEY]: AccessNeedsState,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: AccessNeedGroupState,\n  [SHAPE_TREE_STATE_KEY]: ShapetreesState,\n}\n\nexport const reducers: ActionReducerMap<RootState> = {\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [SOCIAL_AGENT_STATE_KEY]: socialAgentsReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n  [DATA_REGISTRY_STATE_KEY]: dataRegistriesReducer,\n  [ACCESS_NEEDS_STATE_KEY]: accessNeedsReducer,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: accessNeedsGroupReducer,\n  [SHAPE_TREE_STATE_KEY]: shapetreeReducer,\n};\n\nexport function localStorageSyncReducer(reducer: ActionReducer<RootState>): ActionReducer<RootState> {\n  return localStorageSync({keys: [{ [CORE_STATE_KEY]: ['oidcIssuer', 'requestedPath']}], rehydrate: true})(reducer);\n}\n\nexport const metaReducers: MetaReducer<RootState>[] = !ENV.production ? [localStorageSyncReducer] : [localStorageSyncReducer];\n",
            "properties": [
                {
                    "name": "ACCESS_NEEDS_GROUPS_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccessNeedGroupState",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "ACCESS_NEEDS_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccessNeedsState",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "APPLICATION_PROFILE_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationsState",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "CORE_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoreState",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "DATA_REGISTRY_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataRegistryState",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "DESCRIPTIONS_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DescriptionsState",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "SHAPE_TREE_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ShapetreesState",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "SOCIAL_AGENT_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocialAgentState",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ShapeTree",
            "id": "interface-ShapeTree-5f7afbbcf00b0220f9a90713e150bbda5d6b1914d294306e5ed821b0b72c0e7e9c7e7de69a01e0e38e8bebc8abda956acab6d88d8d9280bb8dff1229d5961aa8",
            "file": "src/app/state/models/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from \"@janeirodigital/sai-api-messages\";\nimport {IRI} from \"@janeirodigital/sai-api-messages\";\n\nexport type ACL = 'http://www.w3.org/ns/auth/acl#Read'\n  | 'http://www.w3.org/ns/auth/acl#Write'\n  |'http://www.w3.org/ns/auth/acl#Control'\n  |'http://www.w3.org/ns/auth/acl#Append'\n  |'http://www.w3.org/ns/auth/acl#Update';\n\nexport interface AccessNeedGroup extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  needs: IRI[];\n}\n\nexport interface AccessNeed extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  access: string[];\n  shapeTree: IRI,\n  children: IRI[]\n  parent?: IRI\n}\n\nexport interface ShapeTree extends UniqueId {\n  label: string,\n}\n\nexport interface Instance extends UniqueId {\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        }
    ],
    "injectables": [
        {
            "name": "ApplicationProfileEffects",
            "id": "injectable-ApplicationProfileEffects-28850368c518e53ce5ec0592b0813f85e8a81cb13b0c7baf78bc96ce40f12ec33d10effbe911b7a7ef10ae24313cf80ad13f8390e9feaf2cb21e88f56e3bfac5",
            "file": "src/app/state/effects/application.effects.ts",
            "properties": [
                {
                    "name": "addSocialAgent$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.addSocialAgent),\n    mergeMap(({ webId, label, note }) => this.data.addSocialAgent(webId, label, note)),\n    map(profile => DataActions.socialAgentProfileReceived({profile})),\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "authorizeApplication$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.authorizeApplication),\n    mergeMap(({ authorization }) => this.data.authorizeApplication(authorization)),\n    map(accessAuthorization => DataActions.authorizationReceived({ accessAuthorization })),\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "loadApplicationProfiles$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.applicationsPanelLoaded),\n    mergeMap(() => this.data.getApplicationProfiles()),\n    map(profiles => DataActions.applicationProfilesReceived({profiles})),\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loadDataRegistries$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.dataRegistriesNeeded),\n    concatLatestFrom(() => this.store.select(selectors.selectPrefLanguage)),\n    mergeMap(([, lang]) => this.data.getDataRegistries(lang)),\n    map(registries => DataActions.dataRegistriesProvided({registries})),\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "loadDescriptions$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(DescActions.descriptionsNeeded),\n    concatLatestFrom(() => this.store.select(selectors.selectPrefLanguage)),\n    mergeMap(([props, lang]) => this.data.getDescriptions(props.applicationId, lang)),\n    switchMap(authorizationData => [\n      ...mapAuthorizationDataToNeedsActions(authorizationData).flat(),\n    ]),\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>&#39;Descriptions&#39; are the set of data needed to describe to an user the needs and capabilities of an application\nusing the descriptor provided by the application and the associated shapetrees. This effect takes all this data (as a <code>AuthorizationData</code>)\nand breaks it down into smaller parts (groups, needs and shapetrees) that can then be individually addressed from the store</p>\n",
                    "line": 54,
                    "rawdescription": "\n\n'Descriptions' are the set of data needed to describe to an user the needs and capabilities of an application\nusing the descriptor provided by the application and the associated shapetrees. This effect takes all this data (as a `AuthorizationData`)\nand breaks it down into smaller parts (groups, needs and shapetrees) that can then be individually addressed from the store\n"
                },
                {
                    "name": "loadSocialAgentsProfiles$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.socialAgentsPanelLoaded),\n    mergeMap(() => this.data.getSocialAgentProfiles()),\n    map(profiles => DataActions.socialAgentProfilesReceived({profiles})),\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "redirectToCallbackEndpoint",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.authorizationReceived),\n    tap(({accessAuthorization}) => window.location.href = accessAuthorization.callbackEndpoint || '')\n  ) }, {dispatch: false})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {map, mergeMap, switchMap, tap} from \"rxjs\";\nimport {Injectable} from \"@angular/core\";\nimport {Actions, concatLatestFrom, createEffect, ofType} from \"@ngrx/effects\";\nimport * as DataActions from \"../actions/application.actions\";\nimport * as DescActions from \"../actions/description.actions\";\nimport * as NeedActions from \"../actions/access-needs.actions\"\nimport {DataService} from \"../../services/data.service\";\nimport {Store} from \"@ngrx/store\";\nimport * as selectors from \"../selectors\";\nimport {AccessNeed as ApiAccessNeed, AccessNeedGroup as ApiGroup, AuthorizationData} from \"@janeirodigital/sai-api-messages\";\nimport {AccessNeed, AccessNeedGroup, ShapeTree} from \"../models\";\n\n// TODO contains effects for non-application, move to their own files/classes\n\n@Injectable()\nexport class ApplicationProfileEffects {\n  constructor(\n    private actions$: Actions,\n    private data: DataService,\n    private store: Store,\n  ) {}\n\n  loadApplicationProfiles$ = createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.applicationsPanelLoaded),\n    mergeMap(() => this.data.getApplicationProfiles()),\n    map(profiles => DataActions.applicationProfilesReceived({profiles})),\n  ) })\n\n  loadSocialAgentsProfiles$ = createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.socialAgentsPanelLoaded),\n    mergeMap(() => this.data.getSocialAgentProfiles()),\n    map(profiles => DataActions.socialAgentProfilesReceived({profiles})),\n  ) })\n\n  addSocialAgent$ = createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.addSocialAgent),\n    mergeMap(({ webId, label, note }) => this.data.addSocialAgent(webId, label, note)),\n    map(profile => DataActions.socialAgentProfileReceived({profile})),\n  ) })\n\n  loadDataRegistries$ = createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.dataRegistriesNeeded),\n    concatLatestFrom(() => this.store.select(selectors.selectPrefLanguage)),\n    mergeMap(([, lang]) => this.data.getDataRegistries(lang)),\n    map(registries => DataActions.dataRegistriesProvided({registries})),\n  ) })\n\n  \n  /**\n  * 'Descriptions' are the set of data needed to describe to an user the needs and capabilities of an application\n  * using the descriptor provided by the application and the associated shapetrees. This effect takes all this data (as a `AuthorizationData`)\n  * and breaks it down into smaller parts (groups, needs and shapetrees) that can then be individually addressed from the store\n  */\n  loadDescriptions$ = createEffect(() => { return this.actions$.pipe(\n    ofType(DescActions.descriptionsNeeded),\n    concatLatestFrom(() => this.store.select(selectors.selectPrefLanguage)),\n    mergeMap(([props, lang]) => this.data.getDescriptions(props.applicationId, lang)),\n    switchMap(authorizationData => [\n      ...mapAuthorizationDataToNeedsActions(authorizationData).flat(),\n    ]),\n  ) })\n\n  /* @deprecated use authorization effect */\n  authorizeApplication$ = createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.authorizeApplication),\n    mergeMap(({ authorization }) => this.data.authorizeApplication(authorization)),\n    map(accessAuthorization => DataActions.authorizationReceived({ accessAuthorization })),\n  ) })\n\n  /* TODO move to authorization effects */\n  redirectToCallbackEndpoint =  createEffect(() => { return this.actions$.pipe(\n    ofType(DataActions.authorizationReceived),\n    tap(({accessAuthorization}) => window.location.href = accessAuthorization.callbackEndpoint || '')\n  ) }, {dispatch: false});\n}\n\nconst mapAuthorizationDataToNeedsActions = (data: AuthorizationData) => {\n  const needs = data.accessNeedGroup.needs;\n\n  const shapeTrees = needs.map(need => flatShapeTrees(need)).flat();\n  const accessNeeds = needs.map(need => flatAccessNeed(need)).flat();\n\n  const shapeTreeActions = shapeTrees.map(tree => NeedActions.addShapeTree({tree}));\n  const needsActions = accessNeeds.map(need => NeedActions.addAccessNeed({need}));\n\n  const group = flatAccessNeedGroup(data.accessNeedGroup);\n  const groupAction = NeedActions.addAccessNeedGroup({group});\n  return [shapeTreeActions, needsActions, groupAction];\n}\n\n\n/* This set of functions take the nested Authorization Data from the api and flatten the needs, shapetrees and group\n * that then can be used to insert into the store as independent entities\n */\nconst flatAccessNeedGroup = (apiGroup: ApiGroup): AccessNeedGroup => {\n  return {...apiGroup, needs: apiGroup.needs.map(need => need.id)};\n}\n\nconst flatAccessNeed = (apiAccess: ApiAccessNeed): AccessNeed[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []}];\n\n  else {\n    // collect and recurse\n    const newAccess: AccessNeed = {...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []};\n    const convertedChildren = children.map(c => flatAccessNeed(c)).flat();\n\n    return [newAccess, ...convertedChildren];\n  }\n}\n\nconst flatShapeTrees = (apiAccess: ApiAccessNeed): ShapeTree[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label}]\n\n  else {\n    const thisShapeTree = {id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label};\n    const childrenShapeTrees = children.map(c => flatShapeTrees(c)).flat();\n\n    return [thisShapeTree, ...childrenShapeTrees];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthorizationEffects",
            "id": "injectable-AuthorizationEffects-659d8ab564e75ec013455353d1071aa5f28dbde8ec6580563745d904312877731d1e7fc5633e4a4d91351f3b816a304e706882761e8d1f9007426e5c4a065833",
            "file": "src/app/state/effects/authorization.effects.ts",
            "properties": [
                {
                    "name": "requestAuthorization$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(authorizationRequested),\n    mergeMap(({ authorization }) => this.data.authorizeApplication(authorization)),\n    map(accessAuthorization => DataActions.authorizationReceived({ accessAuthorization })),\n    map(() => ({type: 'NOOP'}))\n  )})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "requestUnregisteredApplicationNeeds$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(authorizationPageLoaded),\n    map((action) => descriptionsNeeded({applicationId: action.applicationId}))\n  )})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "requestUnregisteredApplicationProfile$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(authorizationPageLoaded),\n    mergeMap((action) =>\n      from(\n        this.data.getUnregisteredApplicationProfile(action.applicationId)).pipe(\n          map(profile => unregisteredApplicationProfileReceived({profile}))\n        )),\n    catchError(() => of(unregisteredApplicationProfileError()))\n  )})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Actions, createEffect, ofType} from \"@ngrx/effects\";\nimport {DataService} from \"../../services/data.service\";\nimport {authorizationPageLoaded, authorizationRequested} from \"../actions/authorization.actions\";\nimport {catchError, mergeMap} from \"rxjs/operators\";\nimport {EMPTY, from, map, of} from \"rxjs\";\nimport {Injectable} from \"@angular/core\";\nimport {\n  unregisteredApplicationProfileError,\n  unregisteredApplicationProfileReceived\n} from \"../actions/application.actions\";\nimport {descriptionsNeeded} from \"../actions/description.actions\";\nimport * as DataActions from \"../actions/application.actions\";\n\n\n@Injectable()\nexport class AuthorizationEffects {\n  constructor(\n    private actions$: Actions,\n    private data: DataService,\n  ) {}\n\n  requestUnregisteredApplicationProfile$ = createEffect(() => { return this.actions$.pipe(\n    ofType(authorizationPageLoaded),\n    mergeMap((action) =>\n      from(\n        this.data.getUnregisteredApplicationProfile(action.applicationId)).pipe(\n          map(profile => unregisteredApplicationProfileReceived({profile}))\n        )),\n    catchError(() => of(unregisteredApplicationProfileError()))\n  )});\n\n  requestUnregisteredApplicationNeeds$ = createEffect(() => { return this.actions$.pipe(\n    ofType(authorizationPageLoaded),\n    map((action) => descriptionsNeeded({applicationId: action.applicationId}))\n  )})\n\n  requestAuthorization$ = createEffect(() => { return this.actions$.pipe(\n    ofType(authorizationRequested),\n    mergeMap(({ authorization }) => this.data.authorizeApplication(authorization)),\n    map(accessAuthorization => DataActions.authorizationReceived({ accessAuthorization })),\n    map(() => ({type: 'NOOP'}))\n  )})\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CoreEffects",
            "id": "injectable-CoreEffects-0145ad74ce860b17b4a612ae25042752d58813b82c06e5bf326419ab3a30945ea1dfa529cbb08ca6039411ab4511c647bd41ba7a2a0d47b3ba8e890f51db1c1a",
            "file": "src/app/state/effects/core.effects.ts",
            "properties": [
                {
                    "name": "checkServerSession$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.loginStatusChanged),\n    concatLatestFrom(() => this.store.select(selectors.selectIssuer)),\n    mergeMap(([action, oidcIssuer]) => {\n      if (action.loggedIn) {\n        return of(CoreActions.serverSessionRequested({oidcIssuer}))\n      } else {\n        return EMPTY;\n      }\n    }),\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "handleIncomingRedirect$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.incomingLoginRedirect),\n    mergeMap(({url}) => from(this.id.handleRedirect(url))),\n    map(oidcInfo => {\n      if (oidcInfo) {\n        return CoreActions.oidcInfoReceived({oidcInfo})\n      } else {\n        throw new Error('oidcInfo undefined')\n      }\n    })\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "login$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.loginRequested),\n    map(({oidcIssuer}) => CoreActions.loginInitiated({oidcIssuer})),\n    tap(({oidcIssuer}) => this.id.login(oidcIssuer)),\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "serverLoginRequested$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.serverLoginRequested),\n    concatLatestFrom(() => this.store.select(selectors.selectRedirectUrl)),\n    tap(([, redirectUrl]) => this.id.serverLogin(redirectUrl)),\n    map(() => CoreActions.serverLoginInitiated()),\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "serverSessionRequested$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.serverSessionRequested),\n    mergeMap(({oidcIssuer}) => from(this.id.checkServerSession(oidcIssuer))\n      .pipe(\n        map(result => CoreActions.serverSessionReceived(result))\n      )),\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "setLoggedIn$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.oidcInfoReceived),\n    map(({oidcInfo}) => CoreActions.loginStatusChanged({loggedIn: oidcInfo.isLoggedIn}))\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "setWebId$",
                    "defaultValue": "createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.oidcInfoReceived),\n    // TODO handle invalid webid\n    map(({oidcInfo}) => CoreActions.webIdReceived({webId: oidcInfo.webId || ''}))\n  ) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {Actions, createEffect, ofType, concatLatestFrom} from \"@ngrx/effects\";\nimport { Store } from \"@ngrx/store\";\nimport { EMPTY, map, tap, of, from} from \"rxjs\";\nimport {LoginService} from \"../../services/login.service\";\nimport * as CoreActions from \"../actions/core.actions\";\nimport {mergeMap} from \"rxjs/operators\";\nimport * as selectors from \"../selectors\";\n\n@Injectable()\nexport class CoreEffects {\n\n  constructor(\n    private actions$: Actions,\n    private id: LoginService,\n    private store: Store,\n  ) {}\n\n  login$ = createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.loginRequested),\n    map(({oidcIssuer}) => CoreActions.loginInitiated({oidcIssuer})),\n    tap(({oidcIssuer}) => this.id.login(oidcIssuer)),\n  ) })\n\n  handleIncomingRedirect$ = createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.incomingLoginRedirect),\n    mergeMap(({url}) => from(this.id.handleRedirect(url))),\n    map(oidcInfo => {\n      if (oidcInfo) {\n        return CoreActions.oidcInfoReceived({oidcInfo})\n      } else {\n        throw new Error('oidcInfo undefined')\n      }\n    })\n  ) })\n\n  setLoggedIn$ = createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.oidcInfoReceived),\n    map(({oidcInfo}) => CoreActions.loginStatusChanged({loggedIn: oidcInfo.isLoggedIn}))\n  ) })\n\n  setWebId$ = createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.oidcInfoReceived),\n    // TODO handle invalid webid\n    map(({oidcInfo}) => CoreActions.webIdReceived({webId: oidcInfo.webId || ''}))\n  ) })\n\n  checkServerSession$ = createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.loginStatusChanged),\n    concatLatestFrom(() => this.store.select(selectors.selectIssuer)),\n    mergeMap(([action, oidcIssuer]) => {\n      if (action.loggedIn) {\n        return of(CoreActions.serverSessionRequested({oidcIssuer}))\n      } else {\n        return EMPTY;\n      }\n    }),\n  ) })\n\n  serverSessionRequested$ = createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.serverSessionRequested),\n    mergeMap(({oidcIssuer}) => from(this.id.checkServerSession(oidcIssuer))\n      .pipe(\n        map(result => CoreActions.serverSessionReceived(result))\n      )),\n  ) })\n\n  serverLoginRequested$ = createEffect(() => { return this.actions$.pipe(\n    ofType(CoreActions.serverLoginRequested),\n    concatLatestFrom(() => this.store.select(selectors.selectRedirectUrl)),\n    tap(([, redirectUrl]) => this.id.serverLogin(redirectUrl)),\n    map(() => CoreActions.serverLoginInitiated()),\n  ) })\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataService",
            "id": "injectable-DataService-fa8d723be15ebbabdfbaf3f6facbd75a91186c4b31aa54215cefd6a661a74fc7ce8ec14e707ab71fd11bd1619662a6ed3d193e17d223398819cac6c4c1148b65",
            "file": "src/app/services/data.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addSocialAgent",
                    "args": [
                        {
                            "name": "webId",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "note",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<SocialAgent>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "webId",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "note",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "authorizeApplication",
                    "args": [
                        {
                            "name": "authorization",
                            "type": "Authorization",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<AccessAuthorization>",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "authorization",
                            "type": "Authorization",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApplicationProfiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Application[]>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "getDataFromApi",
                    "args": [
                        {
                            "name": "request",
                            "type": "Request",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "Request",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataRegistries",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DataRegistry[]>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDescriptions",
                    "args": [
                        {
                            "name": "applicationId",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<AuthorizationData>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "applicationId",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSocialAgentProfiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<SocialAgent[]>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "getUnregisteredApplicationProfile",
                    "args": [
                        {
                            "name": "applicationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Partial<Application>>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "applicationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {\n  AccessAuthorization,\n  AddSocialAgentRequest,\n  Application,\n  ApplicationAuthorizationRequest,\n  ApplicationAuthorizationResponse,\n  ApplicationAuthorizationResponseMessage,\n  ApplicationsRequest,\n  ApplicationsResponse,\n  ApplicationsResponseMessage,\n  Authorization,\n  AuthorizationData,\n  DataRegistriesRequest,\n  DataRegistriesResponse,\n  DataRegistriesResponseMessage,\n  DataRegistry,\n  DescriptionsRequest,\n  DescriptionsResponse,\n  DescriptionsResponseMessage,\n  IRI,\n  Request,\n  ResponseMessage,\n  SocialAgent,\n  SocialAgentResponse,\n  SocialAgentResponseMessage,\n  SocialAgentsRequest,\n  SocialAgentsResponse,\n  SocialAgentsResponseMessage,\n  UnregisteredApplicationProfileRequest,\n  UnregisteredApplicationProfileResponse,\n  UnregisteredApplicationResponseMessage\n} from '@janeirodigital/sai-api-messages'\nimport {ENV} from \"../../environments/environment\";\nimport {SolidClient} from '../utils/solid-client';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(\n    private solidClient: SolidClient,\n  ) {}\n\n  private async getDataFromApi<T extends ResponseMessage>(request: Request): Promise<T> {\n    const commonOptions = {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          }\n    }\n    const options = {\n      ...commonOptions,\n      body: request.stringify()\n    }\n    const response = await this.solidClient.fetch(`${ENV.SRV_BASE}/api`, options)\n    return (await response.json()) as T\n  }\n\n  async getApplicationProfiles(): Promise<Application[]> {\n    const request = new ApplicationsRequest()\n    const data = await this.getDataFromApi<ApplicationsResponseMessage>(request)\n    const response = new ApplicationsResponse(data)\n    return response.payload\n  }\n\n  async getUnregisteredApplicationProfile(applicationId: string): Promise<Partial<Application>> {\n    const request = new UnregisteredApplicationProfileRequest(applicationId);\n    const data = await this.getDataFromApi<UnregisteredApplicationResponseMessage>(request);\n    const response = new UnregisteredApplicationProfileResponse(data);\n    return response.payload;\n  }\n\n  async getSocialAgentProfiles(): Promise<SocialAgent[]> {\n    const request = new SocialAgentsRequest()\n    const data = await this.getDataFromApi<SocialAgentsResponseMessage>(request)\n    const response = new SocialAgentsResponse(data)\n    return response.payload\n  }\n\n  async addSocialAgent(webId: IRI, label: string, note?: string): Promise<SocialAgent> {\n    const request = new AddSocialAgentRequest(webId, label, note)\n    const data = await this.getDataFromApi<SocialAgentResponseMessage>(request)\n    const response = new SocialAgentResponse(data)\n    return response.payload\n  }\n\n  async getDataRegistries(lang: string): Promise<DataRegistry[]> {\n    const request = new DataRegistriesRequest(lang)\n    const data = await this.getDataFromApi<DataRegistriesResponseMessage>(request)\n    const response = new DataRegistriesResponse(data)\n    return response.payload\n  }\n\n  async getDescriptions(applicationId: IRI, lang: string): Promise<AuthorizationData> {\n    const request = new DescriptionsRequest(applicationId, lang)\n    const data = await this.getDataFromApi<DescriptionsResponseMessage>(request)\n    const response = new DescriptionsResponse(data)\n    return response.payload\n  }\n\n  async authorizeApplication(authorization: Authorization): Promise<AccessAuthorization> {\n    const request = new ApplicationAuthorizationRequest(authorization)\n    const data = await this.getDataFromApi<ApplicationAuthorizationResponseMessage>(request)\n    const response = new ApplicationAuthorizationResponse(data)\n    return response.payload\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-9402c248754b15dc188d33379a976334a172c047bad52bc8c30491aa3d6fe81b1f3901af5336a99e587b96ce7fa8c2bdcc908bb0cc371e6800abe31b9a48b0b5",
            "file": "src/app/services/login.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkServerSession",
                    "args": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRedirect",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ISessionInfo | undefined>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serverLogin",
                    "args": [
                        {
                            "name": "redirectUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "redirectUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ENV} from \"../../environments/environment\";\nimport {ISessionInfo} from \"@inrupt/solid-client-authn-browser\";\nimport {SolidClient} from \"../utils/solid-client\";\nimport { SolidOidc } from '../utils/solid-oidc';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(\n    private solidClient: SolidClient,\n    private solidOidc: SolidOidc,\n  ) {}\n\n  async login(oidcIssuer: string) {\n    try {\n      await this.solidOidc.login({\n        clientId: ENV.OIDC_CLIENT_ID,\n        oidcIssuer,\n        redirectUrl: `${ENV.BASE_URL}/redirect`,\n      });\n    } catch (e) {\n      throw new Error(`fail retrieving server, status = ${e}`);\n    }\n\n  }\n\n  async checkServerSession(oidcIssuer: string): Promise<{isServerLoggedIn: boolean, redirectUrl?: string}> {\n    const options = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({idp: oidcIssuer}),\n    }\n    const result = await this.solidClient.fetch(`${ENV.SRV_BASE}/login`, options)\n\n    if (result.status === 204) {\n      return {isServerLoggedIn: true}\n    } else if (result.status === 200) {\n      const {redirectUrl} = await result.json()\n      return  {isServerLoggedIn: false, redirectUrl}\n    } else {\n      throw new Error(`login check failed, status = ${result.status}`)\n    }\n  }\n\n  async handleRedirect(url: string): Promise<ISessionInfo | undefined> {\n    return this.solidOidc.handleIncomingRedirect(url);\n  }\n\n  async serverLogin(redirectUrl: string) {\n    window.location.href = redirectUrl\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "solidOidc",
                        "type": "SolidOidc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "solidOidc",
                        "type": "SolidOidc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PushService",
            "id": "injectable-PushService-e96ea664b4839aae2fe68e7dbee84d422159e25ed6270d5c2903fa046e10cffd10ebfb9059bfebb22e193cb5cbba4a31008b8fc4ea79f8b8793e3615e6aea650",
            "file": "src/app/services/push.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "subscription",
                            "type": "PushSubscription",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "subscription",
                            "type": "PushSubscription",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ENV } from 'src/environments/environment';\nimport { SolidClient } from '../utils/solid-client';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PushService {\n\n  constructor(\n    private solidClient: SolidClient,\n  ) {}\n\n  async subscribe(subscription: PushSubscription) {\n    const options = {\n      method: 'POST',\n      body: JSON.stringify(subscription),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n    await this.solidClient.fetch(`${ENV.SRV_BASE}/push-subscribe`, options)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SolidClient",
            "id": "injectable-SolidClient-a7104c8828be438e95b945d0009229bde773b0f2de0c05f99e23bba28db463ca08cdeab71f85af6936502aa7b6c1f7f4a95f4a2aad6d6e41e32a82de26be8cdd",
            "file": "src/app/utils/solid-client.ts",
            "properties": [
                {
                    "name": "_fetch",
                    "defaultValue": "getDefaultSession().fetch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetch",
                    "args": [
                        {
                            "name": "url",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Response>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {getDefaultSession} from \"@inrupt/solid-client-authn-browser\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SolidClient {\n\n  private _fetch = getDefaultSession().fetch;\n\n  public fetch(url: RequestInfo, init?: RequestInit): Promise<Response> {\n    return this._fetch(url, init);\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "SolidOidc",
            "id": "injectable-SolidOidc-8e11767e01308ea391e58d1eb4af454eb321a6b14df2892fc6a4ba25546ffa73568ba97d483b53a38a5d3a68b6c12126cf76a806bb214ed48307eeab6a076a5c",
            "file": "src/app/utils/solid-oidc.ts",
            "properties": [
                {
                    "name": "handleIncomingRedirect",
                    "defaultValue": "handleIncomingRedirect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "login",
                    "defaultValue": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport {handleIncomingRedirect, login} from \"@inrupt/solid-client-authn-browser\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SolidOidc {\n  login = login\n  handleIncomingRedirect = handleIncomingRedirect\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-e20f2cc077f37539358255cc58c51e68244ccc18a34fdf9268f819f08a31d3d7abe80bf0e923e4c71c665b599f707c7f05da11cd53e0da8c097b64fb6fcf339a",
            "file": "src/app/guards/auth.guard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tryToRecoverSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivateChild, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {from, map, tap, switchMap, Observable, withLatestFrom} from 'rxjs';\nimport {getDefaultSession} from '@inrupt/solid-client-authn-browser';\nimport {Store} from \"@ngrx/store\";\nimport * as CoreActions from \"../state/actions/core.actions\";\nimport {selectBothEndsLoggedIn, selectLoggedInStatus} from \"../state/selectors\"\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivateChild {\n\n  constructor(\n    private router: Router,\n    private store: Store,\n  ) {}\n\n  canActivateChild(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    route: ActivatedRouteSnapshot,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    return from(this.tryToRecoverSession()).pipe(\n      withLatestFrom(this.store.select(selectLoggedInStatus)),\n      tap(([recoveredStatus, loggedInStatus]) => {\n        // dispatching while both false will result in setting loginKnown in the reducer\n        if(!(recoveredStatus && loggedInStatus)) {\n          this.store.dispatch(CoreActions.loginStatusChanged({loggedIn: recoveredStatus}));\n        }}\n      ),\n      switchMap(() => this.store.select(selectBothEndsLoggedIn)),\n      map((bothEndsLoggedIn) => bothEndsLoggedIn || this.router.parseUrl('start'))\n    );\n  }\n\n  private async tryToRecoverSession(): Promise<boolean> {\n    const session = getDefaultSession();\n\n    if (!session.info.isLoggedIn) {\n      // if session can be restored it will redirect to oidcIssuer, which will return back to `/redirect`\n      await session.handleIncomingRedirect({restorePreviousSession: true});\n    }\n    return session.info.isLoggedIn\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "StartGuard",
            "id": "injectable-StartGuard-b3eda654d747fd85b1dd8d73b087a9ef63fdececdd751fd4977c79514c0d8b7ff44cc441a0450639c5079ffe30a9872a99d150aaa5fafe4585c4741dd0457c5b",
            "file": "src/app/guards/start.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateChild, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable, filter, switchMap } from 'rxjs';\nimport {Store} from \"@ngrx/store\";\nimport {selectLoginKnown, selectLoggedInStatus, selectRequestedPath, selectServerLoggedInStatus, selectRedirectUrl} from \"../state/selectors\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StartGuard implements CanActivateChild {\n\n  constructor(\n    private router: Router,\n    private store: Store,\n  ) {\n    this.store.select(selectLoginKnown).pipe(\n      filter((loginKnown: boolean) => !loginKnown)\n    ).subscribe(() => this.router.navigateByUrl('/dashboard'));\n\n    this.store.select(selectLoginKnown).pipe(\n      filter((loginKnown: boolean) => loginKnown),\n      switchMap(() => this.store.select(selectLoggedInStatus)),\n      filter((loggedIn: boolean) => !loggedIn),\n    ).subscribe(() => this.router.navigateByUrl('/login'));\n\n    this.store.select(selectLoginKnown).pipe(\n      filter((loginKnown: boolean) => loginKnown),\n      switchMap(() => this.store.select(selectLoggedInStatus)),\n      filter((loggedIn: boolean) => loggedIn),\n      switchMap(() => this.store.select(selectServerLoggedInStatus)),\n      filter((serverLoggedIn: boolean) => !serverLoggedIn),\n      switchMap(() => this.store.select(selectRedirectUrl)),\n      filter((redirectUrl) => !!redirectUrl),\n    ).subscribe(() => this.router.navigateByUrl('/connect'));\n\n    this.store.select(selectLoginKnown).pipe(\n      filter((loginKnown: boolean) => loginKnown),\n      switchMap(() => this.store.select(selectLoggedInStatus)),\n      filter((loggedIn: boolean) => loggedIn),\n      switchMap(() => this.store.select(selectServerLoggedInStatus)),\n      filter((serverLoggedIn: boolean) => serverLoggedIn),\n      switchMap(() => this.store.select(selectRequestedPath)),\n    ).subscribe((requestedPath) => this.router.navigateByUrl(requestedPath));\n  }\n\n  canActivateChild(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    route: ActivatedRouteSnapshot,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return true\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-7ac45f5bf3a9d864190fc903f94ad4d6dcf5a190a4edd65355ea0fe624785cd0fa569e133e251a5ac10962c785e2167523620900ac2bef9b03838867338ef29b",
            "file": "src/app/interceptors/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse,\n  HttpEventType\n} from '@angular/common/http';\nimport { Observable, tap} from 'rxjs';\nimport * as CoreActions from '../state/actions/core.actions';\nimport { Store } from '@ngrx/store';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(\n    private store: Store\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      tap((event: HttpEvent<unknown>) => {\n        // Ignore the outgoing requests\n        if (event.type === HttpEventType.Sent) return;\n\n        event = event as HttpResponse<unknown>;\n\n        if (event.status === 401) {\n          console.info('[Auth Interceptor] Received 401 response - setting login status to false')\n          this.store.dispatch(CoreActions.loginStatusChanged({loggedIn: false}));\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AddSocialAgentComponent",
            "id": "component-AddSocialAgentComponent-43e1adefb2ccd7200f4b559d9103ed6460cd6117b3f3eafceffb827339c97dd30a40f511ca4133369789f6b8f8dbf5067bd0a6d3b2cf454b3902bba849a1f2ac",
            "file": "src/app/pages/add-social-agent/add-social-agent.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-add-social-agent",
            "styleUrls": [
                "./add-social-agent.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./add-social-agent.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "webid",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Store} from \"@ngrx/store\";\nimport {IRI} from \"@janeirodigital/sai-api-messages\";\nimport * as DataActions from \"../../state/actions/application.actions\";\n\n@Component({\n  selector: 'sai-add-social-agent',\n  templateUrl: './add-social-agent.component.html',\n  styleUrls: ['./add-social-agent.component.css']\n})\nexport class AddSocialAgentComponent implements OnInit {\n  webid: string | null = null;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private store: Store,\n  ) { }\n\n  ngOnInit(): void {\n    this.webid = this.route.snapshot.queryParamMap.get('webid')\n  }\n\n  onSubmit(data: {webid: IRI, label: string, note?: string}) {\n    const { webid: webId, label, note } = data;\n    this.store.dispatch(DataActions.addSocialAgent({webId, label, note}))\n    // TODO confirm action was successful/handle error before turning the user away\n    this.router.navigateByUrl('/dashboard');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\ndiv {\n  margin: 100px;\n}\n",
                    "styleUrl": "./add-social-agent.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div>\n  <sai-add-social-agent-form [webid]=\"this.webid\" (send)=\"onSubmit($event)\"></sai-add-social-agent-form>\n</div>\n"
        },
        {
            "name": "AddSocialAgentFormComponent",
            "id": "component-AddSocialAgentFormComponent-ec3f3f9c57d5e7e949690aa4241e219c00291d74e0f19e3f20b60758aa853b29b3a59ebe84384a8d890afb838aea8a3d175ba9f15a35e3cb19a59460297cd7c1",
            "file": "src/app/components/add-social-agent-form/add-social-agent-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-add-social-agent-form",
            "styleUrls": [
                "./add-social-agent-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./add-social-agent-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "webid",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "IRI | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "send",
                    "defaultValue": "new EventEmitter<{webid: IRI, label: string, note: string}>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    webid: new FormControl<IRI>(''),\n    label: new FormControl<string>(''),\n    note: new FormControl<string>(''),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {IRI} from \"@janeirodigital/sai-api-messages\";\n\n@Component({\n  selector: 'sai-add-social-agent-form',\n  templateUrl: './add-social-agent-form.component.html',\n  styleUrls: ['./add-social-agent-form.component.css']\n})\nexport class AddSocialAgentFormComponent implements OnInit {\n\n  @Input() webid: IRI | null = null;\n  @Output() send = new EventEmitter<{webid: IRI, label: string, note: string}>();\n\n  form = new FormGroup({\n    webid: new FormControl<IRI>(''),\n    label: new FormControl<string>(''),\n    note: new FormControl<string>(''),\n  });\n\n  ngOnInit(): void {\n    this.form.controls.webid.setValue(this.webid);\n  }\n\n  submitHandler(): void {\n\n    const webid = this.form.get('webid')?.value;\n    const label = this.form.get('webid')?.value;\n    const note = this.form.get('webid')?.value || '';\n\n    // TODO reject and inform to user\n    if (!webid || !label) return;\n\n    this.send.emit({webid, label, note});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-social-agent-form.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex flex-col px-12 py-28 items-center bg-slate-100 text-slate-800\">\n  <h2 class=\"text-4xl mb-8\">{{\"APP.CTA-ADD-SOCIAL-AGENT\" | translate}}</h2>\n  <div>\n    <form [formGroup]=\"form\" (ngSubmit)=\"submitHandler()\"\n          class=\"flex flex-col space-y-6\">\n      <label>\n        <p class=\"text-sm ml-2\">WebId</p>\n        <input type=\"url\" formControlName=\"webid\" required class=\"border border-slate-200 w-96 p-2\">\n      </label>\n      <label>\n        <p class=\"text-sm ml-2\">Name</p>\n        <input type=\"text\" formControlName=\"label\" required class=\"border border-slate-200 w-96 p-2\">\n      </label>\n      <label>\n        <p class=\"text-sm ml-2\">Notes</p>\n        <input type=\"text\" formControlName=\"note\" class=\"border border-slate-200 w-96 p-2\">\n      </label>\n      <button class=\"bg-blue-900 text-blue-50 text-xl w-1/3 mx-auto py-2 font-bold\">Add</button>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-2150e32c6c4db1decd441be9a99c0470fe426c2a04cbb6cd0a9510a7b59442d649222a9bf311e4612c7b636f6541500f785afff0267cc0bea885c2ea26956b62",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoggedIn",
                    "defaultValue": "this.store.select(selectLoggedInStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "oidcIssuer",
                    "defaultValue": "this.store.select(selectIssuer)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscription$",
                    "defaultValue": "this.swPush.subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "title",
                    "defaultValue": "'sai-web-app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "webId",
                    "defaultValue": "this.store.select(selectWebId)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToNotifications",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {Store} from \"@ngrx/store\";\nimport {onSessionRestore} from '@inrupt/solid-client-authn-browser';\nimport * as CoreActions from \"./state/actions/core.actions\";\nimport {selectLoggedInStatus, selectIssuer, selectWebId} from \"./state/selectors\";\nimport {SwPush} from '@angular/service-worker';\nimport {PushService} from \"./services/push.service\";\nimport {ENV} from \"../environments/environment\";\nimport { TranslateService } from \"@ngx-translate/core\";\n\n@Component({\n  selector: 'sai-app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit{\n  title = 'sai-web-app';\n  oidcIssuer = this.store.select(selectIssuer);\n  webId = this.store.select(selectWebId);\n  isLoggedIn = this.store.select(selectLoggedInStatus);\n\n  subscription$ = this.swPush.subscription;\n\n  constructor(\n    private router: Router,\n    private store: Store,\n    private swPush: SwPush,\n    private push: PushService,\n    translate: TranslateService,\n  ) {\n    // TODO ensure that requestedPath gets set even if oidc session can't be restored\n    onSessionRestore((currentUrl: string) => {\n      const url = new URL(currentUrl)\n      const requestedPath = url.pathname + url.search\n      this.store.dispatch(CoreActions.pathRequested({ requestedPath }))\n    })\n\n    this.swPush.notificationClicks.subscribe(({ notification }) => {\n      this.router.navigateByUrl(`/add-social-agent?webid=${notification.data.webId}`).catch(() => {throw Error(\"Navigation Failed\")});\n    });\n\n    // this language will be used as a fallback when a translation isn't found in the current language\n    translate.setDefaultLang('en');\n\n    // the lang to use, if the lang isn't available, it will use the current loader to get them\n    translate.use('en');\n  }\n\n  ngOnInit() {\n    // '/' doesn't trigger any guards, and we want to trigger start guard\n    if (window.location.pathname === '/') {\n      this.router.navigateByUrl('/start').catch(() => {throw Error(\"Navigation failed\")});\n    }\n  }\n\n  async subscribeToNotifications() {\n    const subscription = await this.swPush.requestSubscription({\n      serverPublicKey: ENV.VAPID_PUBLIC_KEY\n    });\n    await this.push.subscribe(subscription)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "swPush",
                        "type": "SwPush",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "push",
                        "type": "PushService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "swPush",
                        "type": "SwPush",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "push",
                        "type": "PushService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<sai-navbar\n  [webId]=\"(webId | async)!\"\n  [isLoggedIn]=\"(isLoggedIn | async)!\"\n  [withNotificationsAction]=\"(subscription$|async) === null\"\n  (notifications)=\"subscribeToNotifications()\"\n></sai-navbar>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "ApplicationComponent",
            "id": "component-ApplicationComponent-40b62f82824d1f15bfc9bf65df10b4767108ef31a065673b67ecf5e056242b0e608e82159498fbed0808ef9101628dc8289fea098238f0ab94f78541d7399703",
            "file": "src/app/pages/application/application.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-application",
            "styleUrls": [
                "./application.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./application.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {Store} from \"@ngrx/store\";\nimport {descriptionsNeeded} from \"../../state/actions/description.actions\";\n\n@Component({\n  selector: 'sai-application',\n  templateUrl: './application.component.html',\n  styleUrls: ['./application.component.css']\n})\nexport class ApplicationComponent implements OnInit, OnDestroy {\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private store: Store,\n  ) {\n  }\n\n  ngOnInit(): void {\n    const applicationId = this.route.snapshot.queryParamMap.get('client_id');\n\n    if (!applicationId) {\n      this.router.navigateByUrl('/dashboard');\n    } else {\n      this.store.dispatch(descriptionsNeeded({applicationId}));\n    }\n  }\n\n  ngOnDestroy(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./application.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<p>application works!</p>\n"
        },
        {
            "name": "ApplicationsComponent",
            "id": "component-ApplicationsComponent-809c13f9bcebcf3daf83fd0913e8e133978d94d4354c495b4f81522e6e9a2694d6ac93110f28422e3b989249a907794eb0264c7153dc6c029e4d13c1e20482ab",
            "file": "src/app/pages/applications/applications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-applications",
            "styleUrls": [
                "./applications.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./applications.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allApps$",
                    "defaultValue": "this.store.select(selectApplications)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "currentGroup$",
                    "defaultValue": "this.store.select(selectCurrentGroup)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "currentNeeds$",
                    "defaultValue": "this.store.select(selectCurrentNeeds)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "currentShapeTrees$",
                    "defaultValue": "this.store.select(selectCurrentShapeTrees)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "requestDescriptions",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Store} from \"@ngrx/store\";\nimport {selectApplications} from 'src/app/state/selectors/application.selectors';\nimport * as DataActions from 'src/app/state/actions/application.actions';\nimport * as DescActions from \"../../state/actions/description.actions\";\nimport {\n  selectCurrentGroup,\n  selectCurrentNeeds,\n  selectCurrentShapeTrees\n} from \"../../state/selectors/access-needs.selectors\";\n\n@Component({\n  selector: 'sai-applications',\n  templateUrl: './applications.component.html',\n  styleUrls: ['./applications.component.css']\n})\nexport class ApplicationsComponent implements OnInit {\n\n  allApps$ = this.store.select(selectApplications);\n\n  currentGroup$ = this.store.select(selectCurrentGroup);\n  currentNeeds$ = this.store.select(selectCurrentNeeds);\n  currentShapeTrees$ = this.store.select(selectCurrentShapeTrees);\n\n  constructor(\n    public store: Store,\n  ) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(DataActions.applicationsPanelLoaded())\n  }\n\n  requestDescriptions(id: string): void {\n    this.store.dispatch(DescActions.descriptionsNeeded({applicationId: id}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./applications.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex flex-col gap-y-3 m-6\">\n  <a *ngFor=\"let app of allApps$ | async\"\n      routerLink=\"application\"\n      [queryParams]=\"{client_id: app.id}\"\n       class=\"hover:cursor-pointer bg-slate-200 grow max-w-xs\n              flex p-3 items-center\n              border border-slate-700\">\n    <img [src]=\"app.logo\" alt=\"Logo\"\n         class=\"object-cover w-16 h-16 border border-slate-700 bg-white\">\n    <h4 class=\"ml-5 text-3xl\">{{app.name}}</h4>\n  </a>\n</div>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "AppViewComponent",
            "id": "component-AppViewComponent-aaaa17a01f2e69e40dbe2947cb00732e4e5dc07658661aaa8cd1ddb6aba35e42039f212d496fe6a9acfc20ba2d656ca632961567e82d1769f05ed7d15ca1f593",
            "file": "src/app/components/app-view/app-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-app-view",
            "styleUrls": [
                "./app-view.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Application",
                    "decorators": []
                },
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "group",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "AccessNeedGroup | null",
                    "decorators": []
                },
                {
                    "name": "needs",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "AccessNeed[] | null",
                    "decorators": []
                },
                {
                    "name": "shapetrees",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ShapeTree[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faEye",
                    "defaultValue": "faEye",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "faPencil",
                    "defaultValue": "faPencil",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "getShapetreesForNeed",
                    "args": [
                        {
                            "name": "need",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ShapeTree",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "need",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Application, IRI } from '@janeirodigital/sai-api-messages';\nimport { AccessNeed, AccessNeedGroup, ShapeTree } from '../../state/models';\nimport { faEye, faPencil } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'sai-app-view',\n  templateUrl: './app-view.component.html',\n  styleUrls: ['./app-view.component.css']\n})\nexport class AppViewComponent {\n  faEye = faEye;\n  faPencil = faPencil;\n\n  @Input() expanded = false;\n  @Input() application!: Application;\n  @Input() group: AccessNeedGroup | null = null;\n  @Input() needs: AccessNeed[] | null = null;\n  @Input() shapetrees: ShapeTree[] | null = null;\n\n  getShapetreesForNeed(need: AccessNeed): ShapeTree {\n    if (!this.shapetrees) throw Error(\"Invalid shapetree data\");\n\n    const shapetrees =  this.shapetrees.filter(tree => need.shapeTree.includes(tree.id)).pop();\n\n    if (!shapetrees) throw Error(\"Invalid shapetree data\");\n\n    return shapetrees;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app-view.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "\n<div class=\"flex flex-col p-5 bg-slate-100 border border-slate-200\">\n  <div class=\"flex items-center ml-5\">\n    <img [src]=\"application.logo\" alt=\"Logo\"\n         class=\"object-cover w-16 h-16 border border-slate-200 mr-5 bg-white\">\n    <div class=\"flex flex-col\">\n      <h2 class=\"text-4xl font-normal\">\n<!--        TODO use actual author name and url-->\n        {{application.name}} <span class=\"text-sm\">by <span class=\"underline\"> <a href=\"https://janeirodigital.com/\" target=\"_blank\">Janeiro Digital</a></span></span>\n      </h2>\n      <p *ngIf=\"application.lastUpdateDate || application.authorizationDate\"\n         class=\"text-slate-500 text-sm\">\n        {{'APP.LAST-UPDATE' | translate}} {{(application.lastUpdateDate || application.authorizationDate) | date}}\n      </p>\n    </div>\n  </div>\n  <div class=\"mt-10 bg-white\">\n    <div *ngIf=\"group\" class=\"px-4 py-2 border border-slate-200\">\n      <h6 class=\"text-2xl text-slate-900\">{{group.label}}</h6>\n      <p class=\"text-slate-500 text-sm\">{{group.description}}</p>\n\n      <div *ngFor=\"let need of needs\"\n           class=\"mt-10 last:mb-5\">\n        <p class=\"pl-5\"><span class=\"text-xl\">{{getShapetreesForNeed(need).label}}</span><br><span class=\"text-sm\">{{need.label}}</span></p>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AuthorizationPage",
            "id": "component-AuthorizationPage-b5ec9c15ee4b37fe95e5bb1b96c80355207276df6f1b893d1e5942d74efc93621bc4f6b77fb5567127292d73da08c4c36fe32a5c582e63ae4fd98e599430eb0f",
            "file": "src/app/pages/authorization/authorization.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-authorization-page",
            "styleUrls": [
                "./authorization.page.css"
            ],
            "styles": [],
            "templateUrl": [
                "./authorization.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "application$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Application>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "clientId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "group$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AccessNeedGroup>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "needs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AccessNeed[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "shapetrees$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ShapeTree[]>",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "authorize",
                    "args": [
                        {
                            "name": "granted",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "granted",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDataAuthorizations",
                    "args": [
                        {
                            "name": "accessNeed",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DataAuthorization[]>",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "accessNeed",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parent",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScope",
                    "args": [
                        {
                            "name": "accessNeed",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accessNeed",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "requestAuthorizationData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUses the client_id query parameter to init an authorization flow\n",
                    "description": "<p>Uses the client_id query parameter to init an authorization flow</p>\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccessNeed, AccessNeedGroup, ShapeTree } from '../../state/models';\nimport {\n  Application,\n  Authorization,\n  DataAuthorization,\n  IRI,\n} from '@janeirodigital/sai-api-messages';\nimport { Store } from '@ngrx/store';\nimport {\n  authorizationPageLoaded,\n  authorizationRequested,\n} from '../../state/actions/authorization.actions';\nimport { applicationProfile } from '../../state/selectors/application.selectors';\nimport { filter, firstValueFrom, Observable } from 'rxjs';\nimport {\n  selectAccessNeeds,\n  selectGroupFromClientId,\n  selectNeedsFromClientId,\n  selectShapetreesFromClientId,\n} from '../../state/selectors/access-needs.selectors';\n\n@Component({\n  selector: 'sai-authorization-page',\n  templateUrl: './authorization.page.html',\n  styleUrls: ['./authorization.page.css'],\n})\nexport class AuthorizationPage implements OnInit {\n  clientId!: IRI;\n\n  application$!: Observable<Application>;\n  group$!: Observable<AccessNeedGroup>;\n  needs$!: Observable<AccessNeed[]>;\n  shapetrees$!: Observable<ShapeTree[]>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private store: Store\n  ) {}\n\n  ngOnInit(): void {\n    this.requestAuthorizationData();\n\n    this.application$ = this.store\n      .select(applicationProfile(this.clientId))\n      .pipe(filter(Boolean));\n    this.group$ = this.store\n      .select(selectGroupFromClientId(this.clientId))\n      .pipe(filter(Boolean));\n    this.needs$ = this.store\n      .select(selectNeedsFromClientId(this.clientId))\n      .pipe(filter(Boolean));\n    this.shapetrees$ = this.store\n      .select(selectShapetreesFromClientId(this.clientId))\n      .pipe(filter(Boolean));\n  }\n\n  /**\n   * Uses the client_id query parameter to init an authorization flow\n   */\n  private requestAuthorizationData(): void {\n    const applicationId = this.route.snapshot.queryParamMap.get('client_id');\n\n    if (!applicationId) {\n      this.router\n        .navigateByUrl('dashboard')\n        .catch(() => console.error('client id not provided'));\n      return;\n    }\n\n    this.clientId = applicationId;\n    this.store.dispatch(authorizationPageLoaded({ applicationId }));\n  }\n\n  getScope(accessNeed: AccessNeed): string {\n    if (accessNeed.parent) return 'Inherited';\n    // TODO based on user input\n    return 'All';\n  }\n\n  // TODO all the 'authorization creation' process should exist in a sai-library which a service uses\n  //      the component just triggers the relevant effects to signal the authorization action\n  // TODO use case when there is a `parent` access need\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async createDataAuthorizations(\n    accessNeed: AccessNeed,\n    parent?: AccessNeed\n  ): Promise<DataAuthorization[]> {\n    const dataAuthorization = {\n      accessNeed: accessNeed.id,\n      scope: this.getScope(accessNeed),\n    } as DataAuthorization;\n    let childrenAuthorizations: DataAuthorization[] = [];\n    if (accessNeed.children) {\n      childrenAuthorizations = await firstValueFrom(\n        this.store.select(selectAccessNeeds(accessNeed.children))\n      )\n        .then((needs) => needs.filter(Boolean) as AccessNeed[])\n        .then((needs) =>\n          needs.flatMap((need) =>\n            this.createDataAuthorizations(need, accessNeed)\n          )\n        )\n        .then((promises) => Promise.all(promises))\n        .then((authorizations) => authorizations.flat());\n    }\n\n    return [dataAuthorization, ...childrenAuthorizations];\n  }\n\n  async authorize(granted = true) {\n    let authorization: Authorization;\n\n    const base = {\n      grantee: this.clientId,\n      accessNeedGroup: (await firstValueFrom(this.group$)).id,\n    };\n\n    if (granted) {\n      authorization = {\n        ...base,\n        dataAuthorizations: await firstValueFrom(this.needs$)\n          .then((needs) =>\n            needs.flatMap((need) => this.createDataAuthorizations(need))\n          )\n          .then((promises) => Promise.all(promises))\n          .then((authorizations) => authorizations.flat()),\n        granted: true,\n      };\n    } else {\n      authorization = {\n        ...base,\n        granted: false,\n      };\n    }\n    this.store.dispatch(authorizationRequested({ authorization }));\n    console.log('this');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./authorization.page.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div *ngIf=\"(application$ | async) && (group$ | async) && (needs$ | async) && (shapetrees$ | async)\"\n     class=\"flex flex-col p-10\">\n  <sai-app-view [expanded]=\"true\"\n                [application]=\"(application$ | async)!\"\n                [group]=\"group$ | async\"\n                [needs]=\"needs$ | async\"\n                [shapetrees]=\"shapetrees$ | async\"\n  ></sai-app-view>\n\n  <div class=\"flex space-x-12 my-8 mx-auto\">\n    <button class=\"w-44 px-12 py-4 bg-blue-800 text-2xl text-blue-50\" (click)=\"authorize(true)\">{{'APP.CTA-SAVE' | translate}}</button>\n    <button class=\"w-44 px-12 py-4 bg-red-800 text-2xl text-red-50\" (click)=\"authorize(false)\">{{'APP.CTA-DISCARD' | translate}}</button>\n  </div>\n</div>\n"
        },
        {
            "name": "ConnectServerPage",
            "id": "component-ConnectServerPage-fa67cf48547373141e2f7ba687d4153746cc0cc4a28fafb038e21260a7341adc149399d14f26cca74280246786c71440ca75e2bf8e4201cc975471bf4341c76c",
            "file": "src/app/pages/connect-server/connect-server.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-connect-server",
            "styleUrls": [
                "./connect-server.page.css"
            ],
            "styles": [],
            "templateUrl": [
                "./connect-server.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "loginServer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {Store} from '@ngrx/store'\nimport * as CoreActions from 'src/app/state/actions/core.actions';\n\n@Component({\n  selector: 'sai-connect-server',\n  templateUrl: './connect-server.page.html',\n  styleUrls: ['./connect-server.page.css']\n})\nexport class ConnectServerPage {\n\n  constructor(\n    private store: Store,\n  ) {}\n\n  loginServer() {\n    this.store.dispatch(CoreActions.serverLoginRequested())\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./connect-server.page.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "\n<div class=\"flex flex-col bg-slate-200 m-12 p-12 border border-slate-700 text-slate-700 items-center\">\n  <h1 class=\"text-slate-800 text-4xl mb-24\">{{'APP.AUTH-SERVER' | translate}}</h1>\n  <p>{{'APP.SERVER-MSG' | translate}}</p>\n  <p>{{'APP.SERVER-AUTH-MSG' | translate}}</p>\n  <button class=\"mt-12 bg-slate-700 text-slate-50 px-8 py-6 text-lg\" (click)=\"loginServer()\">{{'APP.CTA-SERVER-CONNECT' | translate}}</button>\n</div>\n\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-ac96af30ba6359f543b7d49e5f60316f1de3635c54104f635cc456cc2119b01754e8530c5d0e5fb25bcc3c3357b524ebc3ac1680b8b0ab794510951a319e02ad",
            "file": "src/app/pages/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-dashboard",
            "styleUrls": [
                "./dashboard.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faMagnifyingGlass",
                    "defaultValue": "faMagnifyingGlass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "faPerson",
                    "defaultValue": "faPerson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport { faMagnifyingGlass, faPerson } from \"@fortawesome/free-solid-svg-icons\";\n\n@Component({\n  selector: 'sai-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent {\n  faMagnifyingGlass = faMagnifyingGlass;\n  faPerson = faPerson;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"container\">\n  <div class=\"section\">\n    <button routerLink=\"/authorize\" [queryParams]=\"{client_id: 'http://localhost:3000/acme/projectron/id'}\">\n      <fa-icon [icon]=\"faMagnifyingGlass\"></fa-icon>\n      <br>Add Projectron\n    </button>\n  </div>\n  <div class=\"section\">\n    <button routerLink=\"/add-social-agent\">\n      <fa-icon [icon]=\"faPerson\"></fa-icon>\n      <br>{{'APP.CTA-ADD-SOCIAL-AGENT' | translate}}\n    </button>\n  </div>\n</div>\n\n"
        },
        {
            "name": "DataComponent",
            "id": "component-DataComponent-63df3cfbd0cbf3d535f9f029c832928399a20d8cd8bcc65730a290b665d382f1d5301d05336c05e0bb0a2552b1c35eadaf7cef261036e72cb8938b28182535c4",
            "file": "src/app/pages/data/data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-data",
            "styleUrls": [
                "./data.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./data.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registries$",
                    "defaultValue": "this.store.select(selectDataRegistries)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DataRegistry[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Store} from \"@ngrx/store\";\nimport * as DataActions from 'src/app/state/actions/application.actions';\nimport {selectDataRegistries} from 'src/app/state/selectors/data.selectors';\nimport {Observable} from \"rxjs\";\nimport {DataRegistry} from \"@janeirodigital/sai-api-messages\";\n\n@Component({\n  selector: 'sai-data',\n  templateUrl: './data.component.html',\n  styleUrls: ['./data.component.css']\n})\nexport class DataComponent implements OnInit {\n\n  registries$: Observable<DataRegistry[]> = this.store.select(selectDataRegistries);\n\n  constructor(\n    private store: Store,\n  ) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(DataActions.dataRegistriesNeeded())\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./data.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"flex flex-col bg-white p-4 m-12 gap-y-3\">\n  <div *ngFor=\"let registry of registries$ | async\"\n       class=\"text-slate-800 text-xl bg-slate-100 p-3\">\n    <h4 class=\"font-bold\">Registry: <a class=\"font-normal\" href=\"{{registry.id}}\">{{registry.id}}</a></h4>\n\n    <table class=\"mt-4 text-center w-5/6\">\n      <thead class=\"bg-slate-500 py-3\">\n      <tr class=\"py-3\">\n        <th class=\"py-3 pl-1\">Type</th>\n        <th>Count</th>\n        <th>Shapetree</th>\n        <th>id</th>\n      </tr>\n      </thead>\n      <tbody class=\"\">\n      <tr *ngFor=\"let registration of registry.registrations\"\n          class=\"h-12\">\n        <td class=\"text-sm\">{{registration.label}}</td>\n        <td class=\"text-sm\">{{registration.count}}</td>\n        <td class=\"text-sm\">{{registration.shapeTree}}</td>\n        <td class=\"text-sm\">{{registration.id}}</td>\n      </tr>\n      </tbody>\n    </table>\n\n  </div>\n</div>\n"
        },
        {
            "name": "LanguageComponent",
            "id": "component-LanguageComponent-8c375b0cf846a4366b42893dcdd1674894c193e807df03ed1a99f491c1097f8b2ae6616ce4fa95edb880fc51437c00df249e8854d8b4ab4d28bfa340ff7ae5e2",
            "file": "src/app/components/language/language.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-language",
            "styleUrls": [
                "./language.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./language.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "languages",
                    "defaultValue": "Languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faLanguage",
                    "defaultValue": "faLanguage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "translate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "selectEvent",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectEvent",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {Languages} from \"../../languages\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {CORE_LANGUAGE_KEY, initialState, preferLanguage} from \"../../state/reducers/core.reducer\";\nimport {faLanguage} from \"@fortawesome/free-solid-svg-icons\";\n\n@Component({\n  selector: 'sai-language',\n  templateUrl: './language.component.html',\n  styleUrls: ['./language.component.css']\n})\nexport class LanguageComponent {\n  faLanguage = faLanguage;\n\n  @Input() languages = Languages;\n\n  constructor(public translate: TranslateService) {\n    const browserLang: string = initialState.language;\n    translate.use(browserLang.match(/en|es/) ? browserLang : 'en');\n  }\n\n  onChange(selectEvent: Event) {\n    const { target } = selectEvent;\n    if (!target) return;\n\n    const languageSelectedValue: string = (<HTMLSelectElement>target).value;\n    this.translate.use(languageSelectedValue);\n    //Set localStorage with user prefer language\n    preferLanguage.language = languageSelectedValue;\n    window.localStorage.setItem(CORE_LANGUAGE_KEY, JSON.stringify(preferLanguage));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./language.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container>\n  <div class=\"languageSelector\">\n    <fa-icon [icon]=\"faLanguage\"></fa-icon>\n    <select (change)=\"onChange($event)\">\n      <option *ngFor=\"let language of languages\" [value]=\"language.id\" [selected]=\"language.id === translate.currentLang\">{{ language.label }}</option>\n    </select>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-899426f9e579c531587a259a781bc501c4d4012e0ce183d7d880b94456a0addfdc7768478ce0f611691cd2741d002771036db7ac8c2caf72dbb21f62a0df21a4",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "idps",
                    "defaultValue": "[\n    { name: 'localhost', url: 'http://localhost:3000' },\n    { name: 'XFORM.id', url: 'http://localhost:3000' },\n    { name: 'pod.gov.tld', url: 'http://localhost:3000' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "{}",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "login",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    issuer: new FormControl<string>(''),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'sai-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent {\n  @Input() idps = [\n    { name: 'localhost', url: 'http://localhost:3000' },\n    { name: 'XFORM.id', url: 'http://localhost:3000' },\n    { name: 'pod.gov.tld', url: 'http://localhost:3000' },\n  ];\n\n  @Output() login = new EventEmitter<string>();\n\n  form = new FormGroup({\n    issuer: new FormControl<string>(''),\n  });\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "\n<div class=\"flex flex-col items-center bg-slate-200 p-12 m-12 text-slate-700\">\n  <h2 class=\"text-5xl mb-8\">{{'APP.LOGIN-TITLE' | translate}}</h2>\n\n  <div class=\"flex flex-col space-y-4 mb-12\">\n    <button *ngFor=\"let idp of idps\"\n            class=\"bg-slate-700 text-slate-50 py-4 w-64 text-lg border border-slate-900 rounded\"\n            (click)=\"login.emit(idp.url)\"\n    >\n      Sign in using {{idp.name}}</button>\n  </div>\n\n  <p class=\"mb-6\">Or log in with your own Identity Provider</p>\n\n  <form [formGroup]=\"form\" class=\"flex flex-col space-y-2\">\n    <input type=\"url\" formControlName=\"issuer\" required placeholder=\"https://your.idp\"\n           class=\"w-64 border-2 border-slate-200 rounded h-12 p-2\">\n    <button class=\"bg-slate-700 rounded h-12 text-blue-50 text-xl\">Log In</button>\n  </form>\n</div>\n"
        },
        {
            "name": "LoginPage",
            "id": "component-LoginPage-ff7b249b5d85ce8480be7d7b65cd93169c0975cf2fafaa431882d53b05890917e65e0672bd447eff21101e93d811e7cbf66fb493b880fc285ce88142eb80b440",
            "file": "src/app/pages/login/login.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-login-page",
            "styleUrls": [
                "./login.page.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleLogin",
                    "args": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Store} from \"@ngrx/store\";\nimport {loginRequested} from \"../../state/actions/core.actions\";\n\n@Component({\n  selector: 'sai-login-page',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.css'],\n})\n\nexport class LoginPage {\n\n  constructor(\n    private store: Store,\n  ) {}\n\n  handleLogin(oidcIssuer: string) {\n    this.store.dispatch(loginRequested({oidcIssuer}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login.page.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "\n<sai-login\n  (login)=\"handleLogin($event)\"\n></sai-login>\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-763d61bb09921d59355aa6ee65df6785afeb4188c3941f714a3560a599c88560f98ea4a526ecfc5a23c998a4c4722184bd38144f5bc7a35c9496a147aedb575c",
            "file": "src/app/components/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-navbar",
            "styleUrls": [
                "./navbar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "languageSelect",
                    "defaultValue": "Languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "webId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "withNotificationsAction",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "notifications",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "routes",
                    "defaultValue": "[\n    { path: '/dashboard', label: 'APP.HOME' },\n    { path: '/applications', label: 'APP.NAV-APPS' },\n    { path: '/social-agents', label: 'APP.NAV-PEERS' },\n    { path: '/data', label: 'APP.NAV-DATA' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Languages } from '../../languages';\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'sai-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css'],\n})\nexport class NavbarComponent {\n  faBell = faBell;\n\n  @Input() webId!: string | null;\n  @Input() isLoggedIn = false;\n  @Input() withNotificationsAction = true;\n  @Input() languageSelect = Languages;\n\n  @Output() notifications = new EventEmitter();\n\n  public routes = [\n    { path: '/dashboard', label: 'APP.HOME' },\n    { path: '/applications', label: 'APP.NAV-APPS' },\n    { path: '/social-agents', label: 'APP.NAV-PEERS' },\n    { path: '/data', label: 'APP.NAV-DATA' },\n  ];\n\n  constructor(public router: Router) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./navbar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"w-full h-16 bg-slate-700\n            text-xl text-slate-100\">\n  <div *ngIf=\"isLoggedIn else loggedOut\"\n       class=\"flex h-full px-5 items-center no-wrap space-x-6\">\n    <button *ngFor=\"let route of routes\" [routerLink]=\"route.path\"\n            class=\"border-b-slate-100\"\n            routerLinkActive=\"border-b-4\">\n      {{route.label | translate}}\n    </button>\n    <div class=\"grow\"></div>\n    <button *ngIf=\"withNotificationsAction\" (click)=\"notifications.emit()\"\n            class=\"bg-slate-100 text-slate-700 p-2\">\n      <fa-icon [icon]=\"faBell\"></fa-icon>\n      {{'APP.NAV-CTA' | translate}}\n    </button>\n  </div>\n</div>\n\n<ng-template #loggedOut>\n</ng-template>\n"
        },
        {
            "name": "RedirectHandlerComponent",
            "id": "component-RedirectHandlerComponent-0c4fc732ea90776a0a357034ac8df6ecf1f44a40d9becd596f95ed68c42f3ad49b3dde12f5623b6fac2dee631c40fc899ea5e03f5dfea17881ba070e425d4dcd",
            "file": "src/app/pages/redirect-handler/redirect-handler.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-redirect-handler",
            "styleUrls": [
                "./redirect-handler.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./redirect-handler.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {Store} from \"@ngrx/store\";\nimport * as CoreActions from \"../../state/actions/core.actions\";\n\n@Component({\n  selector: 'sai-redirect-handler',\n  templateUrl: './redirect-handler.component.html',\n  styleUrls: ['./redirect-handler.component.css']\n})\nexport class RedirectHandlerComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n    private store: Store,\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    this.store.dispatch(CoreActions.incomingLoginRedirect({url: window.location.href}));\n    this.router.navigateByUrl('/start')\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./redirect-handler.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<!-- TODO show a spinner or something with a ...loading... effect -->\n"
        },
        {
            "name": "SocialAgentsComponent",
            "id": "component-SocialAgentsComponent-6688184b7a6dbafe05b3a0d6f6f61e1f37be3761b1fcfede2431c0b165e83c8055cf5132ad2cc54db4c5f29a7577f29925488486349662b8b56593dc72a25f16",
            "file": "src/app/pages/social-agents/social-agents.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-social-agents",
            "styleUrls": [
                "./social-agents.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./social-agents.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "socialAgents$",
                    "defaultValue": "this.store.select(selectSocialAgents)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SocialAgent[]>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from \"@ngrx/store\";\nimport { selectSocialAgents } from 'src/app/state/selectors/social-agent.selectors';\nimport  * as DataActions from 'src/app/state/actions/application.actions';\nimport {Observable} from \"rxjs\";\nimport {SocialAgent} from \"@janeirodigital/sai-api-messages\";\nimport {faPlus} from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'sai-social-agents',\n  templateUrl: './social-agents.component.html',\n  styleUrls: ['./social-agents.component.css']\n})\nexport class SocialAgentsComponent implements OnInit {\n  faPlus = faPlus;\n  socialAgents$: Observable<SocialAgent[]> = this.store.select(selectSocialAgents);\n\n  constructor(\n    private store: Store,\n  ) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(DataActions.socialAgentsPanelLoaded())\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./social-agents.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"flex bg-white m-12 justify-between text-slate-800 flex-wrap content-around gap-y-3 gap-x-3\">\n  <a routerLink=\"/add-social-agent\" class=\"flex text-xl font-bold bg-slate-200 align-middle border border-slate-700 p-8 hover:cursor-pointer\">\n    <fa-icon [icon]=\"faPlus\" class=\"\"></fa-icon>\n    <p>Add</p>\n  </a>\n  <a *ngFor=\"let agent of socialAgents$ | async\"\n       href=\"{{agent.id}}\" target=\"_blank\"\n        class=\"bg-slate-100 border border-slate-700 p-8 grow hover:cursor-pointer\">\n    <h5 class=\"text-xl font-bold\">{{agent.label}}</h5>\n    <p class=\"text-xs text-slate-400\">{{agent.authorizationDate | date}}</p>\n    <p class=\"max-w-lg\">{{agent.note}}</p>\n  </a>\n</div>\n"
        },
        {
            "name": "StartComponent",
            "id": "component-StartComponent-38df34746d0a4706746fd190d3aed6dc7b41ef4581ffd46e19dfdc6dedf857634de07c4ab8e61fbea3db39a8c3fbc98865403bf9f76a8f98d9d24c4d89b17820",
            "file": "src/app/pages/start/start.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-start",
            "styleUrls": [
                "./start.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./start.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'sai-start',\n  templateUrl: './start.component.html',\n  styleUrls: ['./start.component.css']\n})\nexport class StartComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./start.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<!-- TODO add spinner -->\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-22b4e68b62e68946a4a0217662e77bd35c3ac2c0a8c52f0d4622514eef9ae6d9b5eacabf027702bf1ab3b101f024fd6ed1403a4346fa7f9fdaa67063f684e0de",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DashboardComponent } from './pages/dashboard/dashboard.component';\nimport { StoreModule } from '@ngrx/store';\nimport { metaReducers, reducers } from './state/reducers';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { ENV } from '../environments/environment';\nimport { EffectsModule } from '@ngrx/effects';\nimport { AuthInterceptor } from './interceptors/auth.interceptor';\nimport { Effects } from './state/effects';\nimport { RedirectHandlerComponent } from './pages/redirect-handler/redirect-handler.component';\nimport { SolidClient } from './utils/solid-client';\nimport { AuthorizationPage } from './pages/authorization/authorization.page';\nimport { StartComponent } from './pages/start/start.component';\nimport { ConnectServerPage } from './pages/connect-server/connect-server.page';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { AddSocialAgentComponent } from './pages/add-social-agent/add-social-agent.component';\nimport { SocialAgentsComponent } from './pages/social-agents/social-agents.component';\nimport { ApplicationsComponent } from './pages/applications/applications.component';\nimport { DataComponent } from './pages/data/data.component';\nimport { LanguageComponent } from './components/language/language.component';\nimport { AppViewComponent } from './components/app-view/app-view.component';\nimport { AddSocialAgentFormComponent } from './components/add-social-agent-form/add-social-agent-form.component';\nimport { I18nModule } from './i18n.module';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { LoginPage } from './pages/login/login.page';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    DashboardComponent,\n    RedirectHandlerComponent,\n    AuthorizationPage,\n    StartComponent,\n    ConnectServerPage,\n    AddSocialAgentComponent,\n    SocialAgentsComponent,\n    ApplicationsComponent,\n    DataComponent,\n    LanguageComponent,\n    AppViewComponent,\n    AddSocialAgentFormComponent,\n    LoginPage,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    FormsModule,\n\n    StoreModule.forRoot(reducers, {\n      metaReducers,\n    }),\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: ENV.production }),\n    EffectsModule.forRoot(Effects),\n\n    ServiceWorkerModule.register('ngsw-worker.js', {\n      enabled: ENV.production,\n      // Register the ServiceWorker as soon as the application is stable\n      // or after 30 seconds (whichever comes first).\n      registrationStrategy: 'registerWhenStable:30000',\n    }),\n    I18nModule,\n    FontAwesomeModule,\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    SolidClient,\n  ],\n  bootstrap: [AppComponent],\n  exports: [BrowserModule],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "SolidClient"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddSocialAgentComponent"
                        },
                        {
                            "name": "AddSocialAgentFormComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "AppViewComponent"
                        },
                        {
                            "name": "ApplicationsComponent"
                        },
                        {
                            "name": "AuthorizationPage"
                        },
                        {
                            "name": "ConnectServerPage"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "DataComponent"
                        },
                        {
                            "name": "LanguageComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LoginPage"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "RedirectHandlerComponent"
                        },
                        {
                            "name": "SocialAgentsComponent"
                        },
                        {
                            "name": "StartComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "I18nModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-b17186449074efee9fe277cc24d127c0d05d3b55e35d5ffd728b00ac3551bd1e5d5e3fa76de40e9fbc357bd6a5a4196fb56fd738a7c818ed3e9bdcd081a138ed",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StartComponent } from './pages/start/start.component';\nimport { ConnectServerPage } from './pages/connect-server/connect-server.page';\nimport { DashboardComponent } from './pages/dashboard/dashboard.component';\nimport { StartGuard } from './guards/start.guard';\nimport { AuthGuard } from './guards/auth.guard.service';\nimport { RedirectHandlerComponent } from './pages/redirect-handler/redirect-handler.component';\nimport { AuthorizationPage } from './pages/authorization/authorization.page';\nimport { AddSocialAgentComponent } from './pages/add-social-agent/add-social-agent.component';\nimport { SocialAgentsComponent } from './pages/social-agents/social-agents.component';\nimport { ApplicationsComponent } from './pages/applications/applications.component';\nimport { DataComponent } from './pages/data/data.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { LoginPage } from './pages/login/login.page';\nimport { ApplicationComponent } from './pages/application/application.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    canActivateChild: [StartGuard],\n    children: [\n      {\n        path: 'start',\n        component: StartComponent,\n      },\n      {\n        path: 'login',\n        component: LoginPage,\n      },\n      {\n        path: 'redirect',\n        component: RedirectHandlerComponent,\n      },\n      {\n        path: 'connect',\n        component: ConnectServerPage,\n      },\n    ],\n  },\n  {\n    path: '',\n    canActivateChild: [AuthGuard],\n    children: [\n      {\n        path: 'dashboard',\n        component: DashboardComponent,\n      },\n      {\n        path: 'authorize',\n        component: AuthorizationPage,\n      },\n      {\n        path: 'applications',\n        component: ApplicationsComponent,\n        children: [\n          {\n            path: 'application',\n            component: ApplicationComponent,\n          },\n        ],\n      },\n      {\n        path: 'application',\n        component: ApplicationComponent,\n      },\n      {\n        path: 'social-agents',\n        component: SocialAgentsComponent,\n      },\n      {\n        path: 'add-social-agent',\n        component: AddSocialAgentComponent,\n      },\n      {\n        path: 'data',\n        component: DataComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes), TranslateModule],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "I18nModule",
            "id": "module-I18nModule-6878d217dc64867cf21db2dab8b731d3934d92e2faac323c62743a87cad1118de25a2825e8c988a9b8014392a5ffb897ef9eca423c277392d8f6ab2048f5cba0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/i18n.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {TranslateLoader, TranslateModule, TranslateService} from \"@ngx-translate/core\";\nimport {HttpClient, HttpClientModule} from \"@angular/common/http\";\nimport {TranslateHttpLoader} from \"@ngx-translate/http-loader\";\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    TranslateModule.forRoot({\n      defaultLanguage: 'en',\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    }),\n  ],\n  exports: [TranslateModule],\n})\nexport class I18nModule {\n  constructor(\n    service: TranslateService,\n  ) {\n    service.setDefaultLang(\"en\");\n    service.use(\"en\");\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SbModule",
            "id": "module-SbModule-cd8e78eac96b4b4f09a5a9cc3ad89bd04a28c55da7488325f2aeb47cb215226bab8ea60d624f597f6f68e2078e8f907ded78d46473365bad1e35b88e31dd4d18",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/sb-module.ts",
            "methods": [],
            "sourceCode": "import {DragDropModule} from '@angular/cdk/drag-drop';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {NgModule} from '@angular/core';\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {ReactiveFormsModule, FormsModule} from \"@angular/forms\";\nimport {I18nModule} from \"./app/i18n.module\";\nimport {FontAwesomeModule} from \"@fortawesome/angular-fontawesome\";\n\n@NgModule({\n  exports: [\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    ScrollingModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    FontAwesomeModule,\n  ]\n})\nexport class SbModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "I18nModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACCESS_NEEDS_GROUPS_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'access-needs-groups'",
                "rawdescription": "Group of all the groups",
                "description": "<p>Group of all the groups</p>\n"
            },
            {
                "name": "ACCESS_NEEDS_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'access-needs'"
            },
            {
                "name": "accessNeedsGroupReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  accessNeedsGroupsInitialState,\n  on(Actions.addAccessNeedGroup, (state, {group}) => groupsAdapter.addOne(group, state)),\n)"
            },
            {
                "name": "accessNeedsGroupsInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AccessNeedGroupState",
                "defaultValue": "groupsAdapter.getInitialState()"
            },
            {
                "name": "accessNeedsInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AccessNeedsState",
                "defaultValue": "needsAdapter.getInitialState()"
            },
            {
                "name": "accessNeedsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  accessNeedsInitialState,\n  on(Actions.addAccessNeed, (state, {need}) => needsAdapter.addOne(need, state)),\n)"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<Application>()"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/social-agent.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<SocialAgent>()"
            },
            {
                "name": "addAccessNeed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/access-needs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/Response] Add Access Need', props<{need: AccessNeed}>())"
            },
            {
                "name": "addAccessNeedGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/access-needs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/Response] Add Access Need Group', props<{group: AccessNeedGroup}>())"
            },
            {
                "name": "addShapeTree",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/access-needs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/Response] Add ShapeTree', props<{tree: ShapeTree}>())"
            },
            {
                "name": "addSocialAgent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Add Social Agent',\n  props<{webId: IRI, label: string, note?: string}>()\n)"
            },
            {
                "name": "APPLICATION_PROFILE_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'applications'"
            },
            {
                "name": "applicationAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter"
            },
            {
                "name": "applicationProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/application.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\n  createSelector(\n    selectApplicationsFeature,\n    state => state.entities[id],\n  )"
            },
            {
                "name": "applicationProfileReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Adding Single Application Profile',\n  props<{profile: Application}>(),\n)"
            },
            {
                "name": "applicationProfileReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(Actions.applicationProfileReceived, (state, {profile}) => adapter.addOne(profile, state)),\n  on(Actions.applicationProfilesReceived, (state, {profiles}) => adapter.addMany(profiles, state)),\n  on(Actions.unregisteredApplicationProfileReceived, (state, {profile}) => adapter.addOne(profile as Application, state)),\n)"
            },
            {
                "name": "applicationProfilesReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Received',\n  props<{profiles: Application[]}>(),\n)"
            },
            {
                "name": "applicationsPanelLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Requested'\n)"
            },
            {
                "name": "authorizationPageLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/authorization.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Authorization] Authorization Page Loaded',\n  props<{applicationId: string}>(),\n)"
            },
            {
                "name": "authorizationReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Authorization Received',\n  props<{ accessAuthorization: AccessAuthorization }>()\n)"
            },
            {
                "name": "authorizationRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/authorization.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Authorization] Authorization `Submit` clicked on',\n  props<{authorization: Authorization}>(),\n)"
            },
            {
                "name": "authorizeApplication",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Authorize Application',\n  props<{ authorization: Authorization }>()\n)"
            },
            {
                "name": "childrenOf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: AccessNeedsState, ids: string[]): AccessNeed[] => {\n  const needs = ids.map(id => state.entities[id] as AccessNeed);\n  const children = needs.reduce((acc, current) => ([...acc, ...current.children]), [] as string[]);\n\n  if (children.length > 0) {\n    return [...needs, ...childrenOf(state, children)];\n  }\n\n  return needs;\n}",
                "rawdescription": "Recursively traverses the needs and their children through their ids to find all the access needs related to\na group regardless of how deep it is.\nTODO check for infinite loops, if a access need is already present then don add it again",
                "description": "<p>Recursively traverses the needs and their children through their ids to find all the access needs related to\na group regardless of how deep it is.\nTODO check for infinite loops, if a access need is already present then don add it again</p>\n"
            },
            {
                "name": "CORE_LANGUAGE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'coreLanguage'"
            },
            {
                "name": "CORE_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'core'"
            },
            {
                "name": "coreReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(CoreActions.loginInitiated, (state, {oidcIssuer}): CoreState => ({...state, oidcIssuer})),\n  on(CoreActions.webIdReceived, (state, {webId}): CoreState => ({...state, webId})),\n  on(CoreActions.loginStatusChanged, (state, {loggedIn}): CoreState => ({...state, isLoggedIn: loggedIn, loginKnown: true})),\n  on(CoreActions.serverSessionReceived, (state, {isServerLoggedIn, redirectUrl}): CoreState => ({...state, isServerLoggedIn, redirectUrl: redirectUrl ? redirectUrl : ''})),\n  on(CoreActions.pathRequested, (state, {requestedPath}): CoreState => ({\n    ...state,\n    requestedPath: excludedPaths.includes(requestedPath) ? '/dashboard' : requestedPath\n  }))\n)"
            },
            {
                "name": "currentApplicationDescriptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/description.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectDescriptionsFeature,\n  selectCurrentApplication,\n  (state, selected) => selected ? state.byId[selected]: null,\n)"
            },
            {
                "name": "DATA_REGISTRY_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/data-registry.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'data'"
            },
            {
                "name": "dataRegistriesNeeded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[DATA REGISTRIES] Data Registries Requested'\n)"
            },
            {
                "name": "dataRegistriesProvided",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[DATA REGISTRIES] Data Registries Received',\n  props<{registries: DataRegistry[]}>(),\n)"
            },
            {
                "name": "dataRegistriesReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/data-registry.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.dataRegistriesProvided, (state, {registries}) => insertEntities(state, registries)),\n)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/add-social-agent-form/add-social-agent-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/login/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/app-view/app-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "descriptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/description.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(props: {id: string}) =>\n  createSelector(\n    selectDescriptionsFeature,\n    state => state.byId[props.id],\n  )"
            },
            {
                "name": "DESCRIPTIONS_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/descriptions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'descriptions'"
            },
            {
                "name": "descriptionsNeeded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/description.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions needed for application',\n  props<{applicationId: string}>(),\n)"
            },
            {
                "name": "descriptionsReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/description.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions received for application',\n  props<{authorizationData: AuthorizationData}>(),\n)"
            },
            {
                "name": "descriptionsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/descriptions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(DescActions.descriptionsNeeded, (state, {applicationId}): DescriptionsState => ({...state, selectedApplication: applicationId })),\n  on(DescActions.descriptionsReceived, (state, {authorizationData}) => ({ selectedApplication: state.selectedApplication, ...insertEntity(state, authorizationData)})),\n)"
            },
            {
                "name": "Effects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/effects/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ApplicationProfileEffects,\n  CoreEffects,\n  AuthorizationEffects,\n]"
            },
            {
                "name": "ENV",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  OIDC_CLIENT_ID: window['env']['OIDC_CLIENT_ID'],\n  BASE_URL: window['env']['BASE_URL'],\n  SRV_BASE: window['env']['SRV_BASE'],\n  DEFAULT_IDP: window['env']['DEFAULT_IDP'],\n  VAPID_PUBLIC_KEY: window['env']['VAPID_PUBLIC_KEY'],\n}"
            },
            {
                "name": "ENV",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  OIDC_CLIENT_ID: window['env'] && window['env']['OIDC_CLIENT_ID'] ? window['env']['OIDC_CLIENT_ID'] : 'http://localhost:4200/assets/id-local.jsonld',\n  BASE_URL: window['env'] && window['env']['BASE_URL'] ? window['env']['BASE_URL'] : 'http://localhost:4200',\n  SRV_BASE: window['env'] && window['env']['SRV_BASE'] ? window['env']['SRV_BASE'] : 'http://localhost:4000',\n  DEFAULT_IDP: window['env'] && window['env']['DEFAULT_IDP'] ? window['env']['DEFAULT_IDP'] : 'http://localhost:3000',\n  VAPID_PUBLIC_KEY: window['env'] && window['env']['VAPID_PUBLIC_KEY'] ? window['env']['VAPID_PUBLIC_KEY'] : \"BNUaG9vwp-WE_cX-3dNLebyczW_RivE8wHECIvZIUMUZ3co6P79neE3hueJJtFcg5ezTZ25T1ITciujz-mlAcnY\"\n}"
            },
            {
                "name": "excludedPaths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['/', '/start', '/redirect', '/login', '/connect']"
            },
            {
                "name": "flatAccessNeed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/effects/application.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(apiAccess: ApiAccessNeed): AccessNeed[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []}];\n\n  else {\n    // collect and recurse\n    const newAccess: AccessNeed = {...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []};\n    const convertedChildren = children.map(c => flatAccessNeed(c)).flat();\n\n    return [newAccess, ...convertedChildren];\n  }\n}"
            },
            {
                "name": "flatAccessNeedGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/effects/application.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(apiGroup: ApiGroup): AccessNeedGroup => {\n  return {...apiGroup, needs: apiGroup.needs.map(need => need.id)};\n}"
            },
            {
                "name": "flatShapeTrees",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/effects/application.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(apiAccess: ApiAccessNeed): ShapeTree[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label}]\n\n  else {\n    const thisShapeTree = {id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label};\n    const childrenShapeTrees = children.map(c => flatShapeTrees(c)).flat();\n\n    return [thisShapeTree, ...childrenShapeTrees];\n  }\n}"
            },
            {
                "name": "groupsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<AccessNeedGroup>()"
            },
            {
                "name": "incomingLoginRedirect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Incoming Login Redirect',\n  props<{url: string}>(),\n)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationsState",
                "defaultValue": "adapter.getInitialState({\n  selectedApplication: null,\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CoreState",
                "defaultValue": "{\n  oidcIssuer: '',\n  webId: '',\n  loginKnown: false,\n  isLoggedIn: false,\n  isServerLoggedIn: false,\n  redirectUrl: '',\n  requestedPath: '/dashboard',\n  language: preferLanguage.language === '' || preferLanguage.language === undefined ? navigator.language.split('-')[0] : preferLanguage.language,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/data-registry.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DataRegistryState",
                "defaultValue": "{\n  byId: {},\n  allIds: [],\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/descriptions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DescriptionsState",
                "defaultValue": "{\n  byId: {},\n  allIds: [],\n  selectedApplication: null\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/social-agent.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SocialAgentState",
                "defaultValue": "adapter.getInitialState()"
            },
            {
                "name": "insertEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entities: T[]) => {\n  for (const entity of entities) state = insertEntity(state, entity);\n  return state;\n}"
            },
            {
                "name": "insertEntity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entry: T): NormalizedState<T> => {\n  const byId = {...state.byId, [entry.id]: entry};\n  const allIds = [...state.allIds, entry.id];\n\n  return {byId, allIds}\n}"
            },
            {
                "name": "internalSelectors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/application.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "applicationAdapter.getSelectors()"
            },
            {
                "name": "Languages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/languages.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<Language>",
                "defaultValue": "[\n  {\n    label: 'English',\n    id: 'en'\n  },\n  {\n    label: 'Español',\n    id: 'es'\n  }\n]"
            },
            {
                "name": "LanguageSelectClose",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/language/language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoadingNeeds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/app-view/app-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn_NotificationsDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn_NotificationsEnabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loginInitiated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Login Initiated',\n   props<{oidcIssuer: string}>(),\n)",
                "rawdescription": "Marks that the navigations has been handled off to the user IDP",
                "description": "<p>Marks that the navigations has been handled off to the user IDP</p>\n"
            },
            {
                "name": "loginRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Login Requested',\n  props<{oidcIssuer: string}>(),\n)"
            },
            {
                "name": "loginStatusChanged",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Login Status Changed',\n  props<{loggedIn: boolean}>(),\n)"
            },
            {
                "name": "mapAuthorizationDataToNeedsActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/effects/application.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data: AuthorizationData) => {\n  const needs = data.accessNeedGroup.needs;\n\n  const shapeTrees = needs.map(need => flatShapeTrees(need)).flat();\n  const accessNeeds = needs.map(need => flatAccessNeed(need)).flat();\n\n  const shapeTreeActions = shapeTrees.map(tree => NeedActions.addShapeTree({tree}));\n  const needsActions = accessNeeds.map(need => NeedActions.addAccessNeed({need}));\n\n  const group = flatAccessNeedGroup(data.accessNeedGroup);\n  const groupAction = NeedActions.addAccessNeedGroup({group});\n  return [shapeTreeActions, needsActions, groupAction];\n}"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!ENV.production ? [localStorageSyncReducer] : [localStorageSyncReducer]"
            },
            {
                "name": "needsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<AccessNeed>()"
            },
            {
                "name": "oidcInfoReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] OIDC Info Received',\n  props<{oidcInfo: ISessionInfo}>(),\n)"
            },
            {
                "name": "pathRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Path requested',\n  props<{requestedPath: string}>()\n)"
            },
            {
                "name": "preferLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "JSON.parse(localStorage.getItem(CORE_LANGUAGE_KEY) || '{}')"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<RootState>",
                "defaultValue": "{\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [SOCIAL_AGENT_STATE_KEY]: socialAgentsReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n  [DATA_REGISTRY_STATE_KEY]: dataRegistriesReducer,\n  [ACCESS_NEEDS_STATE_KEY]: accessNeedsReducer,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: accessNeedsGroupReducer,\n  [SHAPE_TREE_STATE_KEY]: shapetreeReducer,\n}"
            },
            {
                "name": "removeEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, ids: string[]) => {\n  for (const id of ids) state = removeEntity(state, id);\n  return state;\n}"
            },
            {
                "name": "removeEntity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, id: string): NormalizedState<T> => {\n\n  if (!state.allIds.includes(id)) return state;\n\n  const byId = {...state.byId};\n  const allIds = [...state.allIds].filter(_id => _id != id);\n\n  delete byId[id];\n  return {byId, allIds}\n}"
            },
            {
                "name": "requestName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Request Name',\n)"
            },
            {
                "name": "selectAccessNeed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\n  createSelector(\n    selectAccessNeedsFeature,\n    state => state.entities[id],\n  )"
            },
            {
                "name": "selectAccessNeedGroupFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AccessNeedGroupState>(ACCESS_NEEDS_GROUPS_STATE_KEY)"
            },
            {
                "name": "selectAccessNeeds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ids: string[]) =>\n  createSelector(\n    selectAccessNeedsFeature,\n    state => ids.map(id => state.entities[id]).filter(Boolean),\n  )"
            },
            {
                "name": "selectAccessNeedsFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AccessNeedsState>(ACCESS_NEEDS_STATE_KEY)"
            },
            {
                "name": "selectApplications",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/application.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectApplicationsFeature,\n  internalSelectors.selectAll,\n)"
            },
            {
                "name": "selectApplicationsFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/application.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ApplicationsState>(APPLICATION_PROFILE_STATE_KEY)"
            },
            {
                "name": "selectBothEndsLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.isLoggedIn && core.isServerLoggedIn\n)"
            },
            {
                "name": "selectCore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<CoreState>(CORE_STATE_KEY)"
            },
            {
                "name": "selectCurrentApplication",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/description.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectDescriptionsFeature,\n  state => state.selectedApplication,\n)"
            },
            {
                "name": "selectCurrentGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAccessNeedGroupFeature,\n  selectSelectedApplication,\n  (state, app) => app ? state.entities[app.accessNeedGroup] as AccessNeedGroup : null\n)"
            },
            {
                "name": "selectCurrentNeeds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAccessNeedsFeature,\n  selectCurrentGroup,\n  (state, group) => group ? childrenOf(state, group.needs): null,\n)"
            },
            {
                "name": "selectCurrentShapeTrees",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectShapetreeFeature,\n  selectCurrentNeeds,\n  // TODO ! is it possible to ensure that shapetree is always defined/work around the undefined?\n  (state, needs) => needs ? needs.map(need => state.entities[need?.shapeTree]) as ShapeTree[] : null,\n)"
            },
            {
                "name": "selectDataRegistries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectDataRegistriesFeature,\n  state => ([...Object.values(state.byId)]),\n)"
            },
            {
                "name": "selectDataRegistriesFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<DataRegistryState>(DATA_REGISTRY_STATE_KEY)"
            },
            {
                "name": "selectDescriptionsFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/description.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<DescriptionsState>(DESCRIPTIONS_STATE_KEY)"
            },
            {
                "name": "selectGroupFromClientId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\n  createSelector(\n    selectApplicationsFeature,\n    selectAccessNeedGroupFeature,\n    (applicationsState: ApplicationsState, groupsState: AccessNeedGroupState) => {\n      const groupId = applicationsState.entities[id]?.accessNeedGroup;\n\n      return groupId ? groupsState.entities[groupId] : undefined;\n    },\n  )"
            },
            {
                "name": "selectIssuer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.oidcIssuer,\n)"
            },
            {
                "name": "selectLoggedInStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.isLoggedIn,\n)"
            },
            {
                "name": "selectLoginKnown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.loginKnown\n)"
            },
            {
                "name": "selectNeedsFromClientId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(clientId: string) =>\n  createSelector(\n    selectAccessNeedsFeature,\n    selectGroupFromClientId(clientId),\n    (state, group) => {\n      if (!group) return;\n      const needsIds = group.needs;\n\n      return needsIds.map(needId => state.entities[needId]).filter(Boolean) as AccessNeed[]\n    }\n  )"
            },
            {
                "name": "selectors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/social-agent.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "socialAgentAdapter.getSelectors()"
            },
            {
                "name": "selectPrefLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.language\n)"
            },
            {
                "name": "selectRedirectUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.redirectUrl,\n)"
            },
            {
                "name": "selectRequestedPath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.requestedPath,\n)"
            },
            {
                "name": "selectSelectedApplication",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/application.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectApplicationsFeature,\n  // getSelectedApplicationId,\n  selectCurrentApplication,\n  (state, id) => id ? state.entities[id] : null,\n)"
            },
            {
                "name": "selectServerLoggedInStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.isServerLoggedIn,\n)"
            },
            {
                "name": "selectShapetreeFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ShapetreesState>(SHAPE_TREE_STATE_KEY)"
            },
            {
                "name": "selectShapetreesFromClientId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\n  createSelector(\n    selectShapetreeFeature,\n    selectNeedsFromClientId(id),\n    (state, needs) => needs ? needs.map(need => state.entities[need.shapeTree]) as ShapeTree[] : null,\n  )"
            },
            {
                "name": "selectSocialAgents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/social-agent.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSocialAgentsFeature,\n  selectors.selectAll,\n)"
            },
            {
                "name": "selectSocialAgentsFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/social-agent.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<SocialAgentState>(SOCIAL_AGENT_STATE_KEY)"
            },
            {
                "name": "selectWebId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.webId,\n)"
            },
            {
                "name": "serverLoginInitiated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Server login Initiated'\n)",
                "rawdescription": "Marks that the navigations has been handled off to the user IDP",
                "description": "<p>Marks that the navigations has been handled off to the user IDP</p>\n"
            },
            {
                "name": "serverLoginRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Server Login Requested'\n)"
            },
            {
                "name": "serverSessionReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Server session status received',\n  props<{isServerLoggedIn: boolean, redirectUrl?: string}>(),\n)"
            },
            {
                "name": "serverSessionRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Server session status requested',\n  props<{oidcIssuer: string}>(),\n)"
            },
            {
                "name": "SHAPE_TREE_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'shapetrees'",
                "rawdescription": "Group of all the shapetrees that have been loaded into the application through the different access needs",
                "description": "<p>Group of all the shapetrees that have been loaded into the application through the different access needs</p>\n"
            },
            {
                "name": "shapetreeAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<ShapeTree>()"
            },
            {
                "name": "shapeTreeInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "shapetreeAdapter.getInitialState()"
            },
            {
                "name": "shapetreeReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  shapeTreeInitialState,\n  on(Actions.addShapeTree, (state, {tree}) => shapetreeAdapter.addOne(tree, state))\n)"
            },
            {
                "name": "SOCIAL_AGENT_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/social-agent.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'social-agents'"
            },
            {
                "name": "socialAgentAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/social-agent.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter"
            },
            {
                "name": "socialAgentProfileReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Single Social Agent Profile Received',\n  props<{profile: SocialAgent}>(),\n)"
            },
            {
                "name": "socialAgentProfilesReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Social Agent Profiles Received',\n  props<{profiles: SocialAgent[]}>(),\n)"
            },
            {
                "name": "socialAgentsPanelLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Social Agent Profiles Requested'\n)"
            },
            {
                "name": "socialAgentsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/social-agent.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.socialAgentProfileReceived, (state, {profile}) => adapter.addOne(profile, state)),\n  on(DataActions.socialAgentProfilesReceived, (state, {profiles}) => adapter.addMany(profiles, state)),\n)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/add-social-agent-form/add-social-agent-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/language/language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/login/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/app-view/app-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "unregisteredApplicationProfileError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION] Error retrieving Unregistered Application Profile'\n)"
            },
            {
                "name": "unregisteredApplicationProfileReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION] Unregistered Application Profile Received',\n  props<{profile: Partial<Application> }>(),\n)"
            },
            {
                "name": "unregisteredApplicationProfileRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION] Unregistered Application Profile Requested',\n  props<{applicationId: string }>(),\n)"
            },
            {
                "name": "webIdReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] WebId Received',\n  props<{webId: string}>(),\n)"
            },
            {
                "name": "WithWebId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/add-social-agent-form/add-social-agent-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/i18n.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "localStorageSyncReducer",
                "file": "src/app/state/reducers/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<RootState>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AccessNeedGroupState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "EntityState<AccessNeedGroup>",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "AccessNeedsState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "EntityState<AccessNeed>",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Contains all the received access needs. Children needs are flattened to the top\nand the &#39;parent&#39; and &#39;children&#39; (by ids) are used to reconstruct the hierarchy</p>\n",
                "kind": 177
            },
            {
                "name": "ACL",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"http://www.w3.org/ns/auth/acl#Read\" | \"http://www.w3.org/ns/auth/acl#Write\" | \"http://www.w3.org/ns/auth/acl#Control\" | \"http://www.w3.org/ns/auth/acl#Append\" | \"http://www.w3.org/ns/auth/acl#Update\"",
                "file": "src/app/state/models/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DataRegistryState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "NormalizedState<DataRegistry>",
                "file": "src/app/state/reducers/data-registry.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Language",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/languages.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ShapetreesState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "EntityState<ShapeTree>",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "SocialAgentState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "EntityState<SocialAgent>",
                "file": "src/app/state/reducers/social-agent.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/state/reducers/access-needs.reducer.ts": [
                {
                    "name": "ACCESS_NEEDS_GROUPS_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'access-needs-groups'",
                    "rawdescription": "Group of all the groups",
                    "description": "<p>Group of all the groups</p>\n"
                },
                {
                    "name": "ACCESS_NEEDS_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'access-needs'"
                },
                {
                    "name": "accessNeedsGroupReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  accessNeedsGroupsInitialState,\n  on(Actions.addAccessNeedGroup, (state, {group}) => groupsAdapter.addOne(group, state)),\n)"
                },
                {
                    "name": "accessNeedsGroupsInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccessNeedGroupState",
                    "defaultValue": "groupsAdapter.getInitialState()"
                },
                {
                    "name": "accessNeedsInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccessNeedsState",
                    "defaultValue": "needsAdapter.getInitialState()"
                },
                {
                    "name": "accessNeedsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  accessNeedsInitialState,\n  on(Actions.addAccessNeed, (state, {need}) => needsAdapter.addOne(need, state)),\n)"
                },
                {
                    "name": "groupsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<AccessNeedGroup>()"
                },
                {
                    "name": "needsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<AccessNeed>()"
                },
                {
                    "name": "SHAPE_TREE_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'shapetrees'",
                    "rawdescription": "Group of all the shapetrees that have been loaded into the application through the different access needs",
                    "description": "<p>Group of all the shapetrees that have been loaded into the application through the different access needs</p>\n"
                },
                {
                    "name": "shapetreeAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<ShapeTree>()"
                },
                {
                    "name": "shapeTreeInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "shapetreeAdapter.getInitialState()"
                },
                {
                    "name": "shapetreeReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  shapeTreeInitialState,\n  on(Actions.addShapeTree, (state, {tree}) => shapetreeAdapter.addOne(tree, state))\n)"
                }
            ],
            "src/app/state/reducers/application.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<Application>()"
                },
                {
                    "name": "APPLICATION_PROFILE_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'applications'"
                },
                {
                    "name": "applicationAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter"
                },
                {
                    "name": "applicationProfileReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(Actions.applicationProfileReceived, (state, {profile}) => adapter.addOne(profile, state)),\n  on(Actions.applicationProfilesReceived, (state, {profiles}) => adapter.addMany(profiles, state)),\n  on(Actions.unregisteredApplicationProfileReceived, (state, {profile}) => adapter.addOne(profile as Application, state)),\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationsState",
                    "defaultValue": "adapter.getInitialState({\n  selectedApplication: null,\n})"
                }
            ],
            "src/app/state/reducers/social-agent.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/social-agent.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<SocialAgent>()"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/social-agent.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocialAgentState",
                    "defaultValue": "adapter.getInitialState()"
                },
                {
                    "name": "SOCIAL_AGENT_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/social-agent.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'social-agents'"
                },
                {
                    "name": "socialAgentAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/social-agent.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter"
                },
                {
                    "name": "socialAgentsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/social-agent.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.socialAgentProfileReceived, (state, {profile}) => adapter.addOne(profile, state)),\n  on(DataActions.socialAgentProfilesReceived, (state, {profiles}) => adapter.addMany(profiles, state)),\n)"
                }
            ],
            "src/app/state/actions/access-needs.actions.ts": [
                {
                    "name": "addAccessNeed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/access-needs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/Response] Add Access Need', props<{need: AccessNeed}>())"
                },
                {
                    "name": "addAccessNeedGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/access-needs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/Response] Add Access Need Group', props<{group: AccessNeedGroup}>())"
                },
                {
                    "name": "addShapeTree",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/access-needs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/Response] Add ShapeTree', props<{tree: ShapeTree}>())"
                }
            ],
            "src/app/state/actions/application.actions.ts": [
                {
                    "name": "addSocialAgent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Add Social Agent',\n  props<{webId: IRI, label: string, note?: string}>()\n)"
                },
                {
                    "name": "applicationProfileReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Adding Single Application Profile',\n  props<{profile: Application}>(),\n)"
                },
                {
                    "name": "applicationProfilesReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Received',\n  props<{profiles: Application[]}>(),\n)"
                },
                {
                    "name": "applicationsPanelLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Requested'\n)"
                },
                {
                    "name": "authorizationReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Authorization Received',\n  props<{ accessAuthorization: AccessAuthorization }>()\n)"
                },
                {
                    "name": "authorizeApplication",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Authorize Application',\n  props<{ authorization: Authorization }>()\n)"
                },
                {
                    "name": "dataRegistriesNeeded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DATA REGISTRIES] Data Registries Requested'\n)"
                },
                {
                    "name": "dataRegistriesProvided",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DATA REGISTRIES] Data Registries Received',\n  props<{registries: DataRegistry[]}>(),\n)"
                },
                {
                    "name": "socialAgentProfileReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Single Social Agent Profile Received',\n  props<{profile: SocialAgent}>(),\n)"
                },
                {
                    "name": "socialAgentProfilesReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Social Agent Profiles Received',\n  props<{profiles: SocialAgent[]}>(),\n)"
                },
                {
                    "name": "socialAgentsPanelLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Social Agent Profiles Requested'\n)"
                },
                {
                    "name": "unregisteredApplicationProfileError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION] Error retrieving Unregistered Application Profile'\n)"
                },
                {
                    "name": "unregisteredApplicationProfileReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION] Unregistered Application Profile Received',\n  props<{profile: Partial<Application> }>(),\n)"
                },
                {
                    "name": "unregisteredApplicationProfileRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION] Unregistered Application Profile Requested',\n  props<{applicationId: string }>(),\n)"
                }
            ],
            "src/app/state/selectors/application.selectors.ts": [
                {
                    "name": "applicationProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/application.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\n  createSelector(\n    selectApplicationsFeature,\n    state => state.entities[id],\n  )"
                },
                {
                    "name": "internalSelectors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/application.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "applicationAdapter.getSelectors()"
                },
                {
                    "name": "selectApplications",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/application.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectApplicationsFeature,\n  internalSelectors.selectAll,\n)"
                },
                {
                    "name": "selectApplicationsFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/application.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ApplicationsState>(APPLICATION_PROFILE_STATE_KEY)"
                },
                {
                    "name": "selectSelectedApplication",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/application.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectApplicationsFeature,\n  // getSelectedApplicationId,\n  selectCurrentApplication,\n  (state, id) => id ? state.entities[id] : null,\n)"
                }
            ],
            "src/app/state/actions/authorization.actions.ts": [
                {
                    "name": "authorizationPageLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/authorization.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Authorization] Authorization Page Loaded',\n  props<{applicationId: string}>(),\n)"
                },
                {
                    "name": "authorizationRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/authorization.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Authorization] Authorization `Submit` clicked on',\n  props<{authorization: Authorization}>(),\n)"
                }
            ],
            "src/app/state/selectors/access-needs.selectors.ts": [
                {
                    "name": "childrenOf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: AccessNeedsState, ids: string[]): AccessNeed[] => {\n  const needs = ids.map(id => state.entities[id] as AccessNeed);\n  const children = needs.reduce((acc, current) => ([...acc, ...current.children]), [] as string[]);\n\n  if (children.length > 0) {\n    return [...needs, ...childrenOf(state, children)];\n  }\n\n  return needs;\n}",
                    "rawdescription": "Recursively traverses the needs and their children through their ids to find all the access needs related to\na group regardless of how deep it is.\nTODO check for infinite loops, if a access need is already present then don add it again",
                    "description": "<p>Recursively traverses the needs and their children through their ids to find all the access needs related to\na group regardless of how deep it is.\nTODO check for infinite loops, if a access need is already present then don add it again</p>\n"
                },
                {
                    "name": "selectAccessNeed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\n  createSelector(\n    selectAccessNeedsFeature,\n    state => state.entities[id],\n  )"
                },
                {
                    "name": "selectAccessNeedGroupFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AccessNeedGroupState>(ACCESS_NEEDS_GROUPS_STATE_KEY)"
                },
                {
                    "name": "selectAccessNeeds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ids: string[]) =>\n  createSelector(\n    selectAccessNeedsFeature,\n    state => ids.map(id => state.entities[id]).filter(Boolean),\n  )"
                },
                {
                    "name": "selectAccessNeedsFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AccessNeedsState>(ACCESS_NEEDS_STATE_KEY)"
                },
                {
                    "name": "selectCurrentGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAccessNeedGroupFeature,\n  selectSelectedApplication,\n  (state, app) => app ? state.entities[app.accessNeedGroup] as AccessNeedGroup : null\n)"
                },
                {
                    "name": "selectCurrentNeeds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAccessNeedsFeature,\n  selectCurrentGroup,\n  (state, group) => group ? childrenOf(state, group.needs): null,\n)"
                },
                {
                    "name": "selectCurrentShapeTrees",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShapetreeFeature,\n  selectCurrentNeeds,\n  // TODO ! is it possible to ensure that shapetree is always defined/work around the undefined?\n  (state, needs) => needs ? needs.map(need => state.entities[need?.shapeTree]) as ShapeTree[] : null,\n)"
                },
                {
                    "name": "selectGroupFromClientId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\n  createSelector(\n    selectApplicationsFeature,\n    selectAccessNeedGroupFeature,\n    (applicationsState: ApplicationsState, groupsState: AccessNeedGroupState) => {\n      const groupId = applicationsState.entities[id]?.accessNeedGroup;\n\n      return groupId ? groupsState.entities[groupId] : undefined;\n    },\n  )"
                },
                {
                    "name": "selectNeedsFromClientId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(clientId: string) =>\n  createSelector(\n    selectAccessNeedsFeature,\n    selectGroupFromClientId(clientId),\n    (state, group) => {\n      if (!group) return;\n      const needsIds = group.needs;\n\n      return needsIds.map(needId => state.entities[needId]).filter(Boolean) as AccessNeed[]\n    }\n  )"
                },
                {
                    "name": "selectShapetreeFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ShapetreesState>(SHAPE_TREE_STATE_KEY)"
                },
                {
                    "name": "selectShapetreesFromClientId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\n  createSelector(\n    selectShapetreeFeature,\n    selectNeedsFromClientId(id),\n    (state, needs) => needs ? needs.map(need => state.entities[need.shapeTree]) as ShapeTree[] : null,\n  )"
                }
            ],
            "src/app/state/reducers/core.reducer.ts": [
                {
                    "name": "CORE_LANGUAGE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'coreLanguage'"
                },
                {
                    "name": "CORE_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'core'"
                },
                {
                    "name": "coreReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(CoreActions.loginInitiated, (state, {oidcIssuer}): CoreState => ({...state, oidcIssuer})),\n  on(CoreActions.webIdReceived, (state, {webId}): CoreState => ({...state, webId})),\n  on(CoreActions.loginStatusChanged, (state, {loggedIn}): CoreState => ({...state, isLoggedIn: loggedIn, loginKnown: true})),\n  on(CoreActions.serverSessionReceived, (state, {isServerLoggedIn, redirectUrl}): CoreState => ({...state, isServerLoggedIn, redirectUrl: redirectUrl ? redirectUrl : ''})),\n  on(CoreActions.pathRequested, (state, {requestedPath}): CoreState => ({\n    ...state,\n    requestedPath: excludedPaths.includes(requestedPath) ? '/dashboard' : requestedPath\n  }))\n)"
                },
                {
                    "name": "excludedPaths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['/', '/start', '/redirect', '/login', '/connect']"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoreState",
                    "defaultValue": "{\n  oidcIssuer: '',\n  webId: '',\n  loginKnown: false,\n  isLoggedIn: false,\n  isServerLoggedIn: false,\n  redirectUrl: '',\n  requestedPath: '/dashboard',\n  language: preferLanguage.language === '' || preferLanguage.language === undefined ? navigator.language.split('-')[0] : preferLanguage.language,\n}"
                },
                {
                    "name": "preferLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "JSON.parse(localStorage.getItem(CORE_LANGUAGE_KEY) || '{}')"
                }
            ],
            "src/app/state/selectors/description.selectors.ts": [
                {
                    "name": "currentApplicationDescriptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/description.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectDescriptionsFeature,\n  selectCurrentApplication,\n  (state, selected) => selected ? state.byId[selected]: null,\n)"
                },
                {
                    "name": "descriptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/description.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(props: {id: string}) =>\n  createSelector(\n    selectDescriptionsFeature,\n    state => state.byId[props.id],\n  )"
                },
                {
                    "name": "selectCurrentApplication",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/description.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectDescriptionsFeature,\n  state => state.selectedApplication,\n)"
                },
                {
                    "name": "selectDescriptionsFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/description.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<DescriptionsState>(DESCRIPTIONS_STATE_KEY)"
                }
            ],
            "src/app/state/reducers/data-registry.reducer.ts": [
                {
                    "name": "DATA_REGISTRY_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/data-registry.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'data'"
                },
                {
                    "name": "dataRegistriesReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/data-registry.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.dataRegistriesProvided, (state, {registries}) => insertEntities(state, registries)),\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/data-registry.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataRegistryState",
                    "defaultValue": "{\n  byId: {},\n  allIds: [],\n}"
                }
            ],
            "src/app/components/add-social-agent-form/add-social-agent-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/add-social-agent-form/add-social-agent-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/add-social-agent-form/add-social-agent-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                },
                {
                    "name": "WithWebId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/add-social-agent-form/add-social-agent-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/components/login/login.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/login/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/login/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                }
            ],
            "src/app/components/app-view/app-view.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/app-view/app-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoadingNeeds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/app-view/app-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/app-view/app-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                }
            ],
            "src/app/state/reducers/descriptions.reducer.ts": [
                {
                    "name": "DESCRIPTIONS_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/descriptions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'descriptions'"
                },
                {
                    "name": "descriptionsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/descriptions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(DescActions.descriptionsNeeded, (state, {applicationId}): DescriptionsState => ({...state, selectedApplication: applicationId })),\n  on(DescActions.descriptionsReceived, (state, {authorizationData}) => ({ selectedApplication: state.selectedApplication, ...insertEntity(state, authorizationData)})),\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/descriptions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DescriptionsState",
                    "defaultValue": "{\n  byId: {},\n  allIds: [],\n  selectedApplication: null\n}"
                }
            ],
            "src/app/state/actions/description.actions.ts": [
                {
                    "name": "descriptionsNeeded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/description.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions needed for application',\n  props<{applicationId: string}>(),\n)"
                },
                {
                    "name": "descriptionsReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/description.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions received for application',\n  props<{authorizationData: AuthorizationData}>(),\n)"
                }
            ],
            "src/app/state/effects/index.ts": [
                {
                    "name": "Effects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/effects/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ApplicationProfileEffects,\n  CoreEffects,\n  AuthorizationEffects,\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "ENV",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  OIDC_CLIENT_ID: window['env']['OIDC_CLIENT_ID'],\n  BASE_URL: window['env']['BASE_URL'],\n  SRV_BASE: window['env']['SRV_BASE'],\n  DEFAULT_IDP: window['env']['DEFAULT_IDP'],\n  VAPID_PUBLIC_KEY: window['env']['VAPID_PUBLIC_KEY'],\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "ENV",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  OIDC_CLIENT_ID: window['env'] && window['env']['OIDC_CLIENT_ID'] ? window['env']['OIDC_CLIENT_ID'] : 'http://localhost:4200/assets/id-local.jsonld',\n  BASE_URL: window['env'] && window['env']['BASE_URL'] ? window['env']['BASE_URL'] : 'http://localhost:4200',\n  SRV_BASE: window['env'] && window['env']['SRV_BASE'] ? window['env']['SRV_BASE'] : 'http://localhost:4000',\n  DEFAULT_IDP: window['env'] && window['env']['DEFAULT_IDP'] ? window['env']['DEFAULT_IDP'] : 'http://localhost:3000',\n  VAPID_PUBLIC_KEY: window['env'] && window['env']['VAPID_PUBLIC_KEY'] ? window['env']['VAPID_PUBLIC_KEY'] : \"BNUaG9vwp-WE_cX-3dNLebyczW_RivE8wHECIvZIUMUZ3co6P79neE3hueJJtFcg5ezTZ25T1ITciujz-mlAcnY\"\n}"
                }
            ],
            "src/app/state/effects/application.effects.ts": [
                {
                    "name": "flatAccessNeed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/effects/application.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(apiAccess: ApiAccessNeed): AccessNeed[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []}];\n\n  else {\n    // collect and recurse\n    const newAccess: AccessNeed = {...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []};\n    const convertedChildren = children.map(c => flatAccessNeed(c)).flat();\n\n    return [newAccess, ...convertedChildren];\n  }\n}"
                },
                {
                    "name": "flatAccessNeedGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/effects/application.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(apiGroup: ApiGroup): AccessNeedGroup => {\n  return {...apiGroup, needs: apiGroup.needs.map(need => need.id)};\n}"
                },
                {
                    "name": "flatShapeTrees",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/effects/application.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(apiAccess: ApiAccessNeed): ShapeTree[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label}]\n\n  else {\n    const thisShapeTree = {id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label};\n    const childrenShapeTrees = children.map(c => flatShapeTrees(c)).flat();\n\n    return [thisShapeTree, ...childrenShapeTrees];\n  }\n}"
                },
                {
                    "name": "mapAuthorizationDataToNeedsActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/effects/application.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data: AuthorizationData) => {\n  const needs = data.accessNeedGroup.needs;\n\n  const shapeTrees = needs.map(need => flatShapeTrees(need)).flat();\n  const accessNeeds = needs.map(need => flatAccessNeed(need)).flat();\n\n  const shapeTreeActions = shapeTrees.map(tree => NeedActions.addShapeTree({tree}));\n  const needsActions = accessNeeds.map(need => NeedActions.addAccessNeed({need}));\n\n  const group = flatAccessNeedGroup(data.accessNeedGroup);\n  const groupAction = NeedActions.addAccessNeedGroup({group});\n  return [shapeTreeActions, needsActions, groupAction];\n}"
                }
            ],
            "src/app/state/actions/core.actions.ts": [
                {
                    "name": "incomingLoginRedirect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Incoming Login Redirect',\n  props<{url: string}>(),\n)"
                },
                {
                    "name": "loginInitiated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Login Initiated',\n   props<{oidcIssuer: string}>(),\n)",
                    "rawdescription": "Marks that the navigations has been handled off to the user IDP",
                    "description": "<p>Marks that the navigations has been handled off to the user IDP</p>\n"
                },
                {
                    "name": "loginRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Login Requested',\n  props<{oidcIssuer: string}>(),\n)"
                },
                {
                    "name": "loginStatusChanged",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Login Status Changed',\n  props<{loggedIn: boolean}>(),\n)"
                },
                {
                    "name": "oidcInfoReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] OIDC Info Received',\n  props<{oidcInfo: ISessionInfo}>(),\n)"
                },
                {
                    "name": "pathRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Path requested',\n  props<{requestedPath: string}>()\n)"
                },
                {
                    "name": "requestName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Request Name',\n)"
                },
                {
                    "name": "serverLoginInitiated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Server login Initiated'\n)",
                    "rawdescription": "Marks that the navigations has been handled off to the user IDP",
                    "description": "<p>Marks that the navigations has been handled off to the user IDP</p>\n"
                },
                {
                    "name": "serverLoginRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Server Login Requested'\n)"
                },
                {
                    "name": "serverSessionReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Server session status received',\n  props<{isServerLoggedIn: boolean, redirectUrl?: string}>(),\n)"
                },
                {
                    "name": "serverSessionRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Server session status requested',\n  props<{oidcIssuer: string}>(),\n)"
                },
                {
                    "name": "webIdReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] WebId Received',\n  props<{webId: string}>(),\n)"
                }
            ],
            "src/app/state/reducers/utils.ts": [
                {
                    "name": "insertEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entities: T[]) => {\n  for (const entity of entities) state = insertEntity(state, entity);\n  return state;\n}"
                },
                {
                    "name": "insertEntity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entry: T): NormalizedState<T> => {\n  const byId = {...state.byId, [entry.id]: entry};\n  const allIds = [...state.allIds, entry.id];\n\n  return {byId, allIds}\n}"
                },
                {
                    "name": "removeEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, ids: string[]) => {\n  for (const id of ids) state = removeEntity(state, id);\n  return state;\n}"
                },
                {
                    "name": "removeEntity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, id: string): NormalizedState<T> => {\n\n  if (!state.allIds.includes(id)) return state;\n\n  const byId = {...state.byId};\n  const allIds = [...state.allIds].filter(_id => _id != id);\n\n  delete byId[id];\n  return {byId, allIds}\n}"
                }
            ],
            "src/app/languages.ts": [
                {
                    "name": "Languages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/languages.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Language>",
                    "defaultValue": "[\n  {\n    label: 'English',\n    id: 'en'\n  },\n  {\n    label: 'Español',\n    id: 'es'\n  }\n]"
                }
            ],
            "src/app/components/language/language.stories.ts": [
                {
                    "name": "LanguageSelectClose",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/language/language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/language/language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                }
            ],
            "src/app/components/navbar/navbar.stories.ts": [
                {
                    "name": "LoggedIn_NotificationsDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedIn_NotificationsEnabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                }
            ],
            "src/app/state/reducers/index.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!ENV.production ? [localStorageSyncReducer] : [localStorageSyncReducer]"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<RootState>",
                    "defaultValue": "{\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [SOCIAL_AGENT_STATE_KEY]: socialAgentsReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n  [DATA_REGISTRY_STATE_KEY]: dataRegistriesReducer,\n  [ACCESS_NEEDS_STATE_KEY]: accessNeedsReducer,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: accessNeedsGroupReducer,\n  [SHAPE_TREE_STATE_KEY]: shapetreeReducer,\n}"
                }
            ],
            "src/app/state/selectors/core.selectors.ts": [
                {
                    "name": "selectBothEndsLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.isLoggedIn && core.isServerLoggedIn\n)"
                },
                {
                    "name": "selectCore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<CoreState>(CORE_STATE_KEY)"
                },
                {
                    "name": "selectIssuer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.oidcIssuer,\n)"
                },
                {
                    "name": "selectLoggedInStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.isLoggedIn,\n)"
                },
                {
                    "name": "selectLoginKnown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.loginKnown\n)"
                },
                {
                    "name": "selectPrefLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.language\n)"
                },
                {
                    "name": "selectRedirectUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.redirectUrl,\n)"
                },
                {
                    "name": "selectRequestedPath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.requestedPath,\n)"
                },
                {
                    "name": "selectServerLoggedInStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.isServerLoggedIn,\n)"
                },
                {
                    "name": "selectWebId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.webId,\n)"
                }
            ],
            "src/app/state/selectors/data.selectors.ts": [
                {
                    "name": "selectDataRegistries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectDataRegistriesFeature,\n  state => ([...Object.values(state.byId)]),\n)"
                },
                {
                    "name": "selectDataRegistriesFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<DataRegistryState>(DATA_REGISTRY_STATE_KEY)"
                }
            ],
            "src/app/state/selectors/social-agent.selectors.ts": [
                {
                    "name": "selectors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/social-agent.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "socialAgentAdapter.getSelectors()"
                },
                {
                    "name": "selectSocialAgents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/social-agent.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSocialAgentsFeature,\n  selectors.selectAll,\n)"
                },
                {
                    "name": "selectSocialAgentsFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/social-agent.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<SocialAgentState>(SOCIAL_AGENT_STATE_KEY)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/i18n.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/i18n.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/reducers/index.ts": [
                {
                    "name": "localStorageSyncReducer",
                    "file": "src/app/state/reducers/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<RootState>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/state/reducers/access-needs.reducer.ts": [
                {
                    "name": "AccessNeedGroupState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "EntityState<AccessNeedGroup>",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "AccessNeedsState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "EntityState<AccessNeed>",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Contains all the received access needs. Children needs are flattened to the top\nand the &#39;parent&#39; and &#39;children&#39; (by ids) are used to reconstruct the hierarchy</p>\n",
                    "kind": 177
                },
                {
                    "name": "ShapetreesState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "EntityState<ShapeTree>",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/state/models/index.ts": [
                {
                    "name": "ACL",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"http://www.w3.org/ns/auth/acl#Read\" | \"http://www.w3.org/ns/auth/acl#Write\" | \"http://www.w3.org/ns/auth/acl#Control\" | \"http://www.w3.org/ns/auth/acl#Append\" | \"http://www.w3.org/ns/auth/acl#Update\"",
                    "file": "src/app/state/models/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/state/reducers/data-registry.reducer.ts": [
                {
                    "name": "DataRegistryState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "NormalizedState<DataRegistry>",
                    "file": "src/app/state/reducers/data-registry.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/languages.ts": [
                {
                    "name": "Language",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/languages.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/state/reducers/social-agent.reducer.ts": [
                {
                    "name": "SocialAgentState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "EntityState<SocialAgent>",
                    "file": "src/app/state/reducers/social-agent.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "canActivateChild": [
                            "StartGuard"
                        ],
                        "children": [
                            {
                                "path": "start",
                                "component": "StartComponent"
                            },
                            {
                                "path": "login",
                                "component": "LoginPage"
                            },
                            {
                                "path": "redirect",
                                "component": "RedirectHandlerComponent"
                            },
                            {
                                "path": "connect",
                                "component": "ConnectServerPage"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "canActivateChild": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "path": "dashboard",
                                "component": "DashboardComponent"
                            },
                            {
                                "path": "authorize",
                                "component": "AuthorizationPage"
                            },
                            {
                                "path": "applications",
                                "component": "ApplicationsComponent",
                                "children": [
                                    {
                                        "path": "application",
                                        "component": "ApplicationComponent"
                                    }
                                ]
                            },
                            {
                                "path": "application",
                                "component": "ApplicationComponent"
                            },
                            {
                                "path": "social-agents",
                                "component": "SocialAgentsComponent"
                            },
                            {
                                "path": "add-social-agent",
                                "component": "AddSocialAgentComponent"
                            },
                            {
                                "path": "data",
                                "component": "DataComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/add-social-agent-form/add-social-agent-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddSocialAgentFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/add-social-agent-form/add-social-agent-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/add-social-agent-form/add-social-agent-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/add-social-agent-form/add-social-agent-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithWebId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/app-view/app-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/app-view/app-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/app-view/app-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadingNeeds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/app-view/app-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/language/language.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LanguageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/language/language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LanguageSelectClose",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/language/language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn_NotificationsDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn_NotificationsEnabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/auth.guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/start.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "StartGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/i18n.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/languages.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Languages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/add-social-agent/add-social-agent.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddSocialAgentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/application/application.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplicationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/applications/applications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplicationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/authorization/authorization.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorizationPage",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/connect-server/connect-server.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConnectServerPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/data/data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login/login.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/redirect-handler/redirect-handler.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RedirectHandlerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/social-agents/social-agents.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SocialAgentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/start/start.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/push.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PushService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/access-needs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addAccessNeed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/access-needs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addAccessNeedGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/access-needs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShapeTree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addSocialAgent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationProfileReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationProfilesReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationsPanelLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authorizationReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authorizeApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataRegistriesNeeded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataRegistriesProvided",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socialAgentProfileReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socialAgentProfilesReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socialAgentsPanelLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unregisteredApplicationProfileError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unregisteredApplicationProfileReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unregisteredApplicationProfileRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/authorization.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authorizationPageLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/authorization.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authorizationRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "incomingLoginRedirect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginInitiated",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginStatusChanged",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "oidcInfoReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pathRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requestName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverLoginInitiated",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverLoginRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverSessionReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverSessionRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "webIdReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/description.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "descriptionsNeeded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/description.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "descriptionsReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/application.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationProfileEffects",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/application.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "flatAccessNeed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/application.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "flatAccessNeedGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/application.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "flatShapeTrees",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/application.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapAuthorizationDataToNeedsActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/authorization.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthorizationEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/core.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CoreEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Effects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/models/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccessNeed",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/state/models/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccessNeedGroup",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/models/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Instance",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/models/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShapeTree",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACCESS_NEEDS_GROUPS_STATE_KEY",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACCESS_NEEDS_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accessNeedsGroupReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accessNeedsGroupsInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accessNeedsInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accessNeedsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "groupsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "needsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SHAPE_TREE_STATE_KEY",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shapetreeAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shapeTreeInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shapetreeReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApplicationsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APPLICATION_PROFILE_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationProfileReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CoreState",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CORE_LANGUAGE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CORE_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "excludedPaths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/data-registry.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_REGISTRY_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/data-registry.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataRegistriesReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/data-registry.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/descriptions.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DescriptionsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/descriptions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DESCRIPTIONS_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/descriptions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "descriptionsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/descriptions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NormalizedState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RootState",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "localStorageSyncReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/social-agent.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/social-agent.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/social-agent.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SOCIAL_AGENT_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/social-agent.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socialAgentAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/social-agent.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socialAgentsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "insertEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "insertEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "childrenOf",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAccessNeed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAccessNeedGroupFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAccessNeeds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAccessNeedsFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentNeeds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentShapeTrees",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectGroupFromClientId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNeedsFromClientId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShapetreeFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShapetreesFromClientId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/application.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/application.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "internalSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/application.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApplications",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/application.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApplicationsFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/application.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBothEndsLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIssuer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoggedInStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoginKnown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPrefLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRedirectUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRequestedPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectServerLoggedInStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWebId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDataRegistries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDataRegistriesFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/description.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "currentApplicationDescriptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/description.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "descriptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/description.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/description.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDescriptionsFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/social-agent.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/social-agent.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSocialAgents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/social-agent.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSocialAgentsFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/solid-client.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SolidClient",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/solid-oidc.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SolidOidc",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}
{
    "pipes": [],
    "interfaces": [
        {
            "name": "AccessNeed",
            "id": "interface-AccessNeed-52bdb108db3279fc3e0932dd6b1d082cead5b541e804310d207bdd0eb734bcdd777c22d37c12b42fd453608cfdc18f5fda485630472ea7ac09bfe57352ec5027",
            "file": "src/app/state/models/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from \"@janeirodigital/sai-api-messages\";\nimport {IRI} from \"@janeirodigital/sai-api-messages/src\";\n\nexport type ACL = 'http://www.w3.org/ns/auth/acl#Read'\n  | 'http://www.w3.org/ns/auth/acl#Write'\n  |'http://www.w3.org/ns/auth/acl#Control'\n  |'http://www.w3.org/ns/auth/acl#Append'\n  |'http://www.w3.org/ns/auth/acl#Update';\n\nexport interface AccessNeedGroup extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  needs: IRI[];\n}\n\nexport interface AccessNeed extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  access: string[];\n  shapeTree: IRI,\n  children: IRI[]\n  parent?: IRI\n}\n\nexport interface ShapeTree extends UniqueId {\n  label: string,\n}\n\nexport interface Instance extends UniqueId {\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "access",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "shapeTree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        },
        {
            "name": "AccessNeedGroup",
            "id": "interface-AccessNeedGroup-52bdb108db3279fc3e0932dd6b1d082cead5b541e804310d207bdd0eb734bcdd777c22d37c12b42fd453608cfdc18f5fda485630472ea7ac09bfe57352ec5027",
            "file": "src/app/state/models/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from \"@janeirodigital/sai-api-messages\";\nimport {IRI} from \"@janeirodigital/sai-api-messages/src\";\n\nexport type ACL = 'http://www.w3.org/ns/auth/acl#Read'\n  | 'http://www.w3.org/ns/auth/acl#Write'\n  |'http://www.w3.org/ns/auth/acl#Control'\n  |'http://www.w3.org/ns/auth/acl#Append'\n  |'http://www.w3.org/ns/auth/acl#Update';\n\nexport interface AccessNeedGroup extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  needs: IRI[];\n}\n\nexport interface AccessNeed extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  access: string[];\n  shapeTree: IRI,\n  children: IRI[]\n  parent?: IRI\n}\n\nexport interface ShapeTree extends UniqueId {\n  label: string,\n}\n\nexport interface Instance extends UniqueId {\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "needs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        },
        {
            "name": "AccessNeedGroupState",
            "id": "interface-AccessNeedGroupState-29ccaef26a4d8649a743be5bc5689ada68aae663bda9cb6613242a991cb0de77357c875acf741a9db9251f855857069cf968a9d67730f22bf30df5b7f65b7e07",
            "file": "src/app/state/reducers/access-needs.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on} from '@ngrx/store';\nimport {AccessNeed, AccessNeedGroup, ShapeTree} from \"../models\";\nimport {createEntityAdapter, EntityState} from \"@ngrx/entity\";\nimport * as Actions from \"../actions/access-needs.actions\"\n\nexport const ACCESS_NEEDS_STATE_KEY = 'access-needs';\n\n/**\n * Contains all the received access needs. Children needs are flattened to the top\n * and the 'parent' and 'children' (by ids) are used to reconstruct the hierarchy\n */\nexport interface AccessNeedsState extends EntityState<AccessNeed> {}\nexport const needsAdapter = createEntityAdapter<AccessNeed>();\n\nconst accessNeedsInitialState: AccessNeedsState = needsAdapter.getInitialState();\n\nexport const accessNeedsReducer = createReducer(\n  accessNeedsInitialState,\n  on(Actions.addAccessNeed, (state, {need}) => needsAdapter.addOne(need, state)),\n);\n\n/**\n * Group of all the groups\n */\nexport const ACCESS_NEEDS_GROUPS_STATE_KEY = 'access-needs-groups';\nexport interface AccessNeedGroupState extends EntityState<AccessNeedGroup> {}\nexport const groupsAdapter = createEntityAdapter<AccessNeedGroup>()\n\nconst accessNeedsGroupsInitialState: AccessNeedGroupState = groupsAdapter.getInitialState();\n\nexport const accessNeedsGroupReducer = createReducer(\n  accessNeedsGroupsInitialState,\n  on(Actions.addAccessNeedGroup, (state, {group}) => groupsAdapter.addOne(group, state)),\n)\n\n\n/**\n * Group of all the shapetrees that have been loaded into the application through the different access needs\n */\nexport const SHAPE_TREE_STATE_KEY = 'shapetrees';\nexport interface ShapetreesState extends EntityState<ShapeTree>{}\nexport const shapetreeAdapter = createEntityAdapter<ShapeTree>();\n\nconst shapeTreeInitialState = shapetreeAdapter.getInitialState();\nexport const shapetreeReducer = createReducer(\n  shapeTreeInitialState,\n  on(Actions.addShapeTree, (state, {tree}) => shapetreeAdapter.addOne(tree, state))\n)\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "AccessNeedsState",
            "id": "interface-AccessNeedsState-29ccaef26a4d8649a743be5bc5689ada68aae663bda9cb6613242a991cb0de77357c875acf741a9db9251f855857069cf968a9d67730f22bf30df5b7f65b7e07",
            "file": "src/app/state/reducers/access-needs.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on} from '@ngrx/store';\nimport {AccessNeed, AccessNeedGroup, ShapeTree} from \"../models\";\nimport {createEntityAdapter, EntityState} from \"@ngrx/entity\";\nimport * as Actions from \"../actions/access-needs.actions\"\n\nexport const ACCESS_NEEDS_STATE_KEY = 'access-needs';\n\n/**\n * Contains all the received access needs. Children needs are flattened to the top\n * and the 'parent' and 'children' (by ids) are used to reconstruct the hierarchy\n */\nexport interface AccessNeedsState extends EntityState<AccessNeed> {}\nexport const needsAdapter = createEntityAdapter<AccessNeed>();\n\nconst accessNeedsInitialState: AccessNeedsState = needsAdapter.getInitialState();\n\nexport const accessNeedsReducer = createReducer(\n  accessNeedsInitialState,\n  on(Actions.addAccessNeed, (state, {need}) => needsAdapter.addOne(need, state)),\n);\n\n/**\n * Group of all the groups\n */\nexport const ACCESS_NEEDS_GROUPS_STATE_KEY = 'access-needs-groups';\nexport interface AccessNeedGroupState extends EntityState<AccessNeedGroup> {}\nexport const groupsAdapter = createEntityAdapter<AccessNeedGroup>()\n\nconst accessNeedsGroupsInitialState: AccessNeedGroupState = groupsAdapter.getInitialState();\n\nexport const accessNeedsGroupReducer = createReducer(\n  accessNeedsGroupsInitialState,\n  on(Actions.addAccessNeedGroup, (state, {group}) => groupsAdapter.addOne(group, state)),\n)\n\n\n/**\n * Group of all the shapetrees that have been loaded into the application through the different access needs\n */\nexport const SHAPE_TREE_STATE_KEY = 'shapetrees';\nexport interface ShapetreesState extends EntityState<ShapeTree>{}\nexport const shapetreeAdapter = createEntityAdapter<ShapeTree>();\n\nconst shapeTreeInitialState = shapetreeAdapter.getInitialState();\nexport const shapetreeReducer = createReducer(\n  shapeTreeInitialState,\n  on(Actions.addShapeTree, (state, {tree}) => shapetreeAdapter.addOne(tree, state))\n)\n",
            "properties": [],
            "indexSignatures": [],
            "description": "<p>Contains all the received access needs. Children needs are flattened to the top\nand the &#39;parent&#39; and &#39;children&#39; (by ids) are used to reconstruct the hierarchy</p>\n",
            "rawdescription": "\n\nContains all the received access needs. Children needs are flattened to the top\nand the 'parent' and 'children' (by ids) are used to reconstruct the hierarchy\n",
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "ApplicationsState",
            "id": "interface-ApplicationsState-195452ff741b7b34e31980850335cab20a800d87f7af16a8fd03877fe798342740020909215d23566f5b91bcebcca09c567a4cf7b1f18c6985749bce85da6e3a",
            "file": "src/app/state/reducers/application.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on} from '@ngrx/store';\nimport {Application, IRI} from '@janeirodigital/sai-api-messages';\nimport {DataActions} from \"../actions/application.actions\";\nimport {createEntityAdapter, EntityState} from \"@ngrx/entity\";\n\nexport const APPLICATION_PROFILE_STATE_KEY = 'applications';\nexport interface ApplicationsState extends EntityState<Application>{\n  selectedApplication: IRI | null;\n};\n\nconst adapter = createEntityAdapter<Application>();\n\nexport const initialState: ApplicationsState =  adapter.getInitialState({\n  selectedApplication: null,\n});\n\nexport const applicationProfileReducer = createReducer(\n  initialState,\n  on(DataActions.applicationProfileReceived, (state, {profile}) => adapter.addOne(profile, state)),\n  on(DataActions.applicationProfilesReceived, (state, {profiles}) => adapter.addMany(profiles, state)),\n);\n\nexport const applicationAdapter = adapter;\n",
            "properties": [
                {
                    "name": "selectedApplication",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "CoreState",
            "id": "interface-CoreState-6148a95a6f93fd646e7c4632f2e2c5afb1e2be50614ae8d598fdce603938df3d4bbdcea791e16945730e5ad22d8120940baa3c2b8fdfa93aedfa8c7cf8e25a93",
            "file": "src/app/state/reducers/core.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on} from \"@ngrx/store\";\nimport {CoreActions} from \"../actions\";\n\nexport const CORE_STATE_KEY = 'core';\nexport const CORE_LANGUAGE_KEY = 'coreLanguage';\n\nexport const preferLanguage = JSON.parse(localStorage.getItem(CORE_LANGUAGE_KEY) || '{}');\n\nexport interface CoreState {\n  oidcIssuer: string;\n  webId: string;\n  loginKnown: boolean;\n  isLoggedIn: boolean;\n  isServerLoggedIn: boolean;\n  redirectUrl: string;\n  requestedPath: string;\n  language: string;\n}\n\nexport const initialState: CoreState = {\n  oidcIssuer: '',\n  webId: '',\n  loginKnown: false,\n  isLoggedIn: false,\n  isServerLoggedIn: false,\n  redirectUrl: '',\n  requestedPath: '/dashboard',\n  language: preferLanguage.language === '' || preferLanguage.language === undefined ? navigator.language.split('-')[0] : preferLanguage.language,\n}\n\nconst excludedPaths = ['/', '/start', '/redirect', '/login', '/connect']\n\nexport const coreReducer = createReducer(\n  initialState,\n  on(CoreActions.loginInitiated, (state, {oidcIssuer}) => ({...state, oidcIssuer})),\n  on(CoreActions.webIdReceived, (state, {webId}) => ({...state, webId})),\n  on(CoreActions.loginStatusChanged, (state, {loggedIn}) => ({...state, isLoggedIn: loggedIn, loginKnown: true})),\n  on(CoreActions.serverSessionReceived, (state, {isServerLoggedIn, redirectUrl}) => ({...state, isServerLoggedIn, redirectUrl: redirectUrl ? redirectUrl : ''})),\n  on(CoreActions.pathRequested, (state, {requestedPath}) => ({\n    ...state,\n    requestedPath: excludedPaths.includes(requestedPath) ? '/dashboard' : requestedPath\n  }))\n)\n",
            "properties": [
                {
                    "name": "isLoggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isServerLoggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loginKnown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "oidcIssuer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "redirectUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "requestedPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "webId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataRegistryState",
            "id": "interface-DataRegistryState-1e85de65640d3220807757e5bd5c13a6ea0456636ab92796e932c3e76111f0b170ed595993ba55c61fa2d5b6f2dd85b53dbb4c6c461a3840e2c319b117d1128c",
            "file": "src/app/state/reducers/data-registry.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on} from '@ngrx/store';\nimport { NormalizedState } from \"./index\";\nimport {DataRegistry} from '@janeirodigital/sai-api-messages';\nimport {DataActions} from \"../actions/application.actions\";\nimport {insertEntities} from \"./utils\";\n\nexport const DATA_REGISTRY_STATE_KEY = 'data';\nexport interface DataRegistryState extends NormalizedState<DataRegistry> {}\n\nexport const initialState: DataRegistryState = {\n  byId: {},\n  allIds: [],\n};\n\nexport const dataRegistriesReducer = createReducer(\n  initialState,\n  on(DataActions.dataRegistriesProvided, (state, {registries}) => insertEntities(state, registries)),\n);\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "NormalizedState"
        },
        {
            "name": "DescriptionsState",
            "id": "interface-DescriptionsState-a37d2cf210bc9206ed0e5a172cbe5bd53b7460fcf9e15f62f66aaa8369b1a63cd47cbab3f35dde53c99ac974d4f6944a70e84dfb49af841fde0bdf907962212f",
            "file": "src/app/state/reducers/descriptions.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {NormalizedState} from \"./index\";\nimport {createReducer, on} from \"@ngrx/store\";\nimport {AuthorizationData, IRI} from \"@janeirodigital/sai-api-messages\";\nimport {DescActions} from \"../actions/description.actions\";\nimport {insertEntity} from \"./utils\";\n\n/*\n * Descriptions is an omni-state of slices of smaller linked data, it contains data\n * pertaining to access needs groups, access needs and shapetrees. If this grows\n * too large it is recommended to split into their own files.\n */\n\nexport const DESCRIPTIONS_STATE_KEY = 'descriptions';\n\nexport interface DescriptionsState extends NormalizedState<AuthorizationData> {\n  selectedApplication: IRI | null\n}\n\nexport const initialState: DescriptionsState = {\n  byId: {},\n  allIds: [],\n  selectedApplication: null\n}\n\nexport const descriptionsReducer = createReducer(\n  initialState,\n  on(DescActions.descriptionsNeeded, (state, {applicationId}) => ({...state, selectedApplication: applicationId })),\n  on(DescActions.descriptionsReceived, (state, {authorizationData}) => ({ selectedApplication: state.selectedApplication, ...insertEntity(state, authorizationData)})),\n)\n",
            "properties": [
                {
                    "name": "selectedApplication",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "NormalizedState"
        },
        {
            "name": "Instance",
            "id": "interface-Instance-52bdb108db3279fc3e0932dd6b1d082cead5b541e804310d207bdd0eb734bcdd777c22d37c12b42fd453608cfdc18f5fda485630472ea7ac09bfe57352ec5027",
            "file": "src/app/state/models/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from \"@janeirodigital/sai-api-messages\";\nimport {IRI} from \"@janeirodigital/sai-api-messages/src\";\n\nexport type ACL = 'http://www.w3.org/ns/auth/acl#Read'\n  | 'http://www.w3.org/ns/auth/acl#Write'\n  |'http://www.w3.org/ns/auth/acl#Control'\n  |'http://www.w3.org/ns/auth/acl#Append'\n  |'http://www.w3.org/ns/auth/acl#Update';\n\nexport interface AccessNeedGroup extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  needs: IRI[];\n}\n\nexport interface AccessNeed extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  access: string[];\n  shapeTree: IRI,\n  children: IRI[]\n  parent?: IRI\n}\n\nexport interface ShapeTree extends UniqueId {\n  label: string,\n}\n\nexport interface Instance extends UniqueId {\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        },
        {
            "name": "NormalizedState",
            "id": "interface-NormalizedState-106f510ef3af61b303734db47aa1bad75938c5a8458f07ea4fc1c2b0a0cb45a93999c0badee5a39f5914ca4a818e4108d5fc32ae052e023786d48b23f0f1f707",
            "file": "src/app/state/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer\n} from '@ngrx/store';\nimport { ENV } from '../../../environments/environment';\n\nimport {CoreState, coreReducer, CORE_STATE_KEY} from \"./core.reducer\";\nimport {\n  ApplicationsState,\n  applicationProfileReducer,\n  APPLICATION_PROFILE_STATE_KEY,\n} from './application.reducer';\nimport {\n  SocialAgentState,\n  socialAgentsReducer,\n  SOCIAL_AGENT_STATE_KEY,\n} from './social-agent.reducer';\n\nimport {\n  DataRegistryState,\n  dataRegistriesReducer,\n  DATA_REGISTRY_STATE_KEY,\n} from './data-registry.reducer';\n\nimport {\n  ShapetreesState,\n  shapetreeReducer,\n  SHAPE_TREE_STATE_KEY,\n} from \"./access-needs.reducer\";\n\nimport { UniqueId } from '@janeirodigital/sai-api-messages';\nimport {DESCRIPTIONS_STATE_KEY, descriptionsReducer, DescriptionsState} from \"./descriptions.reducer\";\nimport { localStorageSync } from 'ngrx-store-localstorage';\nimport {\n  ACCESS_NEEDS_GROUPS_STATE_KEY,\n  ACCESS_NEEDS_STATE_KEY, accessNeedsGroupReducer, AccessNeedGroupState,\n  accessNeedsReducer,\n  AccessNeedsState\n} from \"./access-needs.reducer\";\n\nexport interface NormalizedState<T extends UniqueId> {\n  byId: { [id: string]: T },\n  allIds: string[],\n}\n\n\nexport interface RootState {\n  [CORE_STATE_KEY]: CoreState,\n  [APPLICATION_PROFILE_STATE_KEY]: ApplicationsState,\n  [SOCIAL_AGENT_STATE_KEY]: SocialAgentState,\n  [DESCRIPTIONS_STATE_KEY]: DescriptionsState,\n  [DATA_REGISTRY_STATE_KEY]: DataRegistryState,\n  [ACCESS_NEEDS_STATE_KEY]: AccessNeedsState,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: AccessNeedGroupState,\n  [SHAPE_TREE_STATE_KEY]: ShapetreesState,\n}\n\nexport const reducers: ActionReducerMap<RootState> = {\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [SOCIAL_AGENT_STATE_KEY]: socialAgentsReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n  [DATA_REGISTRY_STATE_KEY]: dataRegistriesReducer,\n  [ACCESS_NEEDS_STATE_KEY]: accessNeedsReducer,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: accessNeedsGroupReducer,\n  [SHAPE_TREE_STATE_KEY]: shapetreeReducer,\n};\n\nexport function localStorageSyncReducer(reducer: ActionReducer<RootState>): ActionReducer<RootState> {\n  return localStorageSync({keys: [{ [CORE_STATE_KEY]: ['oidcIssuer', 'requestedPath']}], rehydrate: true})(reducer);\n}\n\nexport const metaReducers: MetaReducer<RootState>[] = !ENV.production ? [localStorageSyncReducer] : [localStorageSyncReducer];\n",
            "properties": [
                {
                    "name": "allIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "byId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RootState",
            "id": "interface-RootState-106f510ef3af61b303734db47aa1bad75938c5a8458f07ea4fc1c2b0a0cb45a93999c0badee5a39f5914ca4a818e4108d5fc32ae052e023786d48b23f0f1f707",
            "file": "src/app/state/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer\n} from '@ngrx/store';\nimport { ENV } from '../../../environments/environment';\n\nimport {CoreState, coreReducer, CORE_STATE_KEY} from \"./core.reducer\";\nimport {\n  ApplicationsState,\n  applicationProfileReducer,\n  APPLICATION_PROFILE_STATE_KEY,\n} from './application.reducer';\nimport {\n  SocialAgentState,\n  socialAgentsReducer,\n  SOCIAL_AGENT_STATE_KEY,\n} from './social-agent.reducer';\n\nimport {\n  DataRegistryState,\n  dataRegistriesReducer,\n  DATA_REGISTRY_STATE_KEY,\n} from './data-registry.reducer';\n\nimport {\n  ShapetreesState,\n  shapetreeReducer,\n  SHAPE_TREE_STATE_KEY,\n} from \"./access-needs.reducer\";\n\nimport { UniqueId } from '@janeirodigital/sai-api-messages';\nimport {DESCRIPTIONS_STATE_KEY, descriptionsReducer, DescriptionsState} from \"./descriptions.reducer\";\nimport { localStorageSync } from 'ngrx-store-localstorage';\nimport {\n  ACCESS_NEEDS_GROUPS_STATE_KEY,\n  ACCESS_NEEDS_STATE_KEY, accessNeedsGroupReducer, AccessNeedGroupState,\n  accessNeedsReducer,\n  AccessNeedsState\n} from \"./access-needs.reducer\";\n\nexport interface NormalizedState<T extends UniqueId> {\n  byId: { [id: string]: T },\n  allIds: string[],\n}\n\n\nexport interface RootState {\n  [CORE_STATE_KEY]: CoreState,\n  [APPLICATION_PROFILE_STATE_KEY]: ApplicationsState,\n  [SOCIAL_AGENT_STATE_KEY]: SocialAgentState,\n  [DESCRIPTIONS_STATE_KEY]: DescriptionsState,\n  [DATA_REGISTRY_STATE_KEY]: DataRegistryState,\n  [ACCESS_NEEDS_STATE_KEY]: AccessNeedsState,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: AccessNeedGroupState,\n  [SHAPE_TREE_STATE_KEY]: ShapetreesState,\n}\n\nexport const reducers: ActionReducerMap<RootState> = {\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [SOCIAL_AGENT_STATE_KEY]: socialAgentsReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n  [DATA_REGISTRY_STATE_KEY]: dataRegistriesReducer,\n  [ACCESS_NEEDS_STATE_KEY]: accessNeedsReducer,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: accessNeedsGroupReducer,\n  [SHAPE_TREE_STATE_KEY]: shapetreeReducer,\n};\n\nexport function localStorageSyncReducer(reducer: ActionReducer<RootState>): ActionReducer<RootState> {\n  return localStorageSync({keys: [{ [CORE_STATE_KEY]: ['oidcIssuer', 'requestedPath']}], rehydrate: true})(reducer);\n}\n\nexport const metaReducers: MetaReducer<RootState>[] = !ENV.production ? [localStorageSyncReducer] : [localStorageSyncReducer];\n",
            "properties": [
                {
                    "name": "ACCESS_NEEDS_GROUPS_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccessNeedGroupState",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "ACCESS_NEEDS_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccessNeedsState",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "APPLICATION_PROFILE_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationsState",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "CORE_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoreState",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "DATA_REGISTRY_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataRegistryState",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "DESCRIPTIONS_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DescriptionsState",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "SHAPE_TREE_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ShapetreesState",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "SOCIAL_AGENT_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocialAgentState",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ShapeTree",
            "id": "interface-ShapeTree-52bdb108db3279fc3e0932dd6b1d082cead5b541e804310d207bdd0eb734bcdd777c22d37c12b42fd453608cfdc18f5fda485630472ea7ac09bfe57352ec5027",
            "file": "src/app/state/models/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from \"@janeirodigital/sai-api-messages\";\nimport {IRI} from \"@janeirodigital/sai-api-messages/src\";\n\nexport type ACL = 'http://www.w3.org/ns/auth/acl#Read'\n  | 'http://www.w3.org/ns/auth/acl#Write'\n  |'http://www.w3.org/ns/auth/acl#Control'\n  |'http://www.w3.org/ns/auth/acl#Append'\n  |'http://www.w3.org/ns/auth/acl#Update';\n\nexport interface AccessNeedGroup extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  needs: IRI[];\n}\n\nexport interface AccessNeed extends UniqueId {\n  label: string;\n  description?: string;\n  required?: boolean;\n  access: string[];\n  shapeTree: IRI,\n  children: IRI[]\n  parent?: IRI\n}\n\nexport interface ShapeTree extends UniqueId {\n  label: string,\n}\n\nexport interface Instance extends UniqueId {\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        },
        {
            "name": "ShapetreesState",
            "id": "interface-ShapetreesState-29ccaef26a4d8649a743be5bc5689ada68aae663bda9cb6613242a991cb0de77357c875acf741a9db9251f855857069cf968a9d67730f22bf30df5b7f65b7e07",
            "file": "src/app/state/reducers/access-needs.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on} from '@ngrx/store';\nimport {AccessNeed, AccessNeedGroup, ShapeTree} from \"../models\";\nimport {createEntityAdapter, EntityState} from \"@ngrx/entity\";\nimport * as Actions from \"../actions/access-needs.actions\"\n\nexport const ACCESS_NEEDS_STATE_KEY = 'access-needs';\n\n/**\n * Contains all the received access needs. Children needs are flattened to the top\n * and the 'parent' and 'children' (by ids) are used to reconstruct the hierarchy\n */\nexport interface AccessNeedsState extends EntityState<AccessNeed> {}\nexport const needsAdapter = createEntityAdapter<AccessNeed>();\n\nconst accessNeedsInitialState: AccessNeedsState = needsAdapter.getInitialState();\n\nexport const accessNeedsReducer = createReducer(\n  accessNeedsInitialState,\n  on(Actions.addAccessNeed, (state, {need}) => needsAdapter.addOne(need, state)),\n);\n\n/**\n * Group of all the groups\n */\nexport const ACCESS_NEEDS_GROUPS_STATE_KEY = 'access-needs-groups';\nexport interface AccessNeedGroupState extends EntityState<AccessNeedGroup> {}\nexport const groupsAdapter = createEntityAdapter<AccessNeedGroup>()\n\nconst accessNeedsGroupsInitialState: AccessNeedGroupState = groupsAdapter.getInitialState();\n\nexport const accessNeedsGroupReducer = createReducer(\n  accessNeedsGroupsInitialState,\n  on(Actions.addAccessNeedGroup, (state, {group}) => groupsAdapter.addOne(group, state)),\n)\n\n\n/**\n * Group of all the shapetrees that have been loaded into the application through the different access needs\n */\nexport const SHAPE_TREE_STATE_KEY = 'shapetrees';\nexport interface ShapetreesState extends EntityState<ShapeTree>{}\nexport const shapetreeAdapter = createEntityAdapter<ShapeTree>();\n\nconst shapeTreeInitialState = shapetreeAdapter.getInitialState();\nexport const shapetreeReducer = createReducer(\n  shapeTreeInitialState,\n  on(Actions.addShapeTree, (state, {tree}) => shapetreeAdapter.addOne(tree, state))\n)\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "SocialAgentState",
            "id": "interface-SocialAgentState-d57ed9571f72385596854831ad3ba95165a9c2bd35eb04b7ff5a889cefc51b1ee26b88b2aaf1d7a6f4327ed042793f183d36dd45235a0e6c135774c90236f134",
            "file": "src/app/state/reducers/social-agent.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on} from '@ngrx/store';\nimport {SocialAgent} from '@janeirodigital/sai-api-messages';\nimport {DataActions} from \"../actions/application.actions\";\nimport {insertEntities, insertEntity} from \"./utils\";\nimport {createEntityAdapter, EntityState} from \"@ngrx/entity\";\n\nexport const SOCIAL_AGENT_STATE_KEY = 'social-agents';\nexport interface SocialAgentState extends EntityState<SocialAgent> {}\nconst adapter = createEntityAdapter<SocialAgent>();\n\nexport const initialState: SocialAgentState = adapter.getInitialState();\n\nexport const socialAgentsReducer = createReducer(\n  initialState,\n  on(DataActions.socialAgentProfileReceived, (state, {profile}) => adapter.addOne(profile, state)),\n  on(DataActions.socialAgentProfilesReceived, (state, {profiles}) => adapter.addMany(profiles, state)),\n);\n\nexport const socialAgentAdapter = adapter;\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApplicationProfileEffects",
            "id": "injectable-ApplicationProfileEffects-bd910540abcded30d5aa6ae66f1b8a6ac2df8ff947af9d64d312d7befaf2480aadc9640ac86129c5228d10894c188c6bd1a720d8197d1243b88fdc103021a071",
            "file": "src/app/state/effects/application.effects.ts",
            "properties": [
                {
                    "name": "addSocialAgent$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(DataActions.addSocialAgent),\n    mergeMap(({ webId, label, note }) => this.data.addSocialAgent(webId, label, note)),\n    map(profile => DataActions.socialAgentProfileReceived({profile})),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "authorizeApplication$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(DataActions.authorizeApplication),\n    mergeMap(({ authorization }) => this.data.authorizeApplication(authorization)),\n    map(accessAuthorization => DataActions.authorizationReceived({ accessAuthorization })),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "loadApplicationProfiles$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(DataActions.applicationsPanelLoaded),\n    mergeMap(() => this.data.getApplicationProfiles()),\n    map(profiles => DataActions.applicationProfilesReceived({profiles})),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loadDataRegistries$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(DataActions.dataRegistriesNeeded),\n    concatLatestFrom(() => this.store.select(selectors.prefLanguage)),\n    mergeMap(([props, lang]) => this.data.getDataRegistries(lang)),\n    map(registries => DataActions.dataRegistriesProvided({registries})),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "loadDescriptions$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(DescActions.descriptionsNeeded),\n    concatLatestFrom(() => this.store.select(selectors.prefLanguage)),\n    mergeMap(([props, lang]) => this.data.getDescriptions(props.applicationId, lang)),\n    switchMap(authorizationData => [\n      DescActions.descriptionsReceived({authorizationData}),\n      ...mapAuthorizationDataToNeedsActions(authorizationData).flat(),\n    ]),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "loadSocialAgentsProfiles$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(DataActions.socialAgentsPanelLoaded),\n    mergeMap(() => this.data.getSocialAgentProfiles()),\n    map(profiles => DataActions.socialAgentProfilesReceived({profiles})),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "redirectToCallbackEndpoint",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(DataActions.authorizationReceived),\n    tap(({accessAuthorization}) => window.location.href = accessAuthorization.callbackEndpoint!)\n  ), {dispatch: false})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {map, mergeMap, switchMap, tap} from \"rxjs\";\nimport {Injectable} from \"@angular/core\";\nimport {Actions, concatLatestFrom, createEffect, ofType} from \"@ngrx/effects\";\nimport {DataActions} from \"../actions/application.actions\";\nimport {DescActions} from \"../actions/description.actions\";\nimport * as NeedActions from \"../actions/access-needs.actions\"\nimport {DataService} from \"../../services/data.service\";\nimport {Store} from \"@ngrx/store\";\nimport * as selectors from \"../selectors\";\nimport {AccessNeed as ApiAccessNeed, AccessNeedGroup as ApiGroup, AuthorizationData} from \"@janeirodigital/sai-api-messages\";\nimport {AccessNeed, AccessNeedGroup, ShapeTree} from \"../models\";\n\n// TODO contains effects for non-application, move to their own files/classes\n\n@Injectable()\nexport class ApplicationProfileEffects {\n  constructor(\n    private actions$: Actions,\n    private data: DataService,\n    private store: Store,\n  ) {}\n\n  loadApplicationProfiles$ = createEffect(() => this.actions$.pipe(\n    ofType(DataActions.applicationsPanelLoaded),\n    mergeMap(() => this.data.getApplicationProfiles()),\n    map(profiles => DataActions.applicationProfilesReceived({profiles})),\n  ))\n\n  loadSocialAgentsProfiles$ = createEffect(() => this.actions$.pipe(\n    ofType(DataActions.socialAgentsPanelLoaded),\n    mergeMap(() => this.data.getSocialAgentProfiles()),\n    map(profiles => DataActions.socialAgentProfilesReceived({profiles})),\n  ))\n\n  addSocialAgent$ = createEffect(() => this.actions$.pipe(\n    ofType(DataActions.addSocialAgent),\n    mergeMap(({ webId, label, note }) => this.data.addSocialAgent(webId, label, note)),\n    map(profile => DataActions.socialAgentProfileReceived({profile})),\n  ))\n\n  loadDataRegistries$ = createEffect(() => this.actions$.pipe(\n    ofType(DataActions.dataRegistriesNeeded),\n    concatLatestFrom(() => this.store.select(selectors.prefLanguage)),\n    mergeMap(([props, lang]) => this.data.getDataRegistries(lang)),\n    map(registries => DataActions.dataRegistriesProvided({registries})),\n  ))\n\n  loadDescriptions$ = createEffect(() => this.actions$.pipe(\n    ofType(DescActions.descriptionsNeeded),\n    concatLatestFrom(() => this.store.select(selectors.prefLanguage)),\n    mergeMap(([props, lang]) => this.data.getDescriptions(props.applicationId, lang)),\n    switchMap(authorizationData => [\n      DescActions.descriptionsReceived({authorizationData}),\n      ...mapAuthorizationDataToNeedsActions(authorizationData).flat(),\n    ]),\n  ))\n\n  authorizeApplication$ = createEffect(() => this.actions$.pipe(\n    ofType(DataActions.authorizeApplication),\n    mergeMap(({ authorization }) => this.data.authorizeApplication(authorization)),\n    map(accessAuthorization => DataActions.authorizationReceived({ accessAuthorization })),\n  ))\n\n  redirectToCallbackEndpoint =  createEffect(() => this.actions$.pipe(\n    ofType(DataActions.authorizationReceived),\n    tap(({accessAuthorization}) => window.location.href = accessAuthorization.callbackEndpoint!)\n  ), {dispatch: false});\n}\n\nconst mapAuthorizationDataToNeedsActions = (data: AuthorizationData) => {\n  const needs = data.accessNeedGroup.needs;\n\n  const shapeTrees = needs.map(need => flatShapeTrees(need)).flat();\n  const accessNeeds = needs.map(need => flatAccessNeed(need)).flat();\n\n  const shapeTreeActions = shapeTrees.map(tree => NeedActions.addShapeTree({tree}));\n  const needsActions = accessNeeds.map(need => NeedActions.addAccessNeed({need}));\n\n  const group = flatAccessNeedGroup(data.accessNeedGroup);\n  const groupAction = NeedActions.addAccessNeedGroup({group});\n  return [shapeTreeActions, needsActions, groupAction];\n}\n\n\n/* This set of functions take the nested Authorization Data from the api and flatten the needs, shapetrees and group\n * that then can be used to insert into the store as independent entities\n */\nconst flatAccessNeedGroup = (apiGroup: ApiGroup): AccessNeedGroup => {\n  return {...apiGroup, needs: apiGroup.needs.map(need => need.id)};\n}\n\nconst flatAccessNeed = (apiAccess: ApiAccessNeed): AccessNeed[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []}];\n\n  else {\n    // collect and recurse\n    const newAccess: AccessNeed = {...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []};\n    const convertedChildren = children.map(c => flatAccessNeed(c)).flat();\n\n    return [newAccess, ...convertedChildren];\n  }\n}\n\nconst flatShapeTrees = (apiAccess: ApiAccessNeed): ShapeTree[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label}]\n\n  else {\n    const thisShapeTree = {id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label};\n    const childrenShapeTrees = children.map(c => flatShapeTrees(c)).flat();\n\n    return [thisShapeTree, ...childrenShapeTrees];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CoreEffects",
            "id": "injectable-CoreEffects-dc80fa54b8f6629e33a41e52bfc44eca80881967534b3e29798b36fe5b24b944fb69a7ba033c8e8820308f07a99e6a061b9829271c1550a774174493fda2c898",
            "file": "src/app/state/effects/core.effects.ts",
            "properties": [
                {
                    "name": "checkServerSession$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.loginStatusChanged),\n    concatLatestFrom(() => this.store.select(selectors.oidcIssuer)),\n    mergeMap(([action, oidcIssuer]) => {\n      if (action.loggedIn) {\n        return of(CoreActions.serverSessionRequested({oidcIssuer}))\n      } else {\n        return EMPTY;\n      }\n    }),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "handleIncomingRedirect$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.incomingLoginRedirect),\n    mergeMap(({url}) => from(this.id.handleRedirect(url))),\n    map(oidcInfo => {\n      if (oidcInfo) {\n        return CoreActions.oidcInfoReceived({oidcInfo})\n      } else {\n        throw new Error('oidcInfo undefined')\n      }\n    })\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "login$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.loginRequested),\n    map(({oidcIssuer}) => CoreActions.loginInitiated({oidcIssuer})),\n    tap(({oidcIssuer}) => this.id.login(oidcIssuer)),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "serverLoginRequested$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.serverLoginRequested),\n    concatLatestFrom(action => this.store.select(selectors.redirectUrl)),\n    tap(([action, redirectUrl]) => this.id.serverLogin(redirectUrl)),\n    map(([action, redirectUrl]) => CoreActions.serverLoginInitiated()),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "serverSessionRequested$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.serverSessionRequested),\n    mergeMap(({oidcIssuer}) => from(this.id.checkServerSession(oidcIssuer))\n      .pipe(\n        map(result => CoreActions.serverSessionReceived(result))\n      )),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "setLoggedIn$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.oidcInfoReceived),\n    map(({oidcInfo}) => CoreActions.loginStatusChanged({loggedIn: oidcInfo.isLoggedIn}))\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "setWebId$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.oidcInfoReceived),\n    map(({oidcInfo}) => CoreActions.webIdReceived({webId: oidcInfo.webId!}))\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {Actions, createEffect, ofType, concatLatestFrom} from \"@ngrx/effects\";\nimport { Store } from \"@ngrx/store\";\nimport { EMPTY, map, tap, of, from} from \"rxjs\";\nimport {LoginService} from \"../../services/login.service\";\nimport {CoreActions} from \"../actions\";\nimport {mergeMap} from \"rxjs/operators\";\nimport * as selectors from \"../selectors\";\n\n@Injectable()\nexport class CoreEffects {\n\n  constructor(\n    private actions$: Actions,\n    private id: LoginService,\n    private store: Store,\n  ) {}\n\n  login$ = createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.loginRequested),\n    map(({oidcIssuer}) => CoreActions.loginInitiated({oidcIssuer})),\n    tap(({oidcIssuer}) => this.id.login(oidcIssuer)),\n  ))\n\n  handleIncomingRedirect$ = createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.incomingLoginRedirect),\n    mergeMap(({url}) => from(this.id.handleRedirect(url))),\n    map(oidcInfo => {\n      if (oidcInfo) {\n        return CoreActions.oidcInfoReceived({oidcInfo})\n      } else {\n        throw new Error('oidcInfo undefined')\n      }\n    })\n  ))\n\n  setLoggedIn$ = createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.oidcInfoReceived),\n    map(({oidcInfo}) => CoreActions.loginStatusChanged({loggedIn: oidcInfo.isLoggedIn}))\n  ))\n\n  setWebId$ = createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.oidcInfoReceived),\n    map(({oidcInfo}) => CoreActions.webIdReceived({webId: oidcInfo.webId!}))\n  ))\n\n  checkServerSession$ = createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.loginStatusChanged),\n    concatLatestFrom(() => this.store.select(selectors.oidcIssuer)),\n    mergeMap(([action, oidcIssuer]) => {\n      if (action.loggedIn) {\n        return of(CoreActions.serverSessionRequested({oidcIssuer}))\n      } else {\n        return EMPTY;\n      }\n    }),\n  ))\n\n  serverSessionRequested$ = createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.serverSessionRequested),\n    mergeMap(({oidcIssuer}) => from(this.id.checkServerSession(oidcIssuer))\n      .pipe(\n        map(result => CoreActions.serverSessionReceived(result))\n      )),\n  ))\n\n  serverLoginRequested$ = createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.serverLoginRequested),\n    concatLatestFrom(action => this.store.select(selectors.redirectUrl)),\n    tap(([action, redirectUrl]) => this.id.serverLogin(redirectUrl)),\n    map(([action, redirectUrl]) => CoreActions.serverLoginInitiated()),\n  ))\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataService",
            "id": "injectable-DataService-b1dde0098dd5bf79adb567fe4ae4944c005748d1f584b10ca7fe26a0e1798dacc7d5aeefceb42b60c0eb235d2aaf4be97a3f3521427b4068ad6321c60e6906f8",
            "file": "src/app/services/data.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addSocialAgent",
                    "args": [
                        {
                            "name": "webId",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "note",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<SocialAgent>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "webId",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "note",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "authorizeApplication",
                    "args": [
                        {
                            "name": "authorization",
                            "type": "Authorization",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<AccessAuthorization>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "authorization",
                            "type": "Authorization",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApplicationProfiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Application[]>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "getDataFromApi",
                    "args": [
                        {
                            "name": "request",
                            "type": "Request",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "Request",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataRegistries",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DataRegistry[]>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDescriptions",
                    "args": [
                        {
                            "name": "applicationId",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<AuthorizationData>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "applicationId",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSocialAgentProfiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<SocialAgent[]>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport { Request, ResponseMessage, ApplicationsRequest, ApplicationsResponse, ApplicationsResponseMessage,\n  Application, DescriptionsRequest, DescriptionsResponse, IRI, DescriptionsResponseMessage,\n  DataRegistriesRequest, DataRegistriesResponse, DataRegistriesResponseMessage, DataRegistry,\n  SocialAgentsRequest, SocialAgentsResponse, SocialAgent, SocialAgentsResponseMessage,\n  AddSocialAgentRequest, SocialAgentResponse, SocialAgentResponseMessage, AuthorizationData, AccessAuthorization, Authorization, ApplicationAuthorizationRequest, ApplicationAuthorizationResponseMessage, ApplicationAuthorizationResponse\n} from '@janeirodigital/sai-api-messages'\nimport {ENV} from \"../../environments/environment\";\nimport { SolidClient } from '../utils/solid-client';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(\n    private solidClient: SolidClient,\n  ) {}\n\n  private async getDataFromApi<T extends ResponseMessage>(request: Request): Promise<T> {\n    const commonOptions = {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          }\n    }\n    const options = {\n      ...commonOptions,\n      body: request.stringify()\n    }\n    const response = await this.solidClient.fetch(`${ENV.SRV_BASE}/api`, options)\n    return (await response.json()) as T\n  }\n\n  async getApplicationProfiles(): Promise<Application[]> {\n    const request = new ApplicationsRequest()\n    const data = await this.getDataFromApi<ApplicationsResponseMessage>(request)\n    const response = new ApplicationsResponse(data)\n    return response.payload\n  }\n\n  async getSocialAgentProfiles(): Promise<SocialAgent[]> {\n    const request = new SocialAgentsRequest()\n    const data = await this.getDataFromApi<SocialAgentsResponseMessage>(request)\n    const response = new SocialAgentsResponse(data)\n    return response.payload\n  }\n\n  async addSocialAgent(webId: IRI, label: string, note?: string): Promise<SocialAgent> {\n    const request = new AddSocialAgentRequest(webId, label, note)\n    const data = await this.getDataFromApi<SocialAgentResponseMessage>(request)\n    const response = new SocialAgentResponse(data)\n    return response.payload\n  }\n\n  async getDataRegistries(lang: string): Promise<DataRegistry[]> {\n    const request = new DataRegistriesRequest(lang)\n    const data = await this.getDataFromApi<DataRegistriesResponseMessage>(request)\n    const response = new DataRegistriesResponse(data)\n    return response.payload\n  }\n\n  async getDescriptions(applicationId: IRI, lang: string): Promise<AuthorizationData> {\n    const request = new DescriptionsRequest(applicationId, lang)\n    const data = await this.getDataFromApi<DescriptionsResponseMessage>(request)\n    const response = new DescriptionsResponse(data)\n    return response.payload\n  }\n\n  async authorizeApplication(authorization: Authorization): Promise<AccessAuthorization> {\n    const request = new ApplicationAuthorizationRequest(authorization)\n    const data = await this.getDataFromApi<ApplicationAuthorizationResponseMessage>(request)\n    const response = new ApplicationAuthorizationResponse(data)\n    return response.payload\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-5117692164d8d007ff072d6f86710811f77ca8d00eca983b955d7e78ea4451870b5acf96d60f36a7941e550bd1dd136470be2a5a69fa31820e7de861c6495957",
            "file": "src/app/services/login.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkServerSession",
                    "args": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRedirect",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ISessionInfo | undefined>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serverLogin",
                    "args": [
                        {
                            "name": "redirectUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "redirectUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ENV} from \"../../environments/environment\";\nimport {ISessionInfo} from \"@inrupt/solid-client-authn-browser\";\nimport {SolidClient} from \"../utils/solid-client\";\nimport { SolidOidc } from '../utils/solid-oidc';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(\n    private solidClient: SolidClient,\n    private solidOidc: SolidOidc,\n  ) {}\n\n  async login(oidcIssuer: string) {\n\n    await this.solidOidc.login({\n      clientId: ENV.OIDC_CLIENT_ID,\n      oidcIssuer,\n      redirectUrl: `${ENV.BASE_URL}/redirect`,\n    });\n  }\n\n  async checkServerSession(oidcIssuer: string): Promise<{isServerLoggedIn: boolean, redirectUrl?: string}> {\n    const options = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({idp: oidcIssuer}),\n    }\n    const result = await this.solidClient.fetch(`${ENV.SRV_BASE}/login`, options)\n\n    if (result.status === 204) {\n      return {isServerLoggedIn: true}\n    } else if (result.status === 200) {\n      const {redirectUrl} = await result.json()\n      return  {isServerLoggedIn: false, redirectUrl}\n    } else {\n      throw new Error(`login check failed, stauts=${result.status}`)\n    }\n  }\n\n  async handleRedirect(url: string): Promise<ISessionInfo | undefined> {\n    return this.solidOidc.handleIncomingRedirect(url);\n  }\n\n  async serverLogin(redirectUrl: string) {\n    window.location.href = redirectUrl\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "solidOidc",
                        "type": "SolidOidc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "solidOidc",
                        "type": "SolidOidc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PushService",
            "id": "injectable-PushService-e96ea664b4839aae2fe68e7dbee84d422159e25ed6270d5c2903fa046e10cffd10ebfb9059bfebb22e193cb5cbba4a31008b8fc4ea79f8b8793e3615e6aea650",
            "file": "src/app/services/push.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "subscription",
                            "type": "PushSubscription",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "subscription",
                            "type": "PushSubscription",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ENV } from 'src/environments/environment';\nimport { SolidClient } from '../utils/solid-client';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PushService {\n\n  constructor(\n    private solidClient: SolidClient,\n  ) {}\n\n  async subscribe(subscription: PushSubscription) {\n    const options = {\n      method: 'POST',\n      body: JSON.stringify(subscription),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n    await this.solidClient.fetch(`${ENV.SRV_BASE}/push-subscribe`, options)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SolidClient",
            "id": "injectable-SolidClient-39dcad024ef5603f5d6061f96f15154d32e42ceb9514b5ec59c839304cb23d7c08ee1971c6ee329423560123567c67425fbb0ed286e24d0be8caeb9ace944e41",
            "file": "src/app/utils/solid-client.ts",
            "properties": [
                {
                    "name": "_fetch",
                    "defaultValue": "getDefaultSession().fetch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetch",
                    "args": [
                        {
                            "name": "url",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Response>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetch$",
                    "args": [
                        {
                            "name": "url",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Response>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {from, Observable} from \"rxjs\";\nimport {getDefaultSession} from \"@inrupt/solid-client-authn-browser\";\nimport {mergeMap} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SolidClient {\n\n  private _fetch = getDefaultSession().fetch;\n\n  public fetch$(url: RequestInfo, init?: RequestInit): Observable<Response> {\n    return from(this._fetch(url, init));\n  }\n\n  public fetch(url: RequestInfo, init?: RequestInit): Promise<Response> {\n    return this._fetch(url, init);\n  }\n}\n\n\nexport function unwrapJson<T = any>(): (response$: Observable<Response>) => Observable<T> {\n  return (response$: Observable<Response>): Observable<T> => {\n    return response$.pipe(mergeMap(r => r.json()));\n  };\n}\n",
            "type": "injectable"
        },
        {
            "name": "SolidOidc",
            "id": "injectable-SolidOidc-8e11767e01308ea391e58d1eb4af454eb321a6b14df2892fc6a4ba25546ffa73568ba97d483b53a38a5d3a68b6c12126cf76a806bb214ed48307eeab6a076a5c",
            "file": "src/app/utils/solid-oidc.ts",
            "properties": [
                {
                    "name": "handleIncomingRedirect",
                    "defaultValue": "handleIncomingRedirect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "login",
                    "defaultValue": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport {handleIncomingRedirect, login} from \"@inrupt/solid-client-authn-browser\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SolidOidc {\n  login = login\n  handleIncomingRedirect = handleIncomingRedirect\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-7f7bd67dd63b138d901e04c1d625d32a683032a915146513473d2db88b504be198e8e48950036ce8f60914568d54a4d2d0fc43f2a3720607d5afb883bd5f3f99",
            "file": "src/app/guards/auth.guard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tryToRecoverSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivateChild, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {from, map, tap, switchMap, Observable, withLatestFrom} from 'rxjs';\nimport {getDefaultSession} from '@inrupt/solid-client-authn-browser';\nimport {Store} from \"@ngrx/store\";\nimport {CoreActions} from \"../state/actions\";\nimport {bothEndsLoggedIn, loggedInStatus} from \"../state/selectors\"\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivateChild {\n\n  constructor(\n    private router: Router,\n    private store: Store,\n  ) {}\n\n  canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    return from(this.tryToRecoverSession()).pipe(\n      withLatestFrom(this.store.select(loggedInStatus)),\n      tap(([recoveredStatus, loggedInStatus]) => {\n        // dispatching while both false will result in setting loginKnown in the reducer\n        if(!(recoveredStatus && loggedInStatus)) {\n          this.store.dispatch(CoreActions.loginStatusChanged({loggedIn: recoveredStatus}));\n        }}\n      ),\n      switchMap(() => this.store.select(bothEndsLoggedIn)),\n      map((bothEndsLoggedIn) => bothEndsLoggedIn || this.router.parseUrl('start'))\n    );\n  }\n\n  private async tryToRecoverSession(): Promise<boolean> {\n    const session = getDefaultSession();\n\n    if (!session.info.isLoggedIn) {\n      // if session can be restored it will redirect to oidcIssuer, which will return back to `/redirect`\n      await session.handleIncomingRedirect({restorePreviousSession: true});\n    }\n    return session.info.isLoggedIn\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "StartGuard",
            "id": "injectable-StartGuard-6fc6672dccc8a055941d9467f459d53e59438977569f35c4b8cdf5b919b469622fa076975516b9488efffc1bfd081f6fd47e9746ab8a03133dc8b127eb2a221d",
            "file": "src/app/guards/start.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateChild, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable, filter, switchMap } from 'rxjs';\nimport {Store} from \"@ngrx/store\";\nimport {loginKnown, loggedInStatus, requestedPath, serverLoggedInStatus, redirectUrl} from \"../state/selectors\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StartGuard implements CanActivateChild {\n\n  constructor(\n    private router: Router,\n    private store: Store,\n  ) {\n    this.store.select(loginKnown).pipe(\n      filter((loginKnown: boolean) => !loginKnown)\n    ).subscribe(() => this.router.navigateByUrl('/dashboard'));\n\n    this.store.select(loginKnown).pipe(\n      filter((loginKnown: boolean) => loginKnown),\n      switchMap(() => this.store.select(loggedInStatus)),\n      filter((loggedIn: boolean) => !loggedIn),\n    ).subscribe(() => this.router.navigateByUrl('/login'));\n\n    this.store.select(loginKnown).pipe(\n      filter((loginKnown: boolean) => loginKnown),\n      switchMap(() => this.store.select(loggedInStatus)),\n      filter((loggedIn: boolean) => loggedIn),\n      switchMap(() => this.store.select(serverLoggedInStatus)),\n      filter((serverLogggedIn: boolean) => !serverLogggedIn),\n      switchMap(() => this.store.select(redirectUrl)),\n      filter((redirectUrl) => !!redirectUrl),\n    ).subscribe(() => this.router.navigateByUrl('/connect'));\n\n    this.store.select(loginKnown).pipe(\n      filter((loginKnown: boolean) => loginKnown),\n      switchMap(() => this.store.select(loggedInStatus)),\n      filter((loggedIn: boolean) => loggedIn),\n      switchMap(() => this.store.select(serverLoggedInStatus)),\n      filter((serverLogggedIn: boolean) => serverLogggedIn),\n      switchMap(() => this.store.select(requestedPath)),\n    ).subscribe((requestedPath) => this.router.navigateByUrl(requestedPath));\n  }\n\n  canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return true\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-3b20071a532965d3f158af0fcc00f84f54e6892b055d0047c9f405c68e294cf65e3f3c0fb64c25b4f3957017929924cfafbc1f9826d0c0e5d9fa1081b789e84a",
            "file": "src/app/interceptors/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse,\n  HttpEventType\n} from '@angular/common/http';\nimport { Observable, tap} from 'rxjs';\nimport { CoreActions } from '../state/actions';\nimport { Store } from '@ngrx/store';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(\n    private store: Store\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      tap((event: HttpEvent<any>) => {\n        // Ignore the outgoing requests\n        if (event.type === HttpEventType.Sent) return;\n\n        event = event as HttpResponse<unknown>;\n        console.log(event.url);\n\n        if (event instanceof HttpResponse && event.status === 401) {\n          console.log('[Auth Interceptor] Received 401 response - setting login status to false')\n          this.store.dispatch(CoreActions.loginStatusChanged({loggedIn: false}));\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AccessNeedViewComponent",
            "id": "component-AccessNeedViewComponent-544fa3eb51f20227c3c0ed1b16766fd211fe5a4d8b2bc5377710739e127c7d645a97f6739a024a03d1efff9e90d62a95dfea8d815a06b13f8684b9551145b87f",
            "file": "src/app/views/access-need-view/access-need-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-access-need-view",
            "styleUrls": [
                "./access-need-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./access-need-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "need",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "AccessNeed",
                    "decorators": []
                },
                {
                    "name": "registryIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "shapetree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "ShapeTree",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changed",
                    "defaultValue": "new EventEmitter<{id: IRI, access: Array<IRI>}>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "checkedAccess",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "emitUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAccess",
                    "args": [
                        {
                            "name": "access",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "access",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleNeed",
                    "args": [
                        {
                            "name": "change",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {IRI} from \"@janeirodigital/sai-api-messages\";\nimport {AccessNeed, ShapeTree} from \"../../state/models/index\";\nimport {MatSlideToggleChange} from \"@angular/material/slide-toggle\";\n\n@Component({\n  selector: 'sai-access-need-view',\n  templateUrl: './access-need-view.component.html',\n  styleUrls: ['./access-need-view.component.scss']\n})\nexport class AccessNeedViewComponent implements OnInit {\n\n  @Input() need!: AccessNeed;\n  @Input() shapetree!: ShapeTree;\n  @Input() registryIds!: string[]\n  // Toggling the full need means removing all the access\n  @Output() changed = new EventEmitter<{id: IRI, access: Array<IRI>}>();\n\n  checkedAccess: IRI[] = [];\n  constructor() { }\n\n  ngOnInit(): void {\n    this.checkedAccess = this.need.access;\n  }\n\n  toggleNeed(change: MatSlideToggleChange): void {\n    this.checkedAccess = change.checked ? this.need.access : [];\n    this.emitUpdate();\n  }\n\n  removeAccess(access: IRI): void {\n    this.checkedAccess = this.checkedAccess.filter(v => v != access);\n    this.emitUpdate();\n  }\n\n  private emitUpdate(): void {\n    this.changed.emit({id: this.need.id, access: this.checkedAccess})\n  }\n\n  public save(): void {\n\n  }\n\n  public cancel(): void {\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n#container {\n  border: solid darkgray 1px;\n}\n\n.row {\n  display: flex;\n  align-items: center;\n  * {\n    margin-left: 10px;\n  }\n}\n\nmat-chip-list {\n  display: flex;\n  justify-content: center;\n}\n\nul {\n list-style-type: none;\n  padding: 0\n}\n\n.side-by-side {\n  display: flex;\n  justify-content: space-around;\n}\n\nsection {\n  display: flex;\n  flex-direction: column;\n  //justify-content: left;\n}\n\n.buttons {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n\n  button {\n    min-width: 10%;\n  }\n}\n",
                    "styleUrl": "./access-need-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <div>\n    <mat-expansion-panel togglePosition=\"before\" [expanded]=\"true\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          {{shapetree.label}}\n        </mat-panel-title>\n        <mat-panel-description>\n          {{need.label}}\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <div class=\"side-by-side\">\n        <section class=\"registries\">\n          <h3>Registries to share from:</h3>\n          <ul>\n            <li *ngFor=\"let registry of registryIds\">\n              <mat-checkbox [id]=\"registry\" disabled checked>\n                {{registry}}<a [href]=\"registry\" target=\"_blank\">\n                <button mat-icon-button><mat-icon>open_in_new</mat-icon></button></a>\n              </mat-checkbox>\n            </li>\n          </ul>\n        </section>\n        <section class=\"access-levels\">\n          <h3>Access level to grant</h3>\n          <ul>\n            <li *ngFor=\"let access of need.access\">\n              <mat-checkbox checked disabled>\n                {{access.split(\"#\").pop()}}\n              </mat-checkbox>\n            </li>\n          </ul>\n        </section>\n      </div>\n      <div class=\"buttons\">\n        <button mat-raised-button color=\"primary\" (click)=\"save()\">Save</button>\n        <button mat-raised-button color=\"warn\" (click)=\"cancel()\">Cancel</button>\n      </div>\n    </mat-expansion-panel>\n  </div>\n</div>\n"
        },
        {
            "name": "AddSocialAgentComponent",
            "id": "component-AddSocialAgentComponent-6e3ff8f85f3e7f0642e40267b79a13456af3ad67adcfae5762038a3151e88eec0f2fd710b31464ce90c08c6009495604bb45e8625d42ed27e734e3157851006b",
            "file": "src/app/components/add-social-agent/add-social-agent.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-add-social-agent",
            "styleUrls": [
                "./add-social-agent.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-social-agent.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "webid",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Store} from \"@ngrx/store\";\nimport {IRI} from \"@janeirodigital/sai-api-messages\";\nimport {DataActions} from \"../../state/actions/application.actions\";\n\n@Component({\n  selector: 'sai-add-social-agent',\n  templateUrl: './add-social-agent.component.html',\n  styleUrls: ['./add-social-agent.component.scss']\n})\nexport class AddSocialAgentComponent implements OnInit {\n  webid: string | null = null;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private store: Store,\n  ) { }\n\n  ngOnInit(): void {\n    this.webid = this.route.snapshot.queryParamMap.get('webid')\n  }\n\n  onSubmit(data: {webid: IRI, label: string, note?: string}) {\n    const { webid: webId, label, note } = data;\n    this.store.dispatch(DataActions.addSocialAgent({webId, label, note}))\n    // TODO confirm action was successful/handle error before turning the user away\n    this.router.navigateByUrl('/dashboard');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\ndiv {\n  margin: 100px;\n}\n",
                    "styleUrl": "./add-social-agent.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div>\n  <sai-add-social-agent-form [webid]=\"this.webid\" (submit)=\"onSubmit($event)\"></sai-add-social-agent-form>\n</div>\n"
        },
        {
            "name": "AddSocialAgentFormComponent",
            "id": "component-AddSocialAgentFormComponent-0d1ab0add5dfe996959467daff06bc929712407007d827c4a7247e3cd6b27f71036f9deb0c91de7cdf744ec1235b49fd29ae2456ecf601bd6b767ecc07529233",
            "file": "src/app/views/add-social-agent-form/add-social-agent-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-add-social-agent-form",
            "styleUrls": [
                "./add-social-agent-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-social-agent-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "webid",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "IRI | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "submit",
                    "defaultValue": "new EventEmitter<{webid: IRI, label: string, note: string}>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    webid: new FormControl<IRI>(''),\n    label: new FormControl<string>(''),\n    note: new FormControl<string>(''),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport { IRI } from \"@janeirodigital/sai-api-messages\";\n\n@Component({\n  selector: 'sai-add-social-agent-form',\n  templateUrl: './add-social-agent-form.component.html',\n  styleUrls: ['./add-social-agent-form.component.scss']\n})\nexport class AddSocialAgentFormComponent implements OnInit {\n\n  @Input() webid: IRI | null = null;\n  @Output() submit = new EventEmitter<{webid: IRI, label: string, note: string}>();\n\n  form = new FormGroup({\n    webid: new FormControl<IRI>(''),\n    label: new FormControl<string>(''),\n    note: new FormControl<string>(''),\n  });\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.form.controls.webid.setValue(this.webid);\n  }\n\n  onSubmit(): void {\n    this.submit.emit({\n      webid: this.form.get('webid')?.value!,\n      label: this.form.get('label')?.value!,\n      note: this.form.get('note')?.value || '',\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\nform {\n  display: flex;\n  flex-direction: column;\n}\n",
                    "styleUrl": "./add-social-agent-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <mat-card-title>\n    <h2>Add Social Agent</h2>\n  </mat-card-title>\n  <mat-card-content>\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <mat-form-field class=\"full-width-input\">\n        <mat-label>WebId</mat-label>\n        <input matInput required formControlName=\"webid\">\n        <mat-error>WebId is required</mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"full-width-input\">\n        <mat-label>Name</mat-label>\n        <input matInput required formControlName=\"label\">\n        <mat-error>Name is required</mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"full-width-input\">\n        <mat-label>Note</mat-label>\n        <textarea matInput formControlName=\"note\"></textarea>\n      </mat-form-field>\n      <button mat-raised-button color=\"primary\">Add</button>\n    </form>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1b2e3074fb2504faeeb13db46c89eee4bb2021fd5c171428def3d6176cf109d16b5e8836dda2898c6dfdd93443bff954db842eda83257cc43c17a8c996e05220",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoggedIn",
                    "defaultValue": "this.store.select(loggedInStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "oidcIssuer",
                    "defaultValue": "this.store.select(oidcIssuer)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscription$",
                    "defaultValue": "this.swPush.subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "title",
                    "defaultValue": "'sai-web-app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "webId",
                    "defaultValue": "this.store.select(webId)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToNotifications",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {Store} from \"@ngrx/store\";\nimport {onSessionRestore} from '@inrupt/solid-client-authn-browser';\nimport {CoreActions} from \"./state/actions\";\nimport {loggedInStatus, oidcIssuer, webId} from \"./state/selectors\";\nimport {SwPush} from '@angular/service-worker';\nimport {PushService} from \"./services/push.service\";\nimport {ENV} from \"../environments/environment\";\nimport { TranslateService } from \"@ngx-translate/core\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit{\n  title = 'sai-web-app';\n  oidcIssuer = this.store.select(oidcIssuer);\n  webId = this.store.select(webId);\n  isLoggedIn = this.store.select(loggedInStatus);\n\n  subscription$ = this.swPush.subscription;\n\n  constructor(\n    private router: Router,\n    private store: Store,\n    private swPush: SwPush,\n    private push: PushService,\n    translate: TranslateService,\n  ) {\n    // TODO ensure that requestedPath gets set even if oidc session can't be restored\n    onSessionRestore((currentUrl: string) => {\n      const url = new URL(currentUrl)\n      let requestedPath = url.pathname + url.search\n      this.store.dispatch(CoreActions.pathRequested({ requestedPath }))\n    })\n\n    this.swPush.notificationClicks.subscribe(({ notification }) => {\n      this.router.navigateByUrl(`/add-social-agent?webid=${notification.data.webId}`)\n    });\n\n    // this language will be used as a fallback when a translation isn't found in the current language\n    translate.setDefaultLang('en');\n\n    // the lang to use, if the lang isn't available, it will use the current loader to get them\n    translate.use('en');\n  }\n\n  ngOnInit() {\n    // '/' doesn't trigger any guards and we want to trigger start guard\n    if (window.location.pathname === '/') {\n      this.router.navigateByUrl('/start')\n    }\n  }\n\n  async subscribeToNotifications() {\n    const subscription = await this.swPush.requestSubscription({\n      serverPublicKey: ENV.VAPID_PUBLIC_KEY\n    });\n    await this.push.subscribe(subscription)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "swPush",
                        "type": "SwPush",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "push",
                        "type": "PushService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "swPush",
                        "type": "SwPush",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "push",
                        "type": "PushService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<sai-navbar\n  [webId]=\"(webId | async)!\"\n  [isLoggedIn]=\"(isLoggedIn | async)!\"\n  [withNotificationsAction]=\"!(subscription$|async)\"\n  (notifications)=\"subscribeToNotifications()\"\n></sai-navbar>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "ApplicationsComponent",
            "id": "component-ApplicationsComponent-1a89a0793ca6f6536e00d603aa3f5f81cae16c6e7eee289e9cf4deae3fdb08ee9b1e49b2d074ca5beb0efae3ed4451821d55d8b48b7e697b82496884d0497d52",
            "file": "src/app/components/applications/applications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-applications",
            "styleUrls": [
                "./applications.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./applications.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allApps$",
                    "defaultValue": "this.store.select(selectApplications)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "currentGroup$",
                    "defaultValue": "this.store.select(selectCurrentGroup)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "currentNeeds$",
                    "defaultValue": "this.store.select(selectCurrentNeeds)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "currentShapeTrees$",
                    "defaultValue": "this.store.select(selectCurrentShapeTrees)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "requestDescriptions",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Store} from \"@ngrx/store\";\nimport {selectApplications} from 'src/app/state/selectors/application.selectors';\nimport {DataActions} from 'src/app/state/actions/application.actions';\nimport {DescActions} from \"../../state/actions/description.actions\";\nimport {selectDescriptions} from \"../../state/selectors/description.selectors\";\nimport {map} from \"rxjs\";\nimport {\n  selectCurrentGroup,\n  selectCurrentNeeds,\n  selectCurrentShapeTrees\n} from \"../../state/selectors/access-needs.selectors\";\n\n@Component({\n  selector: 'sai-applications',\n  templateUrl: './applications.component.html',\n  styleUrls: ['./applications.component.scss']\n})\nexport class ApplicationsComponent implements OnInit {\n\n  allApps$ = this.store.select(selectApplications);\n\n  currentGroup$ = this.store.select(selectCurrentGroup);\n  currentNeeds$ = this.store.select(selectCurrentNeeds);\n  currentShapeTrees$ = this.store.select(selectCurrentShapeTrees);\n\n  constructor(\n    public store: Store,\n  ) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(DataActions.applicationsPanelLoaded())\n  }\n\n  requestDescriptions(id: string): void {\n    this.store.dispatch(DescActions.descriptionsNeeded({applicationId: id}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\n  margin-bottom: 1rem;\n}\n",
                    "styleUrl": "./applications.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngFor=\"let app of allApps$ | async\">\n  <sai-app-view (click)=\"requestDescriptions(app.id)\"\n                [application]=\"app\"\n                [group]=\"currentGroup$ | async\"\n                [needs]=\"currentNeeds$ | async\"\n                [shapetrees]=\"currentShapeTrees$ | async\"\n  ></sai-app-view>\n</div>\n"
        },
        {
            "name": "AppViewComponent",
            "id": "component-AppViewComponent-28243c74d70b6869185437285a8b3f5345ae56b172df36b912244d893f15946871f5e491566b8a9ffa68c328dc312b334ec146d79ab950e1e831894041a1702f",
            "file": "src/app/views/app-view/app-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-app-view",
            "styleUrls": [
                "./app-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Application",
                    "decorators": []
                },
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "group",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "AccessNeedGroup | null",
                    "decorators": []
                },
                {
                    "name": "needs",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "AccessNeed[] | null",
                    "decorators": []
                },
                {
                    "name": "shapetrees",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ShapeTree[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<{id: IRI}>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "save",
                    "defaultValue": "new EventEmitter<{changeSet: AppChangeSet}>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "changed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "changeSet",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppChangeSet",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getShapetreesForNeed",
                    "args": [
                        {
                            "name": "need",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ShapeTree",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "need",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDiscard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleNeedChange",
                    "args": [
                        {
                            "name": "changed",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changed",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Application, IRI} from \"@janeirodigital/sai-api-messages\";\n\nimport {AccessNeed, AccessNeedGroup, ShapeTree} from \"../../state/models\";\n\nexport type AppChangeSet = {[AccessNeedId: IRI]: IRI[]};\n\n@Component({\n  selector: 'sai-app-view',\n  templateUrl: './app-view.component.html',\n  styleUrls: ['./app-view.component.scss']\n})\nexport class AppViewComponent implements OnInit {\n\n  @Input() expanded = false;\n  @Input() application!: Application;\n  @Input() group: AccessNeedGroup | null = null;\n  @Input() needs: AccessNeed[] | null = null;\n  @Input() shapetrees: ShapeTree[] | null = null;\n\n  // TODO prompt for confirmation\n  @Output() remove = new EventEmitter<{id: IRI}>();\n  @Output() save = new EventEmitter<{changeSet: AppChangeSet}>();\n\n  public changeSet: AppChangeSet = {};\n  public changed = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  handleNeedChange(changed: {id: IRI, access: IRI[]}): void {\n    this.changed = true;\n    this.changeSet[changed.id] = changed.access;\n  }\n\n  handleDiscard(): void {\n    this.changed = false;\n    this.expanded = false;\n    this.changeSet = {};\n  }\n\n  submit(): void {\n    // TODO\n  }\n\n  getShapetreesForNeed(need: AccessNeed): ShapeTree {\n    const match = this.shapetrees!.filter(tree => need.shapeTree.includes(tree.id)).pop()!;\n    return match;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.access-label {\n  font-size: 0.8em;\n  color: gray;\n  font-style: italic;\n}\n\n.centered {\n  display: flex;\n  justify-content: center;\n}\n",
                    "styleUrl": "./app-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<mat-card>\n  <mat-card-header>\n    <img mat-card-avatar class=\"header-image\" alt=\"application logo\" src=\"{{application.logo}}\">\n    <mat-card-title>{{application.name}}</mat-card-title>\n    <mat-card-subtitle>Last updated on: {{(application.lastUpdateDate || application.authorizationDate) | date}}</mat-card-subtitle>\n    <mat-card-actions align=\"end\">\n      <button mat-button *ngIf=\"!expanded\" (click)=\"expanded = !expanded\">Edit</button>\n      <button mat-button *ngIf=\"expanded\" [disabled]=\"!changed\" (click)=\"submit()\">Save</button>\n      <button mat-button *ngIf=\"expanded\" (click)=\"handleDiscard()\">\n        <span *ngIf=\"changed\">Discard</span>\n        <span *ngIf=\"!changed\">Cancel</span>\n      </button>\n\n      <button mat-button color=\"warn\" (click)=\"remove.emit({id: application.id})\">Remove</button>\n    </mat-card-actions>\n  </mat-card-header>\n  <mat-card-content *ngIf=\"expanded && group\">\n    <p>{{application.name}} has the following access needs</p>\n    <div>\n      <h3>{{group.label}}</h3>\n      <p>{{group.description}}</p>\n    </div>\n    <ng-container *ngIf=\"needs; else loadingNeeds\">\n        <sai-access-need-view *ngFor=\"let need of needs\" [need]=\"need\" [shapetree]=\"getShapetreesForNeed(need)\" (changed)=\"handleNeedChange($event)\"></sai-access-need-view>\n    </ng-container>\n  </mat-card-content>\n</mat-card>\n\n<ng-template #loadingNeeds>\n  <div class=\"centered\">\n    <mat-spinner></mat-spinner>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "AuthorizationComponent",
            "id": "component-AuthorizationComponent-71fdee6ebf608d56812660ea28848523ae74c88ceaca79e872229f3d0c58833610c84c9a8835cb1b82c73cf3ffb6f3d9acc4a818c53c0c1a6e60e4950e1fdb2a",
            "file": "src/app/components/authorization/authorization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-authorization",
            "styleUrls": [
                "./authorization.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./authorization.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authorizationData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthorizationData",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "authorizationData$",
                    "defaultValue": "this.store.select(selectDescriptions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "clientId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRI",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "clientIdInput",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTreeNestedDataSource<AccessNeed>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "hasChild",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "treeControl",
                    "defaultValue": "new NestedTreeControl<AccessNeed>(node => node.children)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "createDataAuthorizations",
                    "args": [
                        {
                            "name": "accessNeed",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DataAuthorization[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accessNeed",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parent",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchApplication",
                    "args": [
                        {
                            "name": "clientId",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clientId",
                            "type": "IRI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScope",
                    "args": [
                        {
                            "name": "accessNeed",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accessNeed",
                            "type": "AccessNeed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {NestedTreeControl} from '@angular/cdk/tree';\nimport {Component, OnInit} from '@angular/core';\nimport {MatTreeNestedDataSource} from '@angular/material/tree';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {AccessNeed, AuthorizationData, DataAuthorization, IRI} from '@janeirodigital/sai-api-messages';\nimport {Store} from \"@ngrx/store\";\nimport {DescActions} from 'src/app/state/actions/description.actions';\nimport {selectDescriptions} from 'src/app/state/selectors/description.selectors'\nimport {DataActions} from 'src/app/state/actions/application.actions';\n\n@Component({\n  selector: 'sai-authorization',\n  templateUrl: './authorization.component.html',\n  styleUrls: ['./authorization.component.scss']\n})\nexport class AuthorizationComponent implements OnInit {\n  clientId?: IRI;\n  clientIdInput: string = '';\n\n  authorizationData$ = this.store.select(selectDescriptions);\n  authorizationData?: AuthorizationData\n\n  treeControl = new NestedTreeControl<AccessNeed>(node => node.children);\n  dataSource = new MatTreeNestedDataSource<AccessNeed>();\n\n  hasChild = (_: number, node: AccessNeed) => !!node.children && node.children.length > 0;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private store: Store,\n    ) {\n      this.authorizationData$.subscribe(data => {\n        if (data) {\n          this.authorizationData = data\n          this.dataSource.data = data.accessNeedGroup.needs;\n        }\n      });\n    }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      const clientId = params['client_id'];\n\n      if (clientId) {\n        this.clientId = clientId;\n        this.fetchApplication(clientId);\n      }\n    })\n  }\n\n  getScope(accessNeed: AccessNeed): string {\n    if (accessNeed.parent) return 'Inherited'\n    // TODO based on user input\n    return 'All'\n  }\n\n  createDataAuthorizations(accessNeed: AccessNeed, parent?: AccessNeed): DataAuthorization[] {\n    const dataAuthorization = {\n      accessNeed: accessNeed.id,\n      scope: this.getScope(accessNeed), // TODO\n    } as DataAuthorization\n    let children: DataAuthorization[] = []\n    if (accessNeed.children) {\n      children = accessNeed.children.flatMap(childAccessNeed => this.createDataAuthorizations(childAccessNeed, accessNeed))\n    }\n\n    return [ dataAuthorization, ...children]\n  }\n\n  fetchApplication(clientId: IRI): void {\n      this.store.dispatch(DescActions.descriptionsNeeded({\n        applicationId: clientId\n      }));\n  }\n\n  onSubmit() {\n    if (this.authorizationData) {\n      const dataAuthorizations: DataAuthorization[] = []\n\n      this.store.dispatch(DataActions.authorizeApplication({\n        authorization: {\n          grantee: this.authorizationData.id,\n          accessNeedGroup: this.authorizationData.accessNeedGroup.id,\n          dataAuthorizations: this.authorizationData.accessNeedGroup.needs.flatMap(accessNeed => this.createDataAuthorizations(accessNeed))\n        }\n      }));\n      // TODO: show spinner\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\n  margin-bottom: 1rem;\n}\n\n.example-tree ul,\n.example-tree li {\n  margin-top: 0;\n  margin-bottom: 0;\n  list-style-type: none;\n}\n\n/*\n * This padding sets alignment of the nested nodes.\n */\n.example-tree .mat-nested-tree-node div[role=group] {\n  padding-left: 40px;\n}\n\n/*\n * Padding for leaf nodes.\n * Leaf nodes need to have padding so as to align with other non-leaf nodes\n * under the same parent.\n */\n.example-tree div[role=group] > .mat-tree-node {\n  padding-left: 40px;\n}\n\n.form-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n",
                    "styleUrl": "./authorization.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div *ngIf=\"clientId; else noClientId\">\n  <h1>{{ (authorizationData$ | async)?.accessNeedGroup?.label }}</h1>\n  <h2>{{ (authorizationData$ | async)?.accessNeedGroup?.description }}</h2>\n\n  <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"example-tree\">\n    <!-- This is the tree node template for leaf nodes -->\n    <!-- There is inline padding applied to this node using styles.\n      This padding value depends on the mat-icon-button width. -->\n    <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle>\n      <mat-card>\n        <mat-card-title>{{node.shapeTree.label}}</mat-card-title>\n        <mat-card-content>{{node.label}}</mat-card-content>\n      </mat-card>\n    </mat-tree-node>\n    <!-- This is the tree node template for expandable nodes -->\n    <mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChild\">\n      <div class=\"mat-tree-node\">\n        <mat-card>\n          <mat-card-title>{{node.shapeTree.label}}</mat-card-title>\n          <mat-card-content>{{node.label}}</mat-card-content>\n        </mat-card>\n      </div>\n      <!-- There is inline padding applied to this div using styles.\n          This padding value depends on the mat-icon-button width.  -->\n      <div class=\"mat-nested-tree-node\"\n           role=\"group\">\n        <ng-container matTreeNodeOutlet></ng-container>\n      </div>\n    </mat-nested-tree-node>\n  </mat-tree>\n  <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\">Authorize</button>\n</div>\n\n<!--<div>-->\n<!--  <sai-app-view expanded=\"true\" [application]=\"applications$ | async\">-->\n\n<!--  </sai-app-view>-->\n\n<!--</div>-->\n\n\n<ng-template #noClientId>\n  <div class=\"form-container\">\n    <h3 class=\"missing-client-warn\">Please provide a client id</h3>\n    <form [routerLink]=\"'/authorize'\" [queryParams]=\"{client_id: clientIdInput}\">\n      <mat-form-field class=\"full-width-input\">\n        <mat-label>Application ID</mat-label>\n        <input matInput required [(ngModel)]=\"clientIdInput\" [ngModelOptions]=\"{standalone: true}\">\n        <mat-error>Application ID is required</mat-error>\n      </mat-form-field>\n      <button mat-raised-button>Search</button>\n    </form>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ConnectServerComponent",
            "id": "component-ConnectServerComponent-aaecc6a91506e420216178cf6d82b8deb600a0849c6a253531d5300b033537d2c74b9269e45b011aabd6d7f2fa0c1d097e2271bb8bca35c4edcd6de85840b7dd",
            "file": "src/app/components/connect-server/connect-server.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-connect-server",
            "styleUrls": [
                "./connect-server.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./connect-server.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "loginServer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store'\nimport { CoreActions } from 'src/app/state/actions';\n\n@Component({\n  selector: 'sai-connect-server',\n  templateUrl: './connect-server.component.html',\n  styleUrls: ['./connect-server.component.scss']\n})\nexport class ConnectServerComponent implements OnInit {\n\n  constructor(\n    private store: Store,\n  ) {}\n\n  ngOnInit(): void {\n  }\n\n  loginServer() {\n    this.store.dispatch(CoreActions.serverLoginRequested())\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\ndiv {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 100px;\n\n  * {\n    margin: 25px;\n  }\n}\n",
                    "styleUrl": "./connect-server.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div>\n  <h1>Authorize server to use your account</h1>\n  <p>Solid Authorization Server needs your approval to manage your Solid data and services.</p>\n  <p>Click the button below to authorize.</p>\n  <button mat-raised-button (click)=\"loginServer()\">Authorize</button>\n</div>\n\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-d22c21cb66a8fe171db7c62d47f7b7857612d9017b9d4f8464c672450c66a1ad465a95e8e58298699f1aa32b9a8d15312d85ed1f6f4d30dd170326c509fb7909",
            "file": "src/app/components/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'sai-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.container {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.section {\n  min-height: 100px;\n  min-width: 100px;\n  padding: 100px;\n  margin: 50px;\n  border: #333333;\n}\n\nbutton {\n  min-height: 100px;\n  min-width: 100px;\n}\n\nmat-icon {\n  margin-top: 30px;\n  min-width: 4em;\n  min-height: 2em;\n  font-size: 4em;\n}\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <div class=\"section\">\n    <button mat-raised-button routerLink=\"/authorize\">\n      <mat-icon fontIcon=\"web_asset\"></mat-icon>\n      <br>Add Application\n    </button>\n  </div>\n  <div class=\"section\">\n    <button mat-raised-button routerLink=\"/add-social-agent\">\n      <mat-icon fontIcon=\"person\"></mat-icon>\n      <br>Add Social Agent\n    </button>\n  </div>\n</div>\n\n"
        },
        {
            "name": "DataComponent",
            "id": "component-DataComponent-867e9f23875c7acd5ca7291315676ff2c1eb3411ac82605ecf3f0816603da48a6ad2906559f0aa76413b074587fe715943441e5b7cc3f0f80301ed9ed3c55cf5",
            "file": "src/app/components/data/data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-data",
            "styleUrls": [
                "./data.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registries$",
                    "defaultValue": "this.store.select(selectDataRegistries)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DataRegistry[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Store} from \"@ngrx/store\";\nimport {DataActions} from 'src/app/state/actions/application.actions';\nimport {selectDataRegistries} from 'src/app/state/selectors/data.selectors';\nimport {Observable} from \"rxjs\";\nimport {DataRegistry} from \"@janeirodigital/sai-api-messages\";\n\n@Component({\n  selector: 'sai-data',\n  templateUrl: './data.component.html',\n  styleUrls: ['./data.component.scss']\n})\nexport class DataComponent implements OnInit {\n\n  registries$: Observable<DataRegistry[]> = this.store.select(selectDataRegistries);\n\n  constructor(\n    private store: Store,\n  ) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(DataActions.dataRegistriesNeeded())\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\n  margin: 1rem;\n}\n",
                    "styleUrl": "./data.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngFor=\"let registry of registries$ | async\">\n  <h3>{{registry.id}}</h3>\n  <mat-card *ngFor=\"let registration of registry.registrations\">\n    <mat-card-title>{{registration.label}}</mat-card-title>\n    <mat-card-content>{{registration.count}}</mat-card-content>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0cd94fbc94a83702e45bf987cb3b3f9074d69cd27e6ca2e4fbac0dc5b5047bd4dc3a9ce8a77f6bd9ab7ae3e6ca8e49b34bed529ca0da0fa428fec544a0324870",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "InstanceSelectorComponent",
            "id": "component-InstanceSelectorComponent-910ed92506a54bb04120e5579d7e3807d00d527e39afa5eb9696063ecfd38106ff96191a2cb0d3cc105361ae3c6190f27f8788ec19fd2e89d4e32c436507546a",
            "file": "src/app/views/instance-selector/instance-selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-instance-selector",
            "styleUrls": [
                "./instance-selector.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./instance-selector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "registryIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<string[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectAll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "handleToggle",
                    "args": [
                        {
                            "name": "change",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>While this component is intended to display up-to individual instances of data, for now it displays\nup-to the data registry because sai-js/service does not expose more fine-grained data</p>\n",
            "rawdescription": "\n\nWhile this component is intended to display up-to individual instances of data, for now it displays\nup-to the data registry because sai-js/service does not expose more fine-grained data\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Instance} from \"../../state/models\";\nimport {MatCheckboxChange} from \"@angular/material/checkbox\";\n\n/**\n * While this component is intended to display up-to individual instances of data, for now it displays\n * up-to the data registry because sai-js/service does not expose more fine-grained data\n */\n@Component({\n  selector: 'sai-instance-selector',\n  templateUrl: './instance-selector.component.html',\n  styleUrls: ['./instance-selector.component.scss']\n})\nexport class InstanceSelectorComponent implements OnInit {\n\n  selectAll = false;\n\n  // @Input() instances!: Instance[];\n  @Input() registryIds!: string[];\n\n  // List of the selected instances ids\n  @Output() selected = new EventEmitter<string[]>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  handleToggle(change: MatCheckboxChange): void {\n    const id = change.source.id;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.container {\n  border: solid darkgray 1px;\n  padding: 5px;\n}\n\nul {\n  list-style-type: none;\n}\n\nmat-radio-group {\n  display: flex;\n  gap: 10px 10px;\n}\n\n\ndiv > mat-checkbox,\ndiv > ul\nli {\n  padding-left: 50px;\n}\n",
                    "styleUrl": "./instance-selector.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n\n<div class=\"container\">\n  <p>Select the data registries you want to share from</p>\n  <div>\n  <mat-checkbox [(ngModel)]=\"selectAll\" [ngModelOptions]=\"{standalone: true}\">Select all</mat-checkbox>\n  <ul>\n    <li *ngFor=\"let instance of registryIds\">\n      <mat-checkbox [id]=\"instance\" [disabled]=\"selectAll\" [checked]=\"selectAll\" (change)=\"handleToggle($event)\">\n        {{instance}}<a [href]=\"instance\" target=\"_blank\">\n        <button mat-icon-button><mat-icon>open_in_new</mat-icon></button></a>\n      </mat-checkbox>\n    </li>\n  </ul>\n</div>\n"
        },
        {
            "name": "LanguageComponent",
            "id": "component-LanguageComponent-b87396a702a6650847319fc022c31e0f7c68cc5ecd4a2ad019e5673155ad66de5ac7f4161bb5d1323f392553cc46ec7cf730d59d62e6058453814e7c776ba030",
            "file": "src/app/views/language/language.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-language",
            "styleUrls": [
                "./language.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./language.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "languages",
                    "defaultValue": "Languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "translate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "languageValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "languageValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, Input} from '@angular/core';\nimport {Languages} from \"../../languages\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {CORE_LANGUAGE_KEY, initialState, preferLanguage} from \"../../state/reducers/core.reducer\";\n\n@Component({\n  selector: 'sai-language',\n  templateUrl: './language.component.html',\n  styleUrls: ['./language.component.scss']\n})\nexport class LanguageComponent implements OnInit {\n\n  @Input() languages = Languages;\n\n  constructor(public translate: TranslateService) {\n    const browserLang: string = initialState.language;\n    translate.use(browserLang.match(/en|es/) ? browserLang : 'en');\n  }\n\n  ngOnInit(): void {\n  }\n\n  onChange(languageValue: any) {\n    //Set user prefer language\n    const languageSelectedValue: string = languageValue.target.value;\n    this.translate.use(languageSelectedValue);\n    //Set localStorage with user prefer language\n    preferLanguage.language = languageSelectedValue;\n    window.localStorage.setItem(CORE_LANGUAGE_KEY, JSON.stringify(preferLanguage));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".languageSelector {\n  display: flex;\n  border: 1px solid #333;\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.15) 0 0 0 1px inset;\n  padding: 5px;\n  width: 130px;\n  background: #fff;\n  justify-content: flex-end;\n\n  .mat-icon {\n    color: #000;\n  }\n\n  select {\n    border: none;\n    width: 80%;\n    &:focus-visible {\n      outline: none;\n    }\n    option {\n      display: flex;\n      justify-content: center;\n    }\n  }\n}\n",
                    "styleUrl": "./language.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container>\n  <div class=\"languageSelector\">\n    <mat-icon matListIcon>language</mat-icon>\n    <select #langSelect (change)=\"onChange($event)\">\n      <option *ngFor=\"let language of languages\" [value]=\"language.id\" [selected]=\"language.id === translate.currentLang\">{{ language.label }}</option>\n    </select>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-c5f839faeb90dc94c8dc2a030ae7f18ef056ecceafe80f8fed3869eebc822774d38775fc92620c58ef0c44cd8a0798f1e6233966959546d54b559a8d7fdd42fa",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultIdP",
                    "defaultValue": "ENV.DEFAULT_IDP",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "loginForm",
                    "defaultValue": "new UntypedFormGroup({\n    issuer: new UntypedFormControl(''),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\nimport {Store} from \"@ngrx/store\";\nimport {CoreActions} from \"../../state/actions\";\nimport {ENV} from \"../../../environments/environment\";\n@Component({\n  selector: 'sai-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  defaultIdP = ENV.DEFAULT_IDP;\n\n  loginForm = new UntypedFormGroup({\n    issuer: new UntypedFormControl(''),\n  })\n\n  constructor(\n    private store: Store,\n  ) {}\n\n  ngOnInit(): void {}\n\n  onSubmit() {\n    const oidcIssuer = this.loginForm.get('issuer')!.value || ENV.DEFAULT_IDP;\n    this.store.dispatch(CoreActions.loginRequested({ oidcIssuer }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\nmat-card {\n  max-width: 400px;\n  margin: 2em auto;\n  text-align: center;\n}\n\nmat-form-field {\n  display: block;\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <mat-card-content>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n      <h2>{{'LOGIN.TITLE' | translate}}</h2>\n      <mat-form-field class=\"full-width-input\">\n        <input matInput [placeholder]=\"defaultIdP\" formControlName=\"issuer\">\n        <mat-error>Please provide a valid Solid Provider</mat-error>\n      </mat-form-field>\n      <button mat-raised-button color=\"primary\">{{'LOGIN.CTA' | translate}}</button>\n    </form>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-1e02868212d9ec9ea9fb65a98ae531f613586b5dd7701476a8385cb658e8bb10ced3b383c624e9e638fed8206174daf98afd18c5cf2ba3a6e74faeef214d3698",
            "file": "src/app/views/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-navbar",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "languageSelect",
                    "defaultValue": "Languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "webId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "withNotificationsAction",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "notifications",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {Router} from \"@angular/router\";\nimport { Languages } from \"../../languages\";\n\n@Component({\n  selector: 'sai-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  @Input() webId!: string | null;\n  @Input() isLoggedIn : boolean = false;\n  @Input() withNotificationsAction: boolean = true;\n  @Input() languageSelect = Languages;\n  \n  @Output() notifications = new EventEmitter();\n\n\n  constructor(\n    public router: Router,\n  ) {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h6 {\n  font-size: 0.7rem;\n  margin-left: 15px;\n}\n\np {\n  font-size: 0.7rem;\n  margin: 0 auto;\n}\n\n.spacer {\n  flex: 1 1 auto;\n}\n\n.languageWrapper {\n  flex: 1 1;\n}\n",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar color=\"primary\">\n  <h3>Solid Authorization Agent</h3>\n  <div *ngIf=\"isLoggedIn\">\n    <button mat-button routerLink=\"/dashboard\">\n      <mat-icon fontIcon=\"home\"></mat-icon>\n    </button>\n    <button mat-button routerLink=\"/applications\">Applications</button>\n    <button mat-button routerLink=\"/social-agents\">Social Agents</button>\n    <button mat-button routerLink=\"/data\">Data</button>\n    <button mat-raised-button color=\"accent\" *ngIf=\"withNotificationsAction\" (click)=\"notifications.emit()\">\n      <mat-icon>notification_important</mat-icon>\n      Enable Notifications\n    </button>\n  </div>\n  <span class=\"spacer\"></span>\n  <span>\n  \t<sai-language\n  \t  [languages]=\"languageSelect\">\n  \t</sai-language>\n  </span>\n</mat-toolbar>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-432c9ae0bcf6e2e1f46701f7565a67376cb10145b7d049c5fe930cf8f075c6e02e24151589750b18cbaa8266f7c61393b95c4d833fbfd71ee228904aa014349f",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RedirectHandlerComponent",
            "id": "component-RedirectHandlerComponent-1f83c6d2a83e3b2899daaa155ce6fae15fa626ac9e233e13ca5df3577da214407b3f4676ceb8a2c2325ed1dfe88ae2f9c76bd28657e2035d880c10e50178dae8",
            "file": "src/app/components/redirect-handler/redirect-handler.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-redirect-handler",
            "styleUrls": [
                "./redirect-handler.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./redirect-handler.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {Store} from \"@ngrx/store\";\nimport {CoreActions} from \"../../state/actions\";\n\n@Component({\n  selector: 'sai-redirect-handler',\n  templateUrl: './redirect-handler.component.html',\n  styleUrls: ['./redirect-handler.component.scss']\n})\nexport class RedirectHandlerComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n    private store: Store,\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    this.store.dispatch(CoreActions.incomingLoginRedirect({url: window.location.href}));\n    this.router.navigateByUrl('/start')\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./redirect-handler.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<!-- TODO show a spinner or something with a ...loading... effect -->\n"
        },
        {
            "name": "SocialAgentsComponent",
            "id": "component-SocialAgentsComponent-94285040b90ef5a5e2cd80ec3a9afe209c0adac97c867f2daf66012bb4f0258e7032c1d9b11a43bf75807d765a3d7ba0f7830eea101372c5de6e03b1c75d624f",
            "file": "src/app/components/social-agents/social-agents.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-social-agents",
            "styleUrls": [
                "./social-agents.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./social-agents.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "socialAgents$",
                    "defaultValue": "this.store.select(selectSocialAgents)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SocialAgent[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from \"@ngrx/store\";\nimport { selectSocialAgents } from 'src/app/state/selectors/social-agent.selectors';\nimport { DataActions } from 'src/app/state/actions/application.actions';\nimport {Observable} from \"rxjs\";\nimport {SocialAgent} from \"@janeirodigital/sai-api-messages\";\n\n@Component({\n  selector: 'sai-social-agents',\n  templateUrl: './social-agents.component.html',\n  styleUrls: ['./social-agents.component.scss']\n})\nexport class SocialAgentsComponent implements OnInit {\n\n  socialAgents$: Observable<SocialAgent[]> = this.store.select(selectSocialAgents);\n\n  constructor(\n    private store: Store,\n  ) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(DataActions.socialAgentsPanelLoaded())\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\n  margin: 1rem;\n}\n",
                    "styleUrl": "./social-agents.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card *ngFor=\"let agent of socialAgents$ | async\">\n  <mat-card-header>\n    <mat-card-title>{{agent.label}} <a mat-icon-button target=\"_blank\" href=\"{{agent.id}}\"><mat-icon>link</mat-icon></a></mat-card-title>\n    <mat-card-subtitle>Authorized on {{agent.authorizationDate | date}}</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <p>{{agent.label}}</p>\n    <p>{{agent.note}}</p>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "StartComponent",
            "id": "component-StartComponent-24683ffef07600a6d401995007eee21ba37f46c016f710dc50c5b3a5c211fa9d656e42d42dc24e34baad48fa0a529198fb2bec15c5be75b90d9a0b624ccf429a",
            "file": "src/app/components/start/start.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-start",
            "styleUrls": [
                "./start.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./start.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sai-start',\n  templateUrl: './start.component.html',\n  styleUrls: ['./start.component.scss']\n})\nexport class StartComponent implements OnInit {\n\n  constructor(\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-spinner {\n  margin: 2rem auto;\n}\n",
                    "styleUrl": "./start.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-spinner></mat-spinner>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-66480a9e0b601c1981d8f67ce515229cf9a7c9fe719d025e68e9f2f22656df7d94035895c1a529a8690ca81bfc234f0b26d610d3e7cad4a9fb6dbad632136c7d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {HTTP_INTERCEPTORS, HttpClient, HttpClientModule} from \"@angular/common/http\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {NavbarComponent} from \"./views/navbar/navbar.component\";\nimport {LoginComponent} from \"./components/login/login.component\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatListModule} from '@angular/material/list';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {DashboardComponent} from './components/dashboard/dashboard.component';\nimport {MatExpansionModule} from \"@angular/material/expansion\";\nimport {StoreModule} from '@ngrx/store';\nimport {metaReducers, reducers} from './state/reducers';\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\nimport {ENV} from '../environments/environment';\nimport {EffectsModule} from '@ngrx/effects';\nimport {AuthInterceptor} from \"./interceptors/auth.interceptor\";\nimport {Effects} from \"./state/effects\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {RedirectHandlerComponent} from './components/redirect-handler/redirect-handler.component';\nimport {SolidClient} from \"./utils/solid-client\";\nimport {AuthorizationComponent} from './components/authorization/authorization.component';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {StartComponent} from './components/start/start.component';\nimport {ConnectServerComponent} from './components/connect-server/connect-server.component';\nimport {ServiceWorkerModule} from '@angular/service-worker';\nimport {AddSocialAgentComponent} from './components/add-social-agent/add-social-agent.component';\nimport {SocialAgentsComponent} from './components/social-agents/social-agents.component';\nimport {ApplicationsComponent} from './components/applications/applications.component';\nimport {DataComponent} from './components/data/data.component';\nimport {LanguageComponent} from './views/language/language.component';\nimport {AppViewComponent} from './views/app-view/app-view.component';\nimport {MatChipsModule} from \"@angular/material/chips\";\nimport {AccessNeedViewComponent} from './views/access-need-view/access-need-view.component';\nimport {MatSlideToggleModule} from \"@angular/material/slide-toggle\";\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\nimport {DemoMaterialModule} from \"../material-module\";\nimport {AddSocialAgentFormComponent} from './views/add-social-agent-form/add-social-agent-form.component';\nimport {InstanceSelectorComponent} from './views/instance-selector/instance-selector.component';\nimport {MatCheckboxModule} from \"@angular/material/checkbox\";\nimport {MatRadioModule} from \"@angular/material/radio\";\n\nimport {TranslateLoader, TranslateModule} from \"@ngx-translate/core\";\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    DashboardComponent,\n    RedirectHandlerComponent,\n    AuthorizationComponent,\n    StartComponent,\n    ConnectServerComponent,\n    AddSocialAgentComponent,\n    SocialAgentsComponent,\n    ApplicationsComponent,\n    DataComponent,\n    LanguageComponent,\n    AppViewComponent,\n    AccessNeedViewComponent,\n    AddSocialAgentFormComponent,\n    InstanceSelectorComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatListModule,\n    MatTreeModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatExpansionModule,\n    MatChipsModule,\n    MatProgressSpinnerModule,\n    FormsModule,\n    MatCheckboxModule,\n    MatRadioModule,\n    MatSlideToggleModule,\n    MatTooltipModule,\n\n    StoreModule.forRoot(reducers, {\n      metaReducers\n    }),\n    StoreDevtoolsModule.instrument({maxAge: 25, logOnly: ENV.production}),\n    EffectsModule.forRoot(Effects),\n\n    ServiceWorkerModule.register('ngsw-worker.js', {\n      enabled: ENV.production,\n      // Register the ServiceWorker as soon as the application is stable\n      // or after 30 seconds (whichever comes first).\n      registrationStrategy: 'registerWhenStable:30000'\n    }),\n\n    TranslateModule.forRoot({\n      defaultLanguage: 'en',\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    }),\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true},\n    SolidClient,\n  ],\n  bootstrap: [AppComponent],\n  exports: [BrowserModule, DemoMaterialModule],\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "SolidClient"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccessNeedViewComponent"
                        },
                        {
                            "name": "AddSocialAgentComponent"
                        },
                        {
                            "name": "AddSocialAgentFormComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "AppViewComponent"
                        },
                        {
                            "name": "ApplicationsComponent"
                        },
                        {
                            "name": "AuthorizationComponent"
                        },
                        {
                            "name": "ConnectServerComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "DataComponent"
                        },
                        {
                            "name": "InstanceSelectorComponent"
                        },
                        {
                            "name": "LanguageComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "RedirectHandlerComponent"
                        },
                        {
                            "name": "SocialAgentsComponent"
                        },
                        {
                            "name": "StartComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DemoMaterialModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-7a42e70b73f9f4eceb78c4c9b6b2d26685b91ac4a172da58b799e1db07250170dd27fe359a287a3ea461dea881a49c5501e69fe9f9ad682a13a794a83b010b6a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {StartComponent} from \"./components/start/start.component\";\nimport {LoginComponent} from \"./components/login/login.component\";\nimport {ConnectServerComponent} from \"./components/connect-server/connect-server.component\";\nimport {DashboardComponent} from \"./components/dashboard/dashboard.component\";\nimport {StartGuard} from \"./guards/start.guard\";\nimport {AuthGuard} from \"./guards/auth.guard.service\";\nimport {RedirectHandlerComponent} from \"./components/redirect-handler/redirect-handler.component\";\nimport {AuthorizationComponent} from \"./components/authorization/authorization.component\";\nimport {AddSocialAgentComponent} from \"./components/add-social-agent/add-social-agent.component\";\nimport { SocialAgentsComponent } from './components/social-agents/social-agents.component';\nimport { ApplicationsComponent } from './components/applications/applications.component';\nimport { DataComponent } from './components/data/data.component';\nimport {TranslateModule} from \"@ngx-translate/core\";\n\nconst routes: Routes = [\n  {\n    path: '',\n    canActivateChild: [StartGuard] ,\n    children: [\n      {\n        path: 'start', component: StartComponent,\n      },\n      {\n        path: 'login', component: LoginComponent,\n      },\n      {\n        path: 'redirect', component: RedirectHandlerComponent,\n      },\n      {\n        path: 'connect', component: ConnectServerComponent,\n      },\n\n    ]\n  },\n  {\n    path: '',\n    canActivateChild: [AuthGuard] ,\n    children: [\n      {\n        path: 'dashboard', component: DashboardComponent,\n      },\n      {\n        path: 'authorize', component: AuthorizationComponent,\n      },\n      {\n        path: 'applications', component: ApplicationsComponent,\n      },\n      {\n        path: 'social-agents', component: SocialAgentsComponent,\n      },\n      {\n        path: 'add-social-agent', component: AddSocialAgentComponent,\n      },\n      {\n        path: 'data', component: DataComponent,\n      },\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes), TranslateModule],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemoMaterialModule",
            "id": "module-DemoMaterialModule-8244866c69a5508c989cfbdc750d86727382c0d2452d5b5c610a25ac9753bda659ecf9b0b8ab28f1069a9703b5738711b793cb354f331476ad8d4d1a3a4834c2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/material-module.ts",
            "methods": [],
            "sourceCode": "import {DragDropModule} from '@angular/cdk/drag-drop';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {NgModule} from '@angular/core';\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatBadgeModule } from \"@angular/material/badge\";\nimport { MatBottomSheetModule } from \"@angular/material/bottom-sheet\";\nimport { MatButtonToggleModule } from \"@angular/material/button-toggle\";\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { MatChipsModule } from \"@angular/material/chips\";\nimport { MatStepperModule } from \"@angular/material/stepper\";\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { MatDividerModule } from \"@angular/material/divider\";\nimport {MatExpansionModule} from \"@angular/material/expansion\";\nimport {MatGridListModule} from \"@angular/material/grid-list\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatListModule} from \"@angular/material/list\";\nimport {MatMenuModule} from \"@angular/material/menu\";\nimport {MatNativeDateModule, MatRippleModule} from \"@angular/material/core\";\nimport {MatPaginatorModule} from \"@angular/material/paginator\";\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {MatRadioModule} from \"@angular/material/radio\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatSidenavModule} from \"@angular/material/sidenav\";\nimport {MatSliderModule} from \"@angular/material/slider\";\nimport {MatSlideToggleModule} from \"@angular/material/slide-toggle\";\nimport {MatSnackBarModule} from \"@angular/material/snack-bar\";\nimport {MatSortModule} from \"@angular/material/sort\";\nimport {MatTableModule} from \"@angular/material/table\";\nimport {MatTabsModule} from \"@angular/material/tabs\";\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\nimport {MatTreeModule} from \"@angular/material/tree\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {ReactiveFormsModule, FormsModule} from \"@angular/forms\";\n\n@NgModule({\n  exports: [\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    ScrollingModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ]\n})\nexport class DemoMaterialModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACCESS_NEEDS_GROUPS_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'access-needs-groups'",
                "rawdescription": "Group of all the groups",
                "description": "<p>Group of all the groups</p>\n"
            },
            {
                "name": "ACCESS_NEEDS_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'access-needs'"
            },
            {
                "name": "accessNeedsGroupReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  accessNeedsGroupsInitialState,\n  on(Actions.addAccessNeedGroup, (state, {group}) => groupsAdapter.addOne(group, state)),\n)"
            },
            {
                "name": "accessNeedsGroupsInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AccessNeedGroupState",
                "defaultValue": "groupsAdapter.getInitialState()"
            },
            {
                "name": "accessNeedsInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AccessNeedsState",
                "defaultValue": "needsAdapter.getInitialState()"
            },
            {
                "name": "accessNeedsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  accessNeedsInitialState,\n  on(Actions.addAccessNeed, (state, {need}) => needsAdapter.addOne(need, state)),\n)"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<Application>()"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/social-agent.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<SocialAgent>()"
            },
            {
                "name": "addAccessNeed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/access-needs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/Response] Add Access Need', props<{need: AccessNeed}>())"
            },
            {
                "name": "addAccessNeedGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/access-needs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/Response] Add Access Need Group', props<{group: AccessNeedGroup}>())"
            },
            {
                "name": "addShapeTree",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/access-needs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/Response] Add ShapeTree', props<{tree: ShapeTree}>())"
            },
            {
                "name": "addSocialAgent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Add Social Agent',\n  props<{webId: IRI, label: string, note?: string}>()\n)"
            },
            {
                "name": "APPLICATION_PROFILE_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'applications'"
            },
            {
                "name": "applicationAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter"
            },
            {
                "name": "applicationProfileReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Adding Single Application Profile',\n  props<{profile: Application}>(),\n)"
            },
            {
                "name": "applicationProfileReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.applicationProfileReceived, (state, {profile}) => adapter.addOne(profile, state)),\n  on(DataActions.applicationProfilesReceived, (state, {profiles}) => adapter.addMany(profiles, state)),\n)"
            },
            {
                "name": "applicationProfilesReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Received',\n  props<{profiles: Application[]}>(),\n)"
            },
            {
                "name": "applicationsPanelLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Requested'\n)"
            },
            {
                "name": "authorizationReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Authorization Received',\n  props<{ accessAuthorization: AccessAuthorization }>()\n)"
            },
            {
                "name": "authorizeApplication",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Authorize Application',\n  props<{ authorization: Authorization }>()\n)"
            },
            {
                "name": "bothEndsLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.isLoggedIn && core.isServerLoggedIn\n)"
            },
            {
                "name": "childrenOf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: AccessNeedsState, ids: string[]): AccessNeed[] => {\n  const needs = ids.map(id => state.entities[id] as AccessNeed);\n  const children = needs.reduce((acc, current) => ([...acc, ...current.children]), [] as string[]);\n\n  if (children.length > 0) {\n    return [...needs, ...childrenOf(state, children)];\n  }\n\n  return needs;\n}",
                "rawdescription": "Recursively traverses the needs and their children through their ids to find all the access needs related to\na group regardless of how deep it is.\nTODO check for infinite loops, if a access need is already present then don add it again",
                "description": "<p>Recursively traverses the needs and their children through their ids to find all the access needs related to\na group regardless of how deep it is.\nTODO check for infinite loops, if a access need is already present then don add it again</p>\n"
            },
            {
                "name": "CORE_LANGUAGE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'coreLanguage'"
            },
            {
                "name": "CORE_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'core'"
            },
            {
                "name": "CoreActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  loginRequested,\n  loginInitiated,\n  incomingLoginRedirect,\n  oidcInfoReceived,\n  webIdReceived,\n  loginStatusChanged,\n  serverSessionRequested,\n  serverSessionReceived,\n  pathRequested,\n  requestName,\n  serverLoginRequested,\n  serverLoginInitiated\n}"
            },
            {
                "name": "coreReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(CoreActions.loginInitiated, (state, {oidcIssuer}) => ({...state, oidcIssuer})),\n  on(CoreActions.webIdReceived, (state, {webId}) => ({...state, webId})),\n  on(CoreActions.loginStatusChanged, (state, {loggedIn}) => ({...state, isLoggedIn: loggedIn, loginKnown: true})),\n  on(CoreActions.serverSessionReceived, (state, {isServerLoggedIn, redirectUrl}) => ({...state, isServerLoggedIn, redirectUrl: redirectUrl ? redirectUrl : ''})),\n  on(CoreActions.pathRequested, (state, {requestedPath}) => ({\n    ...state,\n    requestedPath: excludedPaths.includes(requestedPath) ? '/dashboard' : requestedPath\n  }))\n)"
            },
            {
                "name": "DATA_REGISTRY_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/data-registry.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'data'"
            },
            {
                "name": "DataActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  applicationsPanelLoaded,\n  applicationProfilesReceived,\n  applicationProfileReceived,\n  socialAgentsPanelLoaded,\n  socialAgentProfilesReceived,\n  addSocialAgent,\n  socialAgentProfileReceived,\n  dataRegistriesNeeded,\n  dataRegistriesProvided,\n  authorizeApplication,\n  authorizationReceived,\n}"
            },
            {
                "name": "dataRegistriesNeeded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[DATA REGISTRIES] Data Registries Requested'\n)"
            },
            {
                "name": "dataRegistriesProvided",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[DATA REGISTRIES] Data Registries Received',\n  props<{registries: DataRegistry[]}>(),\n)"
            },
            {
                "name": "dataRegistriesReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/data-registry.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.dataRegistriesProvided, (state, {registries}) => insertEntities(state, registries)),\n)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/add-social-agent-form/add-social-agent-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/app-view/app-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/instance-selector/instance-selector.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DescActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/description.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  descriptionsNeeded,\n  descriptionsReceived,\n}"
            },
            {
                "name": "DESCRIPTIONS_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/descriptions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'descriptions'"
            },
            {
                "name": "descriptionsNeeded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/description.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions needed for application',\n  props<{applicationId: string}>(),\n)"
            },
            {
                "name": "descriptionsReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/description.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions received for application',\n  props<{authorizationData: AuthorizationData}>(),\n)"
            },
            {
                "name": "descriptionsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/descriptions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(DescActions.descriptionsNeeded, (state, {applicationId}) => ({...state, selectedApplication: applicationId })),\n  on(DescActions.descriptionsReceived, (state, {authorizationData}) => ({ selectedApplication: state.selectedApplication, ...insertEntity(state, authorizationData)})),\n)"
            },
            {
                "name": "Effects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/effects/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ApplicationProfileEffects,\n  CoreEffects,\n]"
            },
            {
                "name": "ENV",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  OIDC_CLIENT_ID: 'http://localhost:4200/assets/id.jsonld',\n  BASE_URL: 'http://localhost:4200',\n  SRV_BASE: 'http://localhost:4000',\n  DEFAULT_IDP: 'http://localhost:3000/',\n  VAPID_PUBLIC_KEY: \"BNUaG9vwp-WE_cX-3dNLebyczW_RivE8wHECIvZIUMUZ3co6P79neE3hueJJtFcg5ezTZ25T1ITciujz-mlAcnY\",\n}"
            },
            {
                "name": "ENV",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  OIDC_CLIENT_ID: 'http://localhost:4200/assets/id.jsonld',\n  BASE_URL: 'http://localhost:4200',\n  SRV_BASE: 'http://localhost:4000',\n  DEFAULT_IDP: 'http://localhost:3000/',\n  VAPID_PUBLIC_KEY: \"BNUaG9vwp-WE_cX-3dNLebyczW_RivE8wHECIvZIUMUZ3co6P79neE3hueJJtFcg5ezTZ25T1ITciujz-mlAcnY\"\n}"
            },
            {
                "name": "excludedPaths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['/', '/start', '/redirect', '/login', '/connect']"
            },
            {
                "name": "flatAccessNeed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/effects/application.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(apiAccess: ApiAccessNeed): AccessNeed[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []}];\n\n  else {\n    // collect and recurse\n    const newAccess: AccessNeed = {...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []};\n    const convertedChildren = children.map(c => flatAccessNeed(c)).flat();\n\n    return [newAccess, ...convertedChildren];\n  }\n}"
            },
            {
                "name": "flatAccessNeedGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/effects/application.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(apiGroup: ApiGroup): AccessNeedGroup => {\n  return {...apiGroup, needs: apiGroup.needs.map(need => need.id)};\n}"
            },
            {
                "name": "flatShapeTrees",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/effects/application.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(apiAccess: ApiAccessNeed): ShapeTree[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label}]\n\n  else {\n    const thisShapeTree = {id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label};\n    const childrenShapeTrees = children.map(c => flatShapeTrees(c)).flat();\n\n    return [thisShapeTree, ...childrenShapeTrees];\n  }\n}"
            },
            {
                "name": "getSelectedApplication",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/application.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectApplicationsFeature,\n  // getSelectedApplicationId,\n  selectCurrentApplication,\n  (state, id) => id ? state.entities[id] : null,\n)"
            },
            {
                "name": "groupsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<AccessNeedGroup>()"
            },
            {
                "name": "incomingLoginRedirect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Incoming Login Redirect',\n  props<{url: string}>(),\n)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationsState",
                "defaultValue": "adapter.getInitialState({\n  selectedApplication: null,\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CoreState",
                "defaultValue": "{\n  oidcIssuer: '',\n  webId: '',\n  loginKnown: false,\n  isLoggedIn: false,\n  isServerLoggedIn: false,\n  redirectUrl: '',\n  requestedPath: '/dashboard',\n  language: preferLanguage.language === '' || preferLanguage.language === undefined ? navigator.language.split('-')[0] : preferLanguage.language,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/data-registry.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DataRegistryState",
                "defaultValue": "{\n  byId: {},\n  allIds: [],\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/descriptions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DescriptionsState",
                "defaultValue": "{\n  byId: {},\n  allIds: [],\n  selectedApplication: null\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/social-agent.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SocialAgentState",
                "defaultValue": "adapter.getInitialState()"
            },
            {
                "name": "insertEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entities: T[]) => {\n  for (const entity of entities) state = insertEntity(state, entity);\n  return state;\n}"
            },
            {
                "name": "insertEntity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entry: T): NormalizedState<T> => {\n  const byId = {...state.byId, [entry.id]: entry};\n  const allIds = [...state.allIds, entry.id];\n\n  return {byId, allIds}\n}"
            },
            {
                "name": "internalSelectors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/application.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "applicationAdapter.getSelectors()"
            },
            {
                "name": "Languages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/languages.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<any>",
                "defaultValue": "[\n  {\n    label: 'English',\n    id: 'en'\n  },\n  {\n    label: 'Español',\n    id: 'es'\n  }\n]"
            },
            {
                "name": "LanguageSelectClose",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/language/language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoadingNeeds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/app-view/app-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn_NotificationsDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn_NotificationsEnabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loggedInStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.isLoggedIn,\n)"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loginInitiated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Login Initiated',\n   props<{oidcIssuer: string}>(),\n)",
                "rawdescription": "Marks that the navigations has been handled off to the user IDP",
                "description": "<p>Marks that the navigations has been handled off to the user IDP</p>\n"
            },
            {
                "name": "loginKnown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.loginKnown\n)"
            },
            {
                "name": "loginRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Login Requested',\n  props<{oidcIssuer: string}>(),\n)"
            },
            {
                "name": "loginStatusChanged",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Login Status Changed',\n  props<{loggedIn: boolean}>(),\n)"
            },
            {
                "name": "mapAuthorizationDataToNeedsActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/effects/application.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data: AuthorizationData) => {\n  const needs = data.accessNeedGroup.needs;\n\n  const shapeTrees = needs.map(need => flatShapeTrees(need)).flat();\n  const accessNeeds = needs.map(need => flatAccessNeed(need)).flat();\n\n  const shapeTreeActions = shapeTrees.map(tree => NeedActions.addShapeTree({tree}));\n  const needsActions = accessNeeds.map(need => NeedActions.addAccessNeed({need}));\n\n  const group = flatAccessNeedGroup(data.accessNeedGroup);\n  const groupAction = NeedActions.addAccessNeedGroup({group});\n  return [shapeTreeActions, needsActions, groupAction];\n}"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!ENV.production ? [localStorageSyncReducer] : [localStorageSyncReducer]"
            },
            {
                "name": "needsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<AccessNeed>()"
            },
            {
                "name": "oidcInfoReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] OIDC Info Received',\n  props<{oidcInfo: ISessionInfo}>(),\n)"
            },
            {
                "name": "oidcIssuer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.oidcIssuer,\n)"
            },
            {
                "name": "Optional",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/access-need-view/access-need-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pathRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Path requested',\n  props<{requestedPath: string}>()\n)"
            },
            {
                "name": "preferLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "JSON.parse(localStorage.getItem(CORE_LANGUAGE_KEY) || '{}')"
            },
            {
                "name": "prefLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.language\n)"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "redirectUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.redirectUrl,\n)"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<RootState>",
                "defaultValue": "{\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [SOCIAL_AGENT_STATE_KEY]: socialAgentsReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n  [DATA_REGISTRY_STATE_KEY]: dataRegistriesReducer,\n  [ACCESS_NEEDS_STATE_KEY]: accessNeedsReducer,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: accessNeedsGroupReducer,\n  [SHAPE_TREE_STATE_KEY]: shapetreeReducer,\n}"
            },
            {
                "name": "removeEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, ids: string[]) => {\n  for (const id of ids) state = removeEntity(state, id);\n  return state;\n}"
            },
            {
                "name": "removeEntity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, id: string): NormalizedState<T> => {\n\n  if (!state.allIds.includes(id)) return state;\n\n  const byId = {...state.byId};\n  const allIds = [...state.allIds].filter(_id => _id != id);\n\n  delete byId[id];\n  return {byId, allIds}\n}"
            },
            {
                "name": "requestedPath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.requestedPath,\n)"
            },
            {
                "name": "requestName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Request Name',\n)"
            },
            {
                "name": "Required",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/access-need-view/access-need-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAccessNeedGroupFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AccessNeedGroupState>(ACCESS_NEEDS_GROUPS_STATE_KEY)"
            },
            {
                "name": "selectAccessNeedsFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AccessNeedsState>(ACCESS_NEEDS_STATE_KEY)"
            },
            {
                "name": "selectApplications",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/application.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectApplicationsFeature,\n  internalSelectors.selectAll,\n)"
            },
            {
                "name": "selectApplicationsFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/application.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ApplicationsState>(APPLICATION_PROFILE_STATE_KEY)"
            },
            {
                "name": "selectCore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<CoreState>(CORE_STATE_KEY)"
            },
            {
                "name": "selectCurrentApplication",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/description.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectDescriptionsFeature,\n  state => state.selectedApplication,\n)"
            },
            {
                "name": "selectCurrentGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAccessNeedGroupFeature,\n  getSelectedApplication,\n  (state, app) => app ? state.entities[app.accessNeedGroup] as AccessNeedGroup : null\n)"
            },
            {
                "name": "selectCurrentNeeds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAccessNeedsFeature,\n  selectCurrentGroup,\n  (state, group) => group ? childrenOf(state, group.needs): null,\n)"
            },
            {
                "name": "selectCurrentShapeTrees",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectShapetreeFeature,\n  selectCurrentNeeds,\n  // TODO ! is it possible to ensure that shapetree is always defined/work around the undefined?\n  function (state, needs) {\n    return needs ? needs.map(need => state.entities[need!.shapeTree]) as ShapeTree[] : null;\n  },\n)"
            },
            {
                "name": "selectDataRegistries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectDataRegistriesFeature,\n  state => ([...Object.values(state.byId)]),\n)"
            },
            {
                "name": "selectDataRegistriesFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<DataRegistryState>(DATA_REGISTRY_STATE_KEY)"
            },
            {
                "name": "selectDescriptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/description.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectDescriptionsFeature,\n  state => (state.byId[state.selectedApplication!]),\n)"
            },
            {
                "name": "selectDescriptionsFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/description.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<DescriptionsState>(DESCRIPTIONS_STATE_KEY)"
            },
            {
                "name": "selectors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/social-agent.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "socialAgentAdapter.getSelectors()"
            },
            {
                "name": "selectShapetreeFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/access-needs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ShapetreesState>(SHAPE_TREE_STATE_KEY)"
            },
            {
                "name": "selectSocialAgents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/social-agent.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSocialAgentsFeature,\n  selectors.selectAll,\n)"
            },
            {
                "name": "selectSocialAgentsFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/social-agent.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<SocialAgentState>(SOCIAL_AGENT_STATE_KEY)"
            },
            {
                "name": "serverLoggedInStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.isServerLoggedIn,\n)"
            },
            {
                "name": "serverLoginInitiated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Server login Initiated'\n)",
                "rawdescription": "Marks that the navigations has been handled off to the user IDP",
                "description": "<p>Marks that the navigations has been handled off to the user IDP</p>\n"
            },
            {
                "name": "serverLoginRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Server Login Requested'\n)"
            },
            {
                "name": "serverSessionReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Server session status received',\n  props<{isServerLoggedIn: boolean, redirectUrl?: string}>(),\n)"
            },
            {
                "name": "serverSessionRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Server session status requested',\n  props<{oidcIssuer: string}>(),\n)"
            },
            {
                "name": "SHAPE_TREE_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'shapetrees'",
                "rawdescription": "Group of all the shapetrees that have been loaded into the application through the different access needs",
                "description": "<p>Group of all the shapetrees that have been loaded into the application through the different access needs</p>\n"
            },
            {
                "name": "shapetreeAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<ShapeTree>()"
            },
            {
                "name": "shapeTreeInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "shapetreeAdapter.getInitialState()"
            },
            {
                "name": "shapetreeReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/access-needs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  shapeTreeInitialState,\n  on(Actions.addShapeTree, (state, {tree}) => shapetreeAdapter.addOne(tree, state))\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SOCIAL_AGENT_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/social-agent.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'social-agents'"
            },
            {
                "name": "socialAgentAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/social-agent.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter"
            },
            {
                "name": "socialAgentProfileReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Single Social Agent Profile Received',\n  props<{profile: SocialAgent}>(),\n)"
            },
            {
                "name": "socialAgentProfilesReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Social Agent Profiles Received',\n  props<{profiles: SocialAgent[]}>(),\n)"
            },
            {
                "name": "socialAgentsPanelLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Social Agent Profiles Requested'\n)"
            },
            {
                "name": "socialAgentsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reducers/social-agent.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.socialAgentProfileReceived, (state, {profile}) => adapter.addOne(profile, state)),\n  on(DataActions.socialAgentProfilesReceived, (state, {profiles}) => adapter.addMany(profiles, state)),\n)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/access-need-view/access-need-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/add-social-agent-form/add-social-agent-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/app-view/app-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/instance-selector/instance-selector.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/language/language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "webId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/selectors/core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.webId,\n)"
            },
            {
                "name": "webIdReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] WebId Received',\n  props<{webId: string}>(),\n)"
            },
            {
                "name": "WithWebId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/add-social-agent-form/add-social-agent-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "localStorageSyncReducer",
                "file": "src/app/state/reducers/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<RootState>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "unwrapJson",
                "file": "src/app/utils/solid-client.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Observable<T>"
            }
        ],
        "typealiases": [
            {
                "name": "ACL",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"http://www.w3.org/ns/auth/acl#Read\" | \"http://www.w3.org/ns/auth/acl#Write\" | \"http://www.w3.org/ns/auth/acl#Control\" | \"http://www.w3.org/ns/auth/acl#Append\" | \"http://www.w3.org/ns/auth/acl#Update\"",
                "file": "src/app/state/models/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "AppChangeSet",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/views/app-view/app-view.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/state/reducers/access-needs.reducer.ts": [
                {
                    "name": "ACCESS_NEEDS_GROUPS_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'access-needs-groups'",
                    "rawdescription": "Group of all the groups",
                    "description": "<p>Group of all the groups</p>\n"
                },
                {
                    "name": "ACCESS_NEEDS_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'access-needs'"
                },
                {
                    "name": "accessNeedsGroupReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  accessNeedsGroupsInitialState,\n  on(Actions.addAccessNeedGroup, (state, {group}) => groupsAdapter.addOne(group, state)),\n)"
                },
                {
                    "name": "accessNeedsGroupsInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccessNeedGroupState",
                    "defaultValue": "groupsAdapter.getInitialState()"
                },
                {
                    "name": "accessNeedsInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccessNeedsState",
                    "defaultValue": "needsAdapter.getInitialState()"
                },
                {
                    "name": "accessNeedsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  accessNeedsInitialState,\n  on(Actions.addAccessNeed, (state, {need}) => needsAdapter.addOne(need, state)),\n)"
                },
                {
                    "name": "groupsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<AccessNeedGroup>()"
                },
                {
                    "name": "needsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<AccessNeed>()"
                },
                {
                    "name": "SHAPE_TREE_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'shapetrees'",
                    "rawdescription": "Group of all the shapetrees that have been loaded into the application through the different access needs",
                    "description": "<p>Group of all the shapetrees that have been loaded into the application through the different access needs</p>\n"
                },
                {
                    "name": "shapetreeAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<ShapeTree>()"
                },
                {
                    "name": "shapeTreeInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "shapetreeAdapter.getInitialState()"
                },
                {
                    "name": "shapetreeReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/access-needs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  shapeTreeInitialState,\n  on(Actions.addShapeTree, (state, {tree}) => shapetreeAdapter.addOne(tree, state))\n)"
                }
            ],
            "src/app/state/reducers/application.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<Application>()"
                },
                {
                    "name": "APPLICATION_PROFILE_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'applications'"
                },
                {
                    "name": "applicationAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter"
                },
                {
                    "name": "applicationProfileReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.applicationProfileReceived, (state, {profile}) => adapter.addOne(profile, state)),\n  on(DataActions.applicationProfilesReceived, (state, {profiles}) => adapter.addMany(profiles, state)),\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationsState",
                    "defaultValue": "adapter.getInitialState({\n  selectedApplication: null,\n})"
                }
            ],
            "src/app/state/reducers/social-agent.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/social-agent.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<SocialAgent>()"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/social-agent.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocialAgentState",
                    "defaultValue": "adapter.getInitialState()"
                },
                {
                    "name": "SOCIAL_AGENT_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/social-agent.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'social-agents'"
                },
                {
                    "name": "socialAgentAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/social-agent.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter"
                },
                {
                    "name": "socialAgentsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/social-agent.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.socialAgentProfileReceived, (state, {profile}) => adapter.addOne(profile, state)),\n  on(DataActions.socialAgentProfilesReceived, (state, {profiles}) => adapter.addMany(profiles, state)),\n)"
                }
            ],
            "src/app/state/actions/access-needs.actions.ts": [
                {
                    "name": "addAccessNeed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/access-needs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/Response] Add Access Need', props<{need: AccessNeed}>())"
                },
                {
                    "name": "addAccessNeedGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/access-needs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/Response] Add Access Need Group', props<{group: AccessNeedGroup}>())"
                },
                {
                    "name": "addShapeTree",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/access-needs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/Response] Add ShapeTree', props<{tree: ShapeTree}>())"
                }
            ],
            "src/app/state/actions/application.actions.ts": [
                {
                    "name": "addSocialAgent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Add Social Agent',\n  props<{webId: IRI, label: string, note?: string}>()\n)"
                },
                {
                    "name": "applicationProfileReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Adding Single Application Profile',\n  props<{profile: Application}>(),\n)"
                },
                {
                    "name": "applicationProfilesReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Received',\n  props<{profiles: Application[]}>(),\n)"
                },
                {
                    "name": "applicationsPanelLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Requested'\n)"
                },
                {
                    "name": "authorizationReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Authorization Received',\n  props<{ accessAuthorization: AccessAuthorization }>()\n)"
                },
                {
                    "name": "authorizeApplication",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Authorize Application',\n  props<{ authorization: Authorization }>()\n)"
                },
                {
                    "name": "DataActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  applicationsPanelLoaded,\n  applicationProfilesReceived,\n  applicationProfileReceived,\n  socialAgentsPanelLoaded,\n  socialAgentProfilesReceived,\n  addSocialAgent,\n  socialAgentProfileReceived,\n  dataRegistriesNeeded,\n  dataRegistriesProvided,\n  authorizeApplication,\n  authorizationReceived,\n}"
                },
                {
                    "name": "dataRegistriesNeeded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DATA REGISTRIES] Data Registries Requested'\n)"
                },
                {
                    "name": "dataRegistriesProvided",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DATA REGISTRIES] Data Registries Received',\n  props<{registries: DataRegistry[]}>(),\n)"
                },
                {
                    "name": "socialAgentProfileReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Single Social Agent Profile Received',\n  props<{profile: SocialAgent}>(),\n)"
                },
                {
                    "name": "socialAgentProfilesReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Social Agent Profiles Received',\n  props<{profiles: SocialAgent[]}>(),\n)"
                },
                {
                    "name": "socialAgentsPanelLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SOCIAL AGENT PROFILES] Social Agent Profiles Requested'\n)"
                }
            ],
            "src/app/state/selectors/core.selectors.ts": [
                {
                    "name": "bothEndsLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.isLoggedIn && core.isServerLoggedIn\n)"
                },
                {
                    "name": "loggedInStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.isLoggedIn,\n)"
                },
                {
                    "name": "loginKnown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.loginKnown\n)"
                },
                {
                    "name": "oidcIssuer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.oidcIssuer,\n)"
                },
                {
                    "name": "prefLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.language\n)"
                },
                {
                    "name": "redirectUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.redirectUrl,\n)"
                },
                {
                    "name": "requestedPath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.requestedPath,\n)"
                },
                {
                    "name": "selectCore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<CoreState>(CORE_STATE_KEY)"
                },
                {
                    "name": "serverLoggedInStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.isServerLoggedIn,\n)"
                },
                {
                    "name": "webId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.webId,\n)"
                }
            ],
            "src/app/state/selectors/access-needs.selectors.ts": [
                {
                    "name": "childrenOf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: AccessNeedsState, ids: string[]): AccessNeed[] => {\n  const needs = ids.map(id => state.entities[id] as AccessNeed);\n  const children = needs.reduce((acc, current) => ([...acc, ...current.children]), [] as string[]);\n\n  if (children.length > 0) {\n    return [...needs, ...childrenOf(state, children)];\n  }\n\n  return needs;\n}",
                    "rawdescription": "Recursively traverses the needs and their children through their ids to find all the access needs related to\na group regardless of how deep it is.\nTODO check for infinite loops, if a access need is already present then don add it again",
                    "description": "<p>Recursively traverses the needs and their children through their ids to find all the access needs related to\na group regardless of how deep it is.\nTODO check for infinite loops, if a access need is already present then don add it again</p>\n"
                },
                {
                    "name": "selectAccessNeedGroupFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AccessNeedGroupState>(ACCESS_NEEDS_GROUPS_STATE_KEY)"
                },
                {
                    "name": "selectAccessNeedsFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AccessNeedsState>(ACCESS_NEEDS_STATE_KEY)"
                },
                {
                    "name": "selectCurrentGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAccessNeedGroupFeature,\n  getSelectedApplication,\n  (state, app) => app ? state.entities[app.accessNeedGroup] as AccessNeedGroup : null\n)"
                },
                {
                    "name": "selectCurrentNeeds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAccessNeedsFeature,\n  selectCurrentGroup,\n  (state, group) => group ? childrenOf(state, group.needs): null,\n)"
                },
                {
                    "name": "selectCurrentShapeTrees",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShapetreeFeature,\n  selectCurrentNeeds,\n  // TODO ! is it possible to ensure that shapetree is always defined/work around the undefined?\n  function (state, needs) {\n    return needs ? needs.map(need => state.entities[need!.shapeTree]) as ShapeTree[] : null;\n  },\n)"
                },
                {
                    "name": "selectShapetreeFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/access-needs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ShapetreesState>(SHAPE_TREE_STATE_KEY)"
                }
            ],
            "src/app/state/reducers/core.reducer.ts": [
                {
                    "name": "CORE_LANGUAGE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'coreLanguage'"
                },
                {
                    "name": "CORE_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'core'"
                },
                {
                    "name": "coreReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(CoreActions.loginInitiated, (state, {oidcIssuer}) => ({...state, oidcIssuer})),\n  on(CoreActions.webIdReceived, (state, {webId}) => ({...state, webId})),\n  on(CoreActions.loginStatusChanged, (state, {loggedIn}) => ({...state, isLoggedIn: loggedIn, loginKnown: true})),\n  on(CoreActions.serverSessionReceived, (state, {isServerLoggedIn, redirectUrl}) => ({...state, isServerLoggedIn, redirectUrl: redirectUrl ? redirectUrl : ''})),\n  on(CoreActions.pathRequested, (state, {requestedPath}) => ({\n    ...state,\n    requestedPath: excludedPaths.includes(requestedPath) ? '/dashboard' : requestedPath\n  }))\n)"
                },
                {
                    "name": "excludedPaths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['/', '/start', '/redirect', '/login', '/connect']"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoreState",
                    "defaultValue": "{\n  oidcIssuer: '',\n  webId: '',\n  loginKnown: false,\n  isLoggedIn: false,\n  isServerLoggedIn: false,\n  redirectUrl: '',\n  requestedPath: '/dashboard',\n  language: preferLanguage.language === '' || preferLanguage.language === undefined ? navigator.language.split('-')[0] : preferLanguage.language,\n}"
                },
                {
                    "name": "preferLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "JSON.parse(localStorage.getItem(CORE_LANGUAGE_KEY) || '{}')"
                }
            ],
            "src/app/state/actions/core.actions.ts": [
                {
                    "name": "CoreActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  loginRequested,\n  loginInitiated,\n  incomingLoginRedirect,\n  oidcInfoReceived,\n  webIdReceived,\n  loginStatusChanged,\n  serverSessionRequested,\n  serverSessionReceived,\n  pathRequested,\n  requestName,\n  serverLoginRequested,\n  serverLoginInitiated\n}"
                },
                {
                    "name": "incomingLoginRedirect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Incoming Login Redirect',\n  props<{url: string}>(),\n)"
                },
                {
                    "name": "loginInitiated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Login Initiated',\n   props<{oidcIssuer: string}>(),\n)",
                    "rawdescription": "Marks that the navigations has been handled off to the user IDP",
                    "description": "<p>Marks that the navigations has been handled off to the user IDP</p>\n"
                },
                {
                    "name": "loginRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Login Requested',\n  props<{oidcIssuer: string}>(),\n)"
                },
                {
                    "name": "loginStatusChanged",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Login Status Changed',\n  props<{loggedIn: boolean}>(),\n)"
                },
                {
                    "name": "oidcInfoReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] OIDC Info Received',\n  props<{oidcInfo: ISessionInfo}>(),\n)"
                },
                {
                    "name": "pathRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Path requested',\n  props<{requestedPath: string}>()\n)"
                },
                {
                    "name": "requestName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Request Name',\n)"
                },
                {
                    "name": "serverLoginInitiated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Server login Initiated'\n)",
                    "rawdescription": "Marks that the navigations has been handled off to the user IDP",
                    "description": "<p>Marks that the navigations has been handled off to the user IDP</p>\n"
                },
                {
                    "name": "serverLoginRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Server Login Requested'\n)"
                },
                {
                    "name": "serverSessionReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Server session status received',\n  props<{isServerLoggedIn: boolean, redirectUrl?: string}>(),\n)"
                },
                {
                    "name": "serverSessionRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Server session status requested',\n  props<{oidcIssuer: string}>(),\n)"
                },
                {
                    "name": "webIdReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] WebId Received',\n  props<{webId: string}>(),\n)"
                }
            ],
            "src/app/state/reducers/data-registry.reducer.ts": [
                {
                    "name": "DATA_REGISTRY_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/data-registry.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'data'"
                },
                {
                    "name": "dataRegistriesReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/data-registry.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.dataRegistriesProvided, (state, {registries}) => insertEntities(state, registries)),\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/data-registry.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataRegistryState",
                    "defaultValue": "{\n  byId: {},\n  allIds: [],\n}"
                }
            ],
            "src/app/views/add-social-agent-form/add-social-agent-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/add-social-agent-form/add-social-agent-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/add-social-agent-form/add-social-agent-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                },
                {
                    "name": "WithWebId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/add-social-agent-form/add-social-agent-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/views/app-view/app-view.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/app-view/app-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoadingNeeds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/app-view/app-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/app-view/app-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                }
            ],
            "src/app/views/instance-selector/instance-selector.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/instance-selector/instance-selector.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/instance-selector/instance-selector.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                }
            ],
            "src/app/state/actions/description.actions.ts": [
                {
                    "name": "DescActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/description.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  descriptionsNeeded,\n  descriptionsReceived,\n}"
                },
                {
                    "name": "descriptionsNeeded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/description.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions needed for application',\n  props<{applicationId: string}>(),\n)"
                },
                {
                    "name": "descriptionsReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/actions/description.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions received for application',\n  props<{authorizationData: AuthorizationData}>(),\n)"
                }
            ],
            "src/app/state/reducers/descriptions.reducer.ts": [
                {
                    "name": "DESCRIPTIONS_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/descriptions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'descriptions'"
                },
                {
                    "name": "descriptionsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/descriptions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(DescActions.descriptionsNeeded, (state, {applicationId}) => ({...state, selectedApplication: applicationId })),\n  on(DescActions.descriptionsReceived, (state, {authorizationData}) => ({ selectedApplication: state.selectedApplication, ...insertEntity(state, authorizationData)})),\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/descriptions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DescriptionsState",
                    "defaultValue": "{\n  byId: {},\n  allIds: [],\n  selectedApplication: null\n}"
                }
            ],
            "src/app/state/effects/index.ts": [
                {
                    "name": "Effects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/effects/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ApplicationProfileEffects,\n  CoreEffects,\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "ENV",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  OIDC_CLIENT_ID: 'http://localhost:4200/assets/id.jsonld',\n  BASE_URL: 'http://localhost:4200',\n  SRV_BASE: 'http://localhost:4000',\n  DEFAULT_IDP: 'http://localhost:3000/',\n  VAPID_PUBLIC_KEY: \"BNUaG9vwp-WE_cX-3dNLebyczW_RivE8wHECIvZIUMUZ3co6P79neE3hueJJtFcg5ezTZ25T1ITciujz-mlAcnY\",\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "ENV",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  OIDC_CLIENT_ID: 'http://localhost:4200/assets/id.jsonld',\n  BASE_URL: 'http://localhost:4200',\n  SRV_BASE: 'http://localhost:4000',\n  DEFAULT_IDP: 'http://localhost:3000/',\n  VAPID_PUBLIC_KEY: \"BNUaG9vwp-WE_cX-3dNLebyczW_RivE8wHECIvZIUMUZ3co6P79neE3hueJJtFcg5ezTZ25T1ITciujz-mlAcnY\"\n}"
                }
            ],
            "src/app/state/effects/application.effects.ts": [
                {
                    "name": "flatAccessNeed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/effects/application.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(apiAccess: ApiAccessNeed): AccessNeed[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []}];\n\n  else {\n    // collect and recurse\n    const newAccess: AccessNeed = {...apiAccess, shapeTree: apiAccess.shapeTree.id, children: apiAccess.children?.map(c => c.id) || []};\n    const convertedChildren = children.map(c => flatAccessNeed(c)).flat();\n\n    return [newAccess, ...convertedChildren];\n  }\n}"
                },
                {
                    "name": "flatAccessNeedGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/effects/application.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(apiGroup: ApiGroup): AccessNeedGroup => {\n  return {...apiGroup, needs: apiGroup.needs.map(need => need.id)};\n}"
                },
                {
                    "name": "flatShapeTrees",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/effects/application.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(apiAccess: ApiAccessNeed): ShapeTree[] => {\n  const children = apiAccess.children;\n\n  if (!children || children.length === 0)\n    return [{id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label}]\n\n  else {\n    const thisShapeTree = {id: apiAccess.shapeTree.id, label: apiAccess.shapeTree.label};\n    const childrenShapeTrees = children.map(c => flatShapeTrees(c)).flat();\n\n    return [thisShapeTree, ...childrenShapeTrees];\n  }\n}"
                },
                {
                    "name": "mapAuthorizationDataToNeedsActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/effects/application.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data: AuthorizationData) => {\n  const needs = data.accessNeedGroup.needs;\n\n  const shapeTrees = needs.map(need => flatShapeTrees(need)).flat();\n  const accessNeeds = needs.map(need => flatAccessNeed(need)).flat();\n\n  const shapeTreeActions = shapeTrees.map(tree => NeedActions.addShapeTree({tree}));\n  const needsActions = accessNeeds.map(need => NeedActions.addAccessNeed({need}));\n\n  const group = flatAccessNeedGroup(data.accessNeedGroup);\n  const groupAction = NeedActions.addAccessNeedGroup({group});\n  return [shapeTreeActions, needsActions, groupAction];\n}"
                }
            ],
            "src/app/state/selectors/application.selectors.ts": [
                {
                    "name": "getSelectedApplication",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/application.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectApplicationsFeature,\n  // getSelectedApplicationId,\n  selectCurrentApplication,\n  (state, id) => id ? state.entities[id] : null,\n)"
                },
                {
                    "name": "internalSelectors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/application.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "applicationAdapter.getSelectors()"
                },
                {
                    "name": "selectApplications",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/application.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectApplicationsFeature,\n  internalSelectors.selectAll,\n)"
                },
                {
                    "name": "selectApplicationsFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/application.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ApplicationsState>(APPLICATION_PROFILE_STATE_KEY)"
                }
            ],
            "src/app/state/reducers/utils.ts": [
                {
                    "name": "insertEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entities: T[]) => {\n  for (const entity of entities) state = insertEntity(state, entity);\n  return state;\n}"
                },
                {
                    "name": "insertEntity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entry: T): NormalizedState<T> => {\n  const byId = {...state.byId, [entry.id]: entry};\n  const allIds = [...state.allIds, entry.id];\n\n  return {byId, allIds}\n}"
                },
                {
                    "name": "removeEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, ids: string[]) => {\n  for (const id of ids) state = removeEntity(state, id);\n  return state;\n}"
                },
                {
                    "name": "removeEntity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, id: string): NormalizedState<T> => {\n\n  if (!state.allIds.includes(id)) return state;\n\n  const byId = {...state.byId};\n  const allIds = [...state.allIds].filter(_id => _id != id);\n\n  delete byId[id];\n  return {byId, allIds}\n}"
                }
            ],
            "src/app/languages.ts": [
                {
                    "name": "Languages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/languages.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "defaultValue": "[\n  {\n    label: 'English',\n    id: 'en'\n  },\n  {\n    label: 'Español',\n    id: 'es'\n  }\n]"
                }
            ],
            "src/app/views/language/language.stories.ts": [
                {
                    "name": "LanguageSelectClose",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/language/language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/language/language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/views/navbar/navbar.stories.ts": [
                {
                    "name": "LoggedIn_NotificationsDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedIn_NotificationsEnabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                }
            ],
            "src/app/state/reducers/index.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!ENV.production ? [localStorageSyncReducer] : [localStorageSyncReducer]"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<RootState>",
                    "defaultValue": "{\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [SOCIAL_AGENT_STATE_KEY]: socialAgentsReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n  [DATA_REGISTRY_STATE_KEY]: dataRegistriesReducer,\n  [ACCESS_NEEDS_STATE_KEY]: accessNeedsReducer,\n  [ACCESS_NEEDS_GROUPS_STATE_KEY]: accessNeedsGroupReducer,\n  [SHAPE_TREE_STATE_KEY]: shapetreeReducer,\n}"
                }
            ],
            "src/app/views/access-need-view/access-need-view.stories.ts": [
                {
                    "name": "Optional",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/access-need-view/access-need-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Required",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/access-need-view/access-need-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/access-need-view/access-need-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                }
            ],
            "src/app/state/selectors/description.selectors.ts": [
                {
                    "name": "selectCurrentApplication",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/description.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectDescriptionsFeature,\n  state => state.selectedApplication,\n)"
                },
                {
                    "name": "selectDescriptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/description.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectDescriptionsFeature,\n  state => (state.byId[state.selectedApplication!]),\n)"
                },
                {
                    "name": "selectDescriptionsFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/description.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<DescriptionsState>(DESCRIPTIONS_STATE_KEY)"
                }
            ],
            "src/app/state/selectors/data.selectors.ts": [
                {
                    "name": "selectDataRegistries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectDataRegistriesFeature,\n  state => ([...Object.values(state.byId)]),\n)"
                },
                {
                    "name": "selectDataRegistriesFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<DataRegistryState>(DATA_REGISTRY_STATE_KEY)"
                }
            ],
            "src/app/state/selectors/social-agent.selectors.ts": [
                {
                    "name": "selectors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/social-agent.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "socialAgentAdapter.getSelectors()"
                },
                {
                    "name": "selectSocialAgents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/social-agent.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSocialAgentsFeature,\n  selectors.selectAll,\n)"
                },
                {
                    "name": "selectSocialAgentsFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/selectors/social-agent.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<SocialAgentState>(SOCIAL_AGENT_STATE_KEY)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/reducers/index.ts": [
                {
                    "name": "localStorageSyncReducer",
                    "file": "src/app/state/reducers/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<RootState>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/utils/solid-client.ts": [
                {
                    "name": "unwrapJson",
                    "file": "src/app/utils/solid-client.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Observable<T>"
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/state/models/index.ts": [
                {
                    "name": "ACL",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"http://www.w3.org/ns/auth/acl#Read\" | \"http://www.w3.org/ns/auth/acl#Write\" | \"http://www.w3.org/ns/auth/acl#Control\" | \"http://www.w3.org/ns/auth/acl#Append\" | \"http://www.w3.org/ns/auth/acl#Update\"",
                    "file": "src/app/state/models/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/views/app-view/app-view.component.ts": [
                {
                    "name": "AppChangeSet",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/views/app-view/app-view.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "canActivateChild": [
                            "StartGuard"
                        ],
                        "children": [
                            {
                                "path": "start",
                                "component": "StartComponent"
                            },
                            {
                                "path": "login",
                                "component": "LoginComponent"
                            },
                            {
                                "path": "redirect",
                                "component": "RedirectHandlerComponent"
                            },
                            {
                                "path": "connect",
                                "component": "ConnectServerComponent"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "canActivateChild": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "path": "dashboard",
                                "component": "DashboardComponent"
                            },
                            {
                                "path": "authorize",
                                "component": "AuthorizationComponent"
                            },
                            {
                                "path": "applications",
                                "component": "ApplicationsComponent"
                            },
                            {
                                "path": "social-agents",
                                "component": "SocialAgentsComponent"
                            },
                            {
                                "path": "add-social-agent",
                                "component": "AddSocialAgentComponent"
                            },
                            {
                                "path": "data",
                                "component": "DataComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/add-social-agent/add-social-agent.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddSocialAgentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/applications/applications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplicationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/authorization/authorization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorizationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/connect-server/connect-server.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConnectServerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/data/data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/redirect-handler/redirect-handler.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RedirectHandlerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/social-agents/social-agents.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SocialAgentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/start/start.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/auth.guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/start.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "StartGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/languages.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Languages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/push.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PushService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/access-needs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addAccessNeed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/access-needs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addAccessNeedGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/access-needs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShapeTree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addSocialAgent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationProfileReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationProfilesReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationsPanelLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authorizationReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authorizeApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DataActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataRegistriesNeeded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataRegistriesProvided",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socialAgentProfileReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socialAgentProfilesReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socialAgentsPanelLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CoreActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "incomingLoginRedirect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginInitiated",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginStatusChanged",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "oidcInfoReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pathRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requestName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverLoginInitiated",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverLoginRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverSessionReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverSessionRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "webIdReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/description.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DescActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/description.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "descriptionsNeeded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/actions/description.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "descriptionsReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/application.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationProfileEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/application.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "flatAccessNeed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/application.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "flatAccessNeedGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/application.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "flatShapeTrees",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/application.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapAuthorizationDataToNeedsActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/core.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CoreEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/state/effects/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Effects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/models/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccessNeed",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/state/models/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccessNeedGroup",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/models/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Instance",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/models/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShapeTree",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccessNeedGroupState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccessNeedsState",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShapetreesState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACCESS_NEEDS_GROUPS_STATE_KEY",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACCESS_NEEDS_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accessNeedsGroupReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accessNeedsGroupsInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accessNeedsInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accessNeedsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "groupsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "needsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SHAPE_TREE_STATE_KEY",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shapetreeAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shapeTreeInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/access-needs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shapetreeReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApplicationsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APPLICATION_PROFILE_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationProfileReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CoreState",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CORE_LANGUAGE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CORE_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "excludedPaths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/data-registry.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataRegistryState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/data-registry.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_REGISTRY_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/data-registry.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataRegistriesReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/data-registry.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/descriptions.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DescriptionsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/descriptions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DESCRIPTIONS_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/descriptions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "descriptionsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/descriptions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NormalizedState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RootState",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "localStorageSyncReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/social-agent.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SocialAgentState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/social-agent.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/social-agent.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/social-agent.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SOCIAL_AGENT_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/social-agent.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socialAgentAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/social-agent.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socialAgentsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "insertEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "insertEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "childrenOf",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAccessNeedGroupFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAccessNeedsFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentNeeds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentShapeTrees",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/access-needs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShapetreeFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/application.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/application.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "internalSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/application.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApplications",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/application.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApplicationsFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bothEndsLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loggedInStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginKnown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "oidcIssuer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prefLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "redirectUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requestedPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverLoggedInStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "webId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDataRegistries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDataRegistriesFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/description.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/description.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDescriptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/description.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDescriptionsFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/social-agent.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/social-agent.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSocialAgents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/selectors/social-agent.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSocialAgentsFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/solid-client.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SolidClient",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/solid-client.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "unwrapJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/solid-oidc.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SolidOidc",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/views/access-need-view/access-need-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccessNeedViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/views/access-need-view/access-need-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Optional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/access-need-view/access-need-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Required",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/access-need-view/access-need-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/add-social-agent-form/add-social-agent-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddSocialAgentFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/views/add-social-agent-form/add-social-agent-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/add-social-agent-form/add-social-agent-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/add-social-agent-form/add-social-agent-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithWebId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/app-view/app-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/views/app-view/app-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/app-view/app-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadingNeeds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/app-view/app-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/instance-selector/instance-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InstanceSelectorComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/views/instance-selector/instance-selector.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/instance-selector/instance-selector.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/language/language.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LanguageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/views/language/language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LanguageSelectClose",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/language/language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/views/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn_NotificationsDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn_NotificationsEnabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}